// TODO: expand this section as time goes on
Scoreboard.add(tf2.ticks, dummy);

// See header file for gamemode key
Scoreboard.add(tf2.gamemode, dummy);

// Map key: 0 = ad_test, 1 = cp_test
Scoreboard.add(tf2.map, dummy);

Scoreboard.add(tf2.index, dummy);
Scoreboard.add(tf2.red_progress, dummy);
Scoreboard.add(tf2.blu_progress, dummy);
Scoreboard.add(tf2.capture_threshold, dummy);

Scoreboard.add(tf2.timer, dummy);
Scoreboard.add(tf2.timer.min, dummy);
Scoreboard.add(tf2.timer.sec, dummy);
Scoreboard.add(tf2.increment, dummy);

Scoreboard.add(tf2.queue_type, trigger);
Scoreboard.add(tf2.batch_number, dummy);
Scoreboard.add(tf2.session, dummy);
Scoreboard.add(tf2.class, dummy);
Scoreboard.add(tf2.team, dummy);
Scoreboard.add(tf2.health, dummy);
Scoreboard.add(tf2.max_health, dummy);
Scoreboard.add(tf2.respawn_timer, dummy);
Scoreboard.add(tf2.respawn_timer.sec, dummy);

Scoreboard.add(tf2.permanent.games_won, dummy);
Scoreboard.add(tf2.permanent.games_played, dummy);

gamerule doImmediateRespawn true;
gamerule doMobSpawning false;
gamerule fallDamage false;
gamerule keepInventory true;
gamerule mobGriefing false;
gamerule naturalRegeneration false;
gamerule showDeathMessages false;

// testing purposes only
$Settings.show_debug_messages = true;

// when in score format - RED = 1, BLU = 2
Team.add(RED, "RED", {color: red, prefix: "\"[RED] \"", friendlyFire: false});
Team.add(BLU, "BLU", {color: blue, prefix: "\"[BLU] \"", friendlyFire: false});

Hardcode.repeat("_i_", () => {Bossbar.add(tf2:timer__i_, "");}, start = 1, stop = _INSTANCES_CAP_);

// markers keep track of gamestate
$batch_markers = execute if entity @e[type=marker,tag=tf2.batch];
if ($batch_markers != $Settings.max_batches) setup_markers();

// map data
data merge storage tf2:maps {0:{name: "ad_test", origin: [-500.0d, 1.0d, -500.0d], spawn:{red:[[-487.0d, 1.0d, -487.0d]], blu:[[-513.0d, 1.0d, -513.0d]]}, spawn_time:{red:[5.0f],blu:[5.0f]}, objectives:[{Pos:[-489.5d, 1.0d, -499.5d], Tags:["tf2.objective","tf2.control_point"], data:{capture_threshold: 20.0f, team: 1b, increment: 60.0f}},{Pos:[-499.5d, 1.0d, -499.5d], Tags:["tf2.objective","tf2.control_point","tf2.locked"], data:{capture_threshold: 20.0f, team: 1b, increment: 60.0f}},{Pos:[-509.5d, 1.0d, -499.5d], Tags:["tf2.objective","tf2.control_point","tf2.locked"], data:{capture_threshold: 25.0f, team: 1b, increment: 60.0f}}], gamemode: 1, timer: 480.0f, setup_time: 30.0f}};
data merge storage tf2:maps {1:{name: "cp_test", origin: [-300.0d, 1.0d, -300.0d], spawn:{red:[[-279.0d, 1.0d, -300.0d]], blu:[[-321.0d, 1.0d, -300.0d]]}, spawn_time:{red:[5.0f],blu:[5.0f]}, objectives:[{Pos:[-311.5d, 1.0d, -303.5d], Tags:["tf2.objective","tf2.control_point","tf2.locked"], data:{capture_threshold: 5.0f, team: 2b, increment: 600.0f}},{Pos:[-306.5d, 1.0d, -295.5d], Tags:["tf2.objective","tf2.control_point","tf2.locked"], data:{capture_threshold: 15.0f, team: 2b, increment: 600.0f}},{Pos:[-299.5d, 1.0d, -299.5d], Tags:["tf2.objective","tf2.control_point"], data:{capture_threshold: 30.0f, team: 0b, increment: 600.0f}},{Pos:[-292.5d, 1.0d, -303.5d], Tags:["tf2.objective","tf2.control_point","tf2.locked"], data:{capture_threshold: 15.0f, team: 1b, increment: 600.0f}},{Pos:[-287.5d, 1.0d, -295.5d], Tags:["tf2.objective","tf2.control_point","tf2.locked"], data:{capture_threshold: 5.0f, team: 1b, increment: 600.0f}}], gamemode: 2, timer: 600.0f}};

new predicates(coin_flip) {
    "condition": "minecraft:random_chance",
    "chance": 0.5
}
new predicates(sprinting) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
	"predicate": {
		"flags": {
			"is_sprinting": true
		}
	}
}
new predicates(burning) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
	"predicate": {
		"flags": {
			"is_on_fire": true
		}
	}
}
new tags.entity_types(player_like) {
    "replace": false,
    "values": ["minecraft:player", "minecraft:villager"]
}

if (!$initialization_complete) {
    // Sets up NBT paths & defaults for game settings. 
    // Only runs the very first time the pack is loaded.

    // TODO: replace line below when voting system is added
    $Settings.choose_map_randomly = true;
    $Settings.random_crits = false;
    $Settings.random_spread = false;
    $Settings.use_server_mods = false;
    $Settings.chat_bot = false;
    $Settings.max_batches = 3;

    data merge storage tf2.__temp__:summon {};
    data merge storage tf2.__temp__:lookup {points:[{}]};
    data merge storage tf2:control_points {
        info: [
            [],
            [
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {left:'[""]', mid:'[""]', right:'[""]'}
            ],
            [
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {left:'[""]', mid:'[""]', right:'[""]'}
            ],
            [
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {left:'[""]', mid:'[""]', right:'[""]'}
            ],
            [
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {left:'[""]', mid:'[""]', right:'[""]'}
            ], 
            [
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}}, 
                {left:'[""]', mid:'[""]', right:'[""]'}
            ]
        ]
    };

    // this could *technically* be part of the previous command, but then it would be so long that it's a total PITA.
    Hardcode.repeat(
        "_i_", () => {
            Hardcode.repeat("_j_", 
                () => {data modify storage tf2:control_points info[_i_][_j_].main set value '[{"nbt":"info[_i_][_j_].owner","storage":"tf2:control_points","interpret":true,"font":"tf2:square"},{"nbt":"info[_i_][_j_].progress","storage":"tf2:control_points","interpret":true,"font":"tf2:square"},{"nbt":"info[_i_][_j_].symbol","storage":"tf2:control_points","interpret":true,"font":"tf2:square"},{"nbt":"info[_i_][_j_].extra","storage":"tf2:control_points","interpret":true,"font":"tf2:square"}]';},
                start = 0, stop = 7
            );
        },
        start = 1, stop = _INSTANCES_CAP_
    );
    $initialization_complete = true;
}
$Settings.max_batches < _INSTANCES_CAP_MINUS_ONE_; 

// restart failsafe
execute unless entity @a run {Hardcode.repeat("[i]", () => {tf2.session:$global_[i]++;}, start = 1, stop = _INSTANCES_CAP_);}