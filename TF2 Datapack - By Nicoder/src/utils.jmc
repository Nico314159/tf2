TextProps.font("font", "_foo_", "tf2:_foo_");
TextProp.hoverText(
    "info_atk_def",
    "&<red>RED &<white>starts with all the control points, and &<blue>BLU must capture &<italic>all &<!italic>of them in order to win. Once a point is taken, it cannot be reclaimed by &<red>RED. &<white>If the timer runs out, &<red>RED &<white>wins no matter how much progress &<blue>BLU &<white>has made."
);
TextProp.hoverText(
    "info_control_points", 
    "Each team starts out owning half the control points; whichever team captures all of them wins. Stalemate if the timer runs out."
);
TextProps.nbt(
    propertyName = "gui_wheel",
    indexString = "_path_",
    type = storage,
    source = "tf2.__temp__:lookup",
    path = points[0].wheel._path_,
    interpret = true
);


function setup_markers() {
    // Summons new gamestate markers if there aren't enough, and kills extras if there are too many.

    if ($batch_markers < $Settings.max_batches) {
        summon minecraft:marker 0 0 0 {Tags:["tf2.batch"], data:{lastPos: [0.0d, 0.0d, 0.0d], map: {}}};
    }
    else if ($batch_markers > $Settings.max_batches) kill @e[type=marker,tag=tf2.batch,sort=random,limit=1];
    $batch_markers = execute if entity @e[type=marker,tag=tf2.batch];
    scoreboard players reset $index tf2.batch_number;
    execute as @e[type=marker,tag=tf2.batch] unless score @s tf2.batch_number = @s tf2.batch_number run {
        tf2.map:@s = 1;
        tf2.batch_number:@s > tf2.batch_number:@e[type=marker,tag=tf2.batch];
        tf2.batch_number:@s ++;
        Hardcode.repeat("[i]", () => {tf2.session:@s[scores={tf2.batch_number=[i]}] = tf2.session:$global_[i];}, start = 1, stop = _INSTANCES_CAP_);
    }
    if ($batch_markers != $Settings.max_batches) setup_markers();
}

function disable_sprint() {
    // Prevents players from sprinting by giving them an attribute modifier that cancels it out exactly.
    // Function is executed as all players, *except* those with the tf2.allowed_to_sprint tag (which exists only for debugging)

    // UUID was chosen because it spells out "preventsprinting" in ASCII
    attribute @s[predicate=tf2:sprinting] minecraft:generic.movement_speed modifier add 70726576-656e-7473-7072-696e74696e67 "preventsprinting" -0.23 multiply;
    attribute @s[predicate=!tf2:sprinting] minecraft:generic.movement_speed modifier remove 70726576-656e-7473-7072-696e74696e67;
}

function join_queue() {
    // Adds players to queues when they select them using /trigger.
    // @within __tick()__

    clear @s written_book;
    tag @s add tf2.in_queue;
    tp @s[scores={tf2.queue_type=1}] Lobby.Competitive;
    tp @s[scores={tf2.queue_type=2}] Lobby.Casual;
    tp @s[scores={tf2.queue_type=3}] Lobby.Chaos;
    tf2.batch_number:@s ??= 0;
}

function team_assign() {
    // Assigns players to RED/BLU team evenly (without using randomization).
    // @within start_game.as_marker.main()

    tf2.team:@s = $team_temp;
    tf2.team:@s ++;
    team join RED @s[scores={tf2.team=1}];
    team join BLU @s[scores={tf2.team=2}];
    $team_temp ?= execute if score $team_temp tf2.var matches 0;
    spawn.init();
}

function class_select() {
    $class = tf2.class:@s;
    switch ($class) {
        case Class.SPY:
            tf2.max_health:@s = tf2.health:@s = 125;
            attribute @s minecraft:generic.movement_speed base set 0.12;
        case Class.SNIPER:
            tf2.max_health:@s = tf2.health:@s = 125;
            attribute @s minecraft:generic.movement_speed base set 0.12;
            Class.Sniper.give();
        case Class.SCOUT:
            tf2.max_health:@s = tf2.health:@s = 125;
            attribute @s minecraft:generic.movement_speed base set 0.16;
            Class.Scout.give();
        case Class.SOLDIER:
            tf2.max_health:@s = tf2.health:@s = 200;
            attribute @s minecraft:generic.movement_speed base set 0.102;
        case Class.DEMOMAN:
            tf2.max_health:@s = tf2.health:@s = 175;
            attribute @s minecraft:generic.movement_speed base set 0.1116;
        case Class.HEAVY:
            tf2.max_health:@s = tf2.health:@s = 300;
            attribute @s minecraft:generic.movement_speed base set 0.084;
        case Class.PYRO:
            tf2.max_health:@s = tf2.health:@s = 175;
            attribute @s minecraft:generic.movement_speed base set 0.12;
        case Class.ENGINEER:
            tf2.max_health:@s = tf2.health:@s = 125;
            attribute @s minecraft:generic.movement_speed base set 0.12;
        case Class.MEDIC:
            tf2.max_health:@s = tf2.health:@s = 150;
            attribute @s minecraft:generic.movement_speed base set 0.1284;
    }
}

function swap_hands() {
    item replace entity @s enderchest.0 from entity @s weapon.mainhand;
    item replace entity @s weapon.mainhand from entity @s weapon.offhand; 
    item replace entity @s weapon.offhand from entity @s enderchest.0;
}