new predicate(holding_melee) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {
                "predicates": {
                    "minecraft:custom_data": "{attributes: {isMelee: 1b}}"
                }
            }
        }
    }
}
new predicate(holding_projectile) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {
                "predicates": {
                    "minecraft:custom_data": "{attributes: {isProjectile: 1b}}"
                }
            }
        }
    }
}
new predicate(non_damaging) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:entity_properties",
            "entity": "this",
            "predicate": {
                "equipment": {
                    "mainhand": {
                        "predicates": {
                            "minecraft:custom_data": {
                                "attributes": {"damage": {"base": 0}}
                            }
                        }
                    }
                }
            }
        },
        {
	    	"condition": "minecraft:inverted",
			"term": {
				"condition": "minecraft:entity_properties",
				"entity": "this",
				"predicate": {
					"equipment": {
						"mainhand": {
							"predicates": {
								"minecraft:custom_data": {
                                    "attributes": {"damage": {}}
                                }
							}   
						}
					}
				}
			}
		},
        {
            "condition": "minecraft:reference",
            "name": "tf2:empty_hand"
        }
    ]
}
new predicate(empty_hand) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {"count": 0}
        }
    }
}
new predicate(active_offhand) {
	"condition": "minecraft:entity_properties",
	"entity": "this",
	"predicate": {
		"equipment": {
			"offhand": {
                "count": {"min": 1}
            }
		}
	}
}
new predicate(hide_ammo) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:reference",
            "name": "tf2:holding_melee"
        },
        {
            "condition": "minecraft:reference",
            "name": "tf2:non_damaging"
        }
    ]
}
new predicate(uniform_damage) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:reference",
            "name": "tf2:holding_melee"
        },
        {
            "condition": "minecraft:entity_properties",
            "entity": "this",
            "predicate": {
                "equipment": {
                    "mainhand": {
                        "predicates": {
                            "minecraft:custom_data": {
                                "attributes": {"damage": {"uniform": true}}
                            }
                        }
                    }
                }
            }
        }
    ]
}
new predicate(has_main_fire) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {
                "predicates": {
                    "minecraft:custom_data": {
                        "controls": {"main_fire": true}
                    }
                }
            }
        }
    }
}
new predicate(ammo_in_clip) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:all_of",
            "terms": [
                {
                    "condition": "minecraft:entity_scores",
                    "entity": "this",
                    "scores": {"tf2.current_slot": 0}
                },
                {
                    "condition": "minecraft:entity_scores",
                    "entity": "this",
                    "scores": {"tf2.primary_clip": {"min": 1}}
                }
            ]
        },
        {
            "condition": "minecraft:all_of",
            "terms": [
                {
                    "condition": "minecraft:entity_scores",
                    "entity": "this",
                    "scores": {"tf2.current_slot": 1}
                },
                {
                    "condition": "minecraft:entity_scores",
                    "entity": "this",
                    "scores": {"tf2.secondary_clip": {"min": 1}}
                }
            ]
        }
    ]
}
new item_modifier(load_crossbow) [
	{
		"function": "minecraft:set_components",
		"components": {
			"minecraft:charged_projectiles": [{"id": "minecraft:arrow"}]
		}
	},
	{
		"function": "minecraft:set_custom_data",
		"tag": "{should_detect_click: true}"
	}
];

new tags.function(retina.on_hit) {
    "values": [
        "tf2:weapons/on_hit"
    ],
    "replace": false
}

new tags.damage_type(minecraft.no_impact) {
    "values": [
        "tf2:screenshake"
    ],
    "replace": false
}
new damage_type(screenshake) {
    "exhaustion": 0.0,
    "message_id": "generic",
    "scaling": "never"
}

new trim_material(red) {
    "asset_name": "red",
    "description": {
        "color": "#DD3004",
        "translate": "trim_material.tf2.red"
    },
    "ingredient": "minecraft:red_banner",
    "item_model_index": 0.01
}
new trim_material(blu) {
    "asset_name": "blu",
    "description": {
        "color": "#258474",
        "translate": "trim_material.tf2.blu"
    },
    "ingredient": "minecraft:blue_banner",
    "item_model_index": 0.02
}
new tags.item(minecraft.trim_materials) {
    "values": [
        "minecraft:red_banner",
        "minecraft:blue_banner"
    ]
}

new loot_table(head) {
	"pools": [{
		"rolls": 1,
		"entries": [{
			"type": "minecraft:item",
			"name": "minecraft:paper",
			"functions": [{
				"function": "minecraft:set_custom_model_data",
				"value": {
					"type": "minecraft:score",
					"target": "this",
				 	"score": "tf2.model_number"
				}
			}]
		}]
	}]
}

class Weapons {
    function main_fire() {
        if (tf2.attack_delay:@s > 0) return 0;
        if (tf2.class:@s == 6 && tf2.current_slot:@s == 0 && tf2.time_revved:@s < tf2.rev_threshold:@s) return 0;

        switch (tf2.class:@s) {
            case Class.SPY: Class.Spy.inventory_lock();
            case Class.SNIPER: Class.Sniper.inventory_lock();
            case Class.SCOUT: Class.Scout.inventory_lock();
            case Class.SOLDIER: Class.Soldier.inventory_lock();
            // case Class.DEMOMAN: Class.Demoman.inventory_lock();
            case Class.HEAVY: Class.Heavy.inventory_lock();
            case Class.PYRO: Class.Pyro.inventory_lock();
            // case Class.ENGINEER: Class.Engineer.inventory_lock();
            // case Class.MEDIC: Class.Medic.inventory_lock();
        }

        if (!predicate tf2:has_main_fire) return 0;
        this.get_ammo();
        if ($_clip_ <= 0 && !predicate tf2:holding_melee) return 0;
        if (entity @s[tag=tf2.disguised]) {
            Class.Spy.title_image();
        }
        tag @s remove tf2.disguised;

        if (!predicate tf2:holding_melee) {
            playsound tf2:item.gun.shoot player @s ~ ~ ~ 1.35 1 0.1;
        }

        tf2.team:$current = tf2.team:@s;
        retina:input::{} += @s::SelectedItem.components.minecraft:custom_data.retina;
        
        if (data entity @s SelectedItem.components.minecraft:custom_data.attributes.spreadRecovery) expand {
            $_sr_ = @s::SelectedItem.components.minecraft:custom_data.attributes.spreadRecovery;
            if (tf2.time_idle:@s > $_sr_) {
                // say "doggo 2!";
                retina:input::SpreadFactor = [0, 0];
            }
        }
        $_damage_  = @s::SelectedItem.components.minecraft:custom_data.attributes.damage.base;
        $_range_   = @s::SelectedItem.components.minecraft:custom_data.attributes.range * 1000;
        $_maxRamp_ = @s::SelectedItem.components.minecraft:custom_data.attributes.damage.maxRamp * 100;
        if (!data entity @s SelectedItem.components.minecraft:custom_data.attributes.range) $_range_ = 2147483647;
        if (!data entity @s SelectedItem.components.minecraft:custom_data.attributes.damage.maxRamp) $_maxRamp_ = 150;
        $_rangeDependent_ = execute unless predicate tf2:uniform_damage;
        // retina._variable_:$end_particle = true;

        retina.__variable__:$func_id = 100;
        $_totalDamage_ = 0;
        if (predicate tf2:holding_projectile) {
            this.projectile();
        }
        if (!predicate tf2:holding_projectile) {
            this.hitscan();
        }
        // retina._variable_:$end_particle = false;
        $_delay_ = @s::SelectedItem.components.minecraft:custom_data.attributes.attackDelay * 20000;
        tf2.attack_delay:@s += $_delay_;
        scoreboard players reset $func_id retina.__variable__;

        summon::number.X = retina:output::ContactCoordinates[0];
        summon::number.Y = retina:output::ContactCoordinates[1];
        summon::number.Z = retina:output::ContactCoordinates[2];
        summon::number.value = $_totalDamage_;
        if ($_totalDamage_ >= 1) {
            HUD.damage_numbers() with summon::number;
        }

        // Melee sound effects
        if (predicate tf2:holding_melee) return run {
            execute at @s anchored eyes run particle minecraft:sweep_attack ^ ^ ^1;
            if (!data storage retina:output {Target: "ENTITY"}) {
                return run playsound tf2:item.melee.miss player @s ~ ~ ~ 0.35 0.35 0.1;
            }
            playsound tf2:item.melee.hit player @s ~ ~ ~ 1.5 0.9 0.1;
        }

        $_clip_ --;
        this.set_ammo();
        tf2.consecutive_reload:@s = false;
        tf2.time_idle:@s = 0;
    }
    function hitscan() {
        $_weaponID_ = @s::SelectedItem.components."minecraft:custom_model_data" * 0.001;
        if ($_weaponID_ != 61) {
            return run function retina:traverse/multicast;
        }
        // Heavy minigun {CMD: 61xxx} does 4 at once
        retina:input:: += {HorizontalCount: 1, VerticalCount: 1, CenteredCount: 0};
        function retina:traverse/multicast;
        function retina:traverse/multicast;
        function retina:traverse/multicast;
        function retina:traverse/multicast;
    }
    function projectile() {
        // testing code
        tf2.team:$temp = tf2.team:@s;
        tf2.batch_number:$local = tf2.batch_number:@s;
        retina.__variable__:$input_pitch = @s::Rotation[1] * 10;
        retina.__variable__:$input_yaw = @s::Rotation[0] * 10;
        function retina:math/gimbal_to_vec;
        summon::projectile = {X: 0.0, Y: 0.0, Z: 0.0, yaw: 0.0, pitch: 0.0, spawnX: 0.0, spawnY: 0.0, spawnZ: 0.0};

        // Convert HU/sec -> blocks/sec
        summon::projectile.speed = 0.01905 * (double) @s::SelectedItem.components.minecraft:custom_data.projectile.speed;
        summon::projectile.speed_range = @s::SelectedItem.components.minecraft:custom_data.projectile.speed_range;
        if (data storage tf2:summon projectile.speed_range) expand {
            summon::projectile.speed = 0.01905 * (double) Math.macro_random() 
                                       with summon::projectile.speed_range;

            tellraw @a {"nbt":"projectile.speed","storage":"tf2:summon"};
        }
        // Convert blocks/sec -> blocks/tick
        summon::projectile.speed = EVAL(1  / 20_000) * (double) summon::projectile.speed * 1000;
        // Prepare for multiplication by Retina vector (which is normalized to length of 480)
        summon::projectile.speed = EVAL(1 / (Retina.SCALE * 1000)) * (double) summon::projectile.speed * 1000;

        summon::projectile.deviation = @s::SelectedItem.components.minecraft:custom_data.projectile.deviation;
        if (data storage tf2:summon projectile.deviation) {
            Projectile.deviation();
        }
        execute run {
            $ execute store result storage tf2:summon projectile.X double $(speed) run scoreboard players get $output_vec3.X retina.__variable__;
            $ execute store result storage tf2:summon projectile.Y double $(speed) run scoreboard players get $output_vec3.Y retina.__variable__;
            $ execute store result storage tf2:summon projectile.Z double $(speed) run scoreboard players get $output_vec3.Z retina.__variable__;
        } with summon::projectile;

        summon::projectile.yaw = 0.1 * (double) retina.__variable__:$input_yaw;
        summon::projectile.pitch = 0.1 * (double) retina.__variable__:$input_pitch;
        summon::projectile.weapon = @s::SelectedItem;
        summon::projectile.spawnX = summon::projectile.weapon.components.minecraft:custom_data.projectile.spawn[0];
        summon::projectile.spawnY = summon::projectile.weapon.components.minecraft:custom_data.projectile.spawn[1];
        summon::projectile.spawnZ = summon::projectile.weapon.components.minecraft:custom_data.projectile.spawn[2];
        summon::projectile.weapon_name = summon::projectile.weapon.components.minecraft:custom_name;
        summon::projectile.CMD = summon::projectile.weapon.components.minecraft:custom_model_data;
        summon::projectile.owner = @s::UUID;
        $explosive  = summon::projectile.weapon.components.minecraft:custom_data.projectile.explosion;
        $has_trail  = summon::projectile.weapon.components.minecraft:custom_data.projectile.has_trail;
        $ignore_env = summon::projectile.weapon.components.minecraft:custom_data.projectile.ignore_env;
        $drag = summon::projectile.weapon.components.minecraft:custom_data.projectile.drag;
        execute at @s anchored eyes run {
            $ summon arrow ^$(spawnX) ^$(spawnY) ^$(spawnZ) {
                Owner: $(owner),
                damage: 0.0,
                pickup: false,
                NoGravity: true,
                Silent: true,
                Invulnerable: true,
                PersistenceRequired: true,
                ShotFromCrossbow: true,
                PierceLevel: 127b,
                Tags: ["tf2.projectile", "tf2.new"],
                Motion: [$(X)d, $(Y)d, $(Z)d],
                active_effects: [{
                    id: "minecraft:invisibility",
                    amplifier: false,
                    show_particles: false,
                    duration: -1
                }],
                Passengers: [{
                    Rotation: [$(yaw)f, $(pitch)f],
                    id: "minecraft:item_display",
                    item: {id: "minecraft:glowstone_dust", components:{
                        "minecraft:custom_model_data": $(CMD), 
                        "minecraft:custom_data": {Motion:[$(X)d, $(Y)d, $(Z)d]}
                    }},
                    Tags: ["tf2.new", "tf2.projectile"]
                }]
            };
        } with summon::projectile;
        execute as @e[type=item_display,tag=tf2.new,tag=tf2.projectile,limit=1,sort=nearest] run {
            @s::Rotation[0] = summon::projectile.yaw;
            @s::Rotation[1] = summon::projectile.pitch;
            @s::item.components.minecraft:custom_name = summon::projectile.weapon_name;           
            tag @s remove tf2.new;
            // if (!block ~ ~ ~ #retina:airs) {
            //     execute at @s run tp ^ ^ ^1;
            // }
        }
        execute as @e[type=arrow,tag=tf2.new,tag=tf2.projectile,limit=1,sort=nearest] run {
            team join player_motion.no_collide;
            tf2.age:@s = 0;
            tf2.team:@s = tf2.team:$temp;
            tf2.batch_number:@s = tf2.batch_number:$local;
            execute on origin run tag @s add tf2.origin;
            execute on passengers expand {
                @s::item.components.minecraft:custom_data.attributes = @a[tag=tf2.origin,limit=1]::SelectedItem.components.minecraft:custom_data.attributes;
                @s::item.components.minecraft:custom_data.projectile = @a[tag=tf2.origin,limit=1]::SelectedItem.components.minecraft:custom_data.projectile;
            } 
            execute on origin run tag @s remove tf2.origin;
            
            Hardcode.repeatList("|property|", () => {
                if ($|property|) {
                    tag @s add tf2.|property|;
                }
            }, ["explosive", "has_trail", "drag", "ignore_env"]);

            tf2.lifetime:@s = Projectile.calc_lifetime();

            // execute at @s[tag=tf2.has_trail] run particle minecraft:flame ^ ^ ^0.2;
            tag @s remove tf2.new;
        }
    }
    function get_ammo() {
        if (tf2.current_slot:@s == 0) return run {
            $_clip_    = tf2.primary_clip:@s;
            $_maxClip_ = tf2.primary_maxClip:@s;
            $_ammo_    = tf2.primary_ammo:@s;
        }
        if (tf2.current_slot:@s == 1) {
            $_clip_    = tf2.secondary_clip:@s;
            $_maxClip_ = tf2.secondary_maxClip:@s;
            $_ammo_    = tf2.secondary_ammo:@s;
	}	}
    function set_ammo() {
        if (tf2.current_slot:@s == 0) return run {
            tf2.primary_clip:@s      = $_clip_;
            tf2.primary_maxClip:@s   = $_maxClip_;
            tf2.primary_ammo:@s      = $_ammo_;
        }
        if (tf2.current_slot:@s == 1) {
            tf2.secondary_clip:@s    = $_clip_;
            tf2.secondary_maxClip:@s = $_maxClip_;
            tf2.secondary_ammo:@s    = $_ammo_;
	}	}
    function reload() {
        switch (tf2.class:@s) {
            case Class.SPY: Class.Spy.inventory_lock();
            case Class.SNIPER: Class.Sniper.inventory_lock();
            case Class.SCOUT: Class.Scout.inventory_lock();
            case Class.SOLDIER: Class.Soldier.inventory_lock();
            // case Class.DEMOMAN: Class.Demoman.inventory_lock();
            case Class.HEAVY: Class.Heavy.inventory_lock();
            case Class.PYRO: Class.Pyro.inventory_lock();
            // case Class.ENGINEER: Class.Engineer.inventory_lock();
            // case Class.MEDIC: Class.Medic.inventory_lock();
        }
        if (predicate tf2:hide_ammo) return 0;
        if (tf2.reload_delay:@s > 0) return 0;
        this.get_ammo();
        if ($_clip_ >= $_maxClip_) return 0;
        if ($_ammo_ == 0) return 0;

        $_reloadType_ = @s::SelectedItem.components.minecraft:custom_data.controls.reload;
        switch ($_reloadType_) {
            case Reload.NONE:
                break;
            case Reload.SINGLE:
                $_clip_ ++;
                $_ammo_ --;
            case Reload.LOSSY:
                $_ammoCost_ = $_maxClip_;
                $_ammoCost_ < $_ammo_;
                $_clip_ = $_ammoCost_;
                $_ammo_ -= $_ammoCost_;
            case Reload.LOSSLESS:
                $_ammoCost_ = $_maxClip_;
                $_ammoCost_ -= $_clip_;
                $_ammoCost_ < $_ammo_;
                $_clip_ += $_ammoCost_;
                $_ammo_ -= $_ammoCost_;
        }
        this.set_ammo();

        if (tf2.consecutive_reload:@s == 0) $_reloadDelay_ = @s::SelectedItem.components.minecraft:custom_data.attributes.reloadDelay[0] * 20000;
        if (tf2.consecutive_reload:@s == 1) $_reloadDelay_ = @s::SelectedItem.components.minecraft:custom_data.attributes.reloadDelay[1] * 20000;
        tf2.reload_delay:@s += $_reloadDelay_;
        tf2.consecutive_reload:@s = true;

        if (tf2.attack_delay:@s <= 0) {
            // Prevents it from seeing "unloaded crossbow" the next tick and assuming the fire button was hit
            item modify entity @s weapon.mainhand tf2:load_crossbow;
        }
        return 1;
    }
    function attempt_autoreload() {
        // if (items entity @s[scores={tf2.is_invisible=0}] weapon.mainhand clay_ball[custom_data~{cloak: 'cloak'}]) {
        //     return fail;
        // }
        $should_animate = this.reload();
        if (!$should_animate) return fail;
        item replace entity @s enderchest.0 from entity @s weapon.mainhand;
        item replace entity @s weapon.mainhand with air;
        item replace entity @s weapon.mainhand from entity @s enderchest.0;
        return 1;
    }
    function on_hit() {
        if (retina.__variable__:$func_id !== 100) return 0;

        execute unless predicate tf2:hide_ammo at @s run Weapons.draw_line();

        $backstab ?= execute if items entity @s weapon.mainhand minecraft:snowball[minecraft:custom_data~{attributes:{canBackstab: true}}];
        execute as @e[type=#tf2:player_like, scores={retina.hit=1..}, tag=!tf2.dead, gamemode=!spectator] run this.apply_damage();
    }
    function draw_line() {
        // @within this.damage()
        execute summon minecraft:marker run {
            if (retina.__variable__:$offset_Y matches 776..778) {tp @s ~ ~1.42 ~;}
            if (retina.__variable__:$offset_Y matches 608..610) {tp @s ~ ~1.07 ~;}
            if (retina.__variable__:$offset_Y === 192)          {tp @s ~ ~0.20 ~;}
            tag @s add tf2.height;
            summon::line.X = @s::Pos[0];
            summon::line.Y = @s::Pos[1];
            summon::line.Z = @s::Pos[2];
            kill @s;
        }
        // rotate according to player vector
        $input_vec3.X = retina.__variable__:$output_vec3.X;
        $input_vec3.Y = retina.__variable__:$output_vec3.Y;
        $input_vec3.Z = retina.__variable__:$output_vec3.Z;
        Math.vec_to_gimbal();
        summon::line.yaw = 0.1 * (float) $output_yaw;
        summon::line.pitch = 0.1 * (float) $output_pitch;

        $scale_length = retina:output::Distance * 2000;
        //$scale_length -= 400;
        summon::line.scale = 0.001 * (float) $scale_length;

        execute run {
            $execute positioned $(X) $(Y) $(Z) run summon item_display ^ ^ ^0.15 {
                item: {id: "glowstone_dust", components: {"minecraft:custom_model_data": 0}},
                Rotation: [$(yaw)f, $(pitch)f],
                Tags: ["tf2.visual", "tf2.newest"],
                transformation: {
                left_rotation: [0f, 0f, 0f, 1f],
                right_rotation: [0f, 0f, 0f, 1f],
                translation: [0f, 0f, 0f],
                scale: [1f, 1f, $(scale)f]
                }
            };
            tf2.lifetime:@e[type=item_display,tag=tf2.visual,tag=tf2.newest] = 4;
            tag @e[type=item_display,tag=tf2.visual,tag=tf2.newest] remove tf2.newest;
            // damage @s 1 arrow;
        } with summon::line;
        summon::line.del();
    }
    function apply_damage() {
        // @within this.damage()
        if (score @s tf2.team = $current tf2.team) return 0;
        vars::kill_verb.del();
        $_distance_ = retina:output::Distance * 1000;
        $_hitHead_ = retina:output::HitEntityHead;
        if ($_distance_ > $_range_) return 0;
        $_finalDamage_ = $_damage_;
        
        this.calculate_falloff();
        $_finalDamage_ *= $_multiplier_;
        $_finalDamage_ += 99;
        $_finalDamage_ /= 100;

        if ($backstab) expand {
            vars::kill_verb = "backstabbed";
            $_finalDamage_ = tf2.max_health:@s;
            $_finalDamage_ *= 6;
        }
        // TODO: implement critical hits and resistances

        tf2.health:@s -= $_finalDamage_;
        $_totalDamage_ += $_finalDamage_;
        damage @s 0.01 tf2:screenshake by @a[tag=retina.executing, limit=1];

        // Death message & sound effects
        if (entity @s[tag=tf2.said_death_msg]) return 1;
        if (tf2.health:@s > 0) {
            return run execute as @a[tag=retina.executing,predicate=!tf2:holding_melee] 
                               at @s run playsound tf2:ding.hit player @s ~ ~ ~ 0.9 1.2 0.05;
        }
        tf2.batch_number:$local = tf2.batch_number:@s;
        execute as @a if score @s tf2.batch_number = $local tf2.batch_number run tag @s add tf2.current;
        if ($_hitHead_ && entity @a[tag=retina.executing, scores={tf2.class=2, tf2.time_scoped=4..}]) {
            vars::kill_verb = "headshot";
            
            index::num = random value 1..5;
            // stopsound @a[tag=retina.executing,predicate=!tf2:holding_melee] player tf2:item.gun.shoot;
            execute as @a[tag=retina.executing,predicate=!tf2:holding_melee]
                    at @s run this.crit_sound() with index::;
            index::num = random value 1..3;
            execute at @s run this.crit_receive_sound() with index::;
        } else if (!data storage tf2:vars kill_verb) {
            vars::kill_verb = "killed";
            execute as @a[tag=retina.executing,predicate=!tf2:holding_melee] 
                    at @s run playsound tf2:ding.kill player @s ~ ~ ~ 0.9 1 0.05;
        }
        Text.tellraw(@a[tag=tf2.current], "&<@a[tag=retina.executing]> &<kill_verb> &<@s> with &<item_of(@a[tag=retina.executing])>");
        tag @a remove tf2.current;
        tag @s add tf2.said_death_msg;
    }
    function calculate_falloff() {
        if ($_rangeDependent_) {
            $_hammerUnits_ = retina:output::Distance * EVAL (1 / 0.01905);
            $_hammerUnits_ < 1024;

            $_temp1_ = $_hammerUnits_;
            $_temp1_ *= $_hammerUnits_;
            $_temp1_ *= 3;

            $_temp2_ = $_hammerUnits_;
            $_temp2_ *= $_hammerUnits_;
            $_temp2_ *= $_hammerUnits_;
            $_temp2_ *= 2;
            if ($_temp2_ == -2147483648) $_temp2_ --;
            $_temp2_ /= 1024;

            $_multiplier_ = $_temp1_;
            $_multiplier_ -= $_temp2_;
            $_multiplier_ *= -100;
            $_multiplier_ /= 1048576;
            $_multiplier_ += 50;

            $_temp3_ = 100;
            if ($_hammerUnits_ < 512) {
                $_temp3_ = $_maxRamp_;
                $_temp3_ -= 100;
                $_temp3_ *= 2;
            }
            $_multiplier_ *= $_temp3_;
            $_multiplier_ /= 100;
            $_multiplier_ += 100;
        }
        else if (entity @a[tag=retina.executing, scores={tf2.class=2, tf2.time_scoped=4..}]) {
            Class.Sniper.damage_scale();
        }
        else {$_multiplier_ = 100;}
    }
    function slot_check() {
        tf2.current_slot:@s ??= 0;
        tf2.last_slot:@s = tf2.current_slot:@s;
        tf2.current_slot:@s = @s::SelectedItemSlot;

        if (tf2.last_slot:@s != tf2.current_slot:@s) {
            tf2.attack_delay:@s = @s::SelectedItem.components.minecraft:custom_data.attributes.deployTime * 10000;
            if (!data entity @s SelectedItem.components.minecraft:custom_data.attributes.deployTime) tf2.attack_delay:@s = 10000;
            tf2.consecutive_reload:@s = false;
            tf2.time_idle:@s = 0;
        }
    }
    function crit_sound() {
        // @needs_macro
        $ playsound tf2:crit.hit$(num) player @s ~ ~ ~ 0.85 1 0.05;
    }
    function crit_receive_sound() {
        // @needs_macro
        $ playsound tf2:crit.received$(num) player @s ~ ~ ~ 0.85 1 0.05;
    }
}

import 'projectile.jmc';