new predicates(holding_melee) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {
                "nbt": "{attributes: {isMelee: 1b}}"
            }
        }
    }
}
new predicates(holding_projectile) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {
                "nbt": "{attributes: {isProjectile: 1b}}"
            }
        }
    }
}
new predicates(non_damaging) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:entity_properties",
            "entity": "this",
            "predicate": {
                "equipment": {
                    "mainhand": {
                        "nbt": "{attributes: {damage: {base: 0}}}"
                    }
                }
            }
        },
        {
            "condition": "minecraft:reference",
            "name": "tf2:empty_hand"
        }
    ]
}
new predicates(empty_hand) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {"count": 0}
        }
    }
}
new predicates(hide_ammo) {
    "condition": "minecraft:any_of",
    "terms": [
        {
			"condition": "minecraft:entity_properties",
			"entity": "this",
			"predicate": {
				"equipment": {
					"mainhand": {
						"items": ["minecraft:carrot_on_a_stick"]
					}
				}
			}
		},
        {
            "condition": "minecraft:reference",
            "name": "tf2:holding_melee"
        },
        {
            "condition": "minecraft:reference",
            "name": "tf2:non_damaging"
        }
    ]
}
new predicates(uniform_damage) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:reference",
            "name": "tf2:holding_melee"
        },
        {
            "condition": "minecraft:entity_properties",
            "entity": "this",
            "predicate": {
                "equipment": {
                    "mainhand": {
                        "nbt": "{attributes: {damage: {uniform: true}}}"
                    }
                }
            }
        }
    ]
}
new predicates(has_main_fire) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {
                "nbt": "{controls: {main_fire: true}}"
            }
        }
    }
}
new predicates(ammo_in_clip) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:all_of",
            "terms": [
                {
                    "condition": "minecraft:entity_scores",
                    "entity": "this",
                    "scores": {"tf2.current_slot": 0}
                },
                {
                    "condition": "minecraft:entity_scores",
                    "entity": "this",
                    "scores": {"tf2.primary_clip": {"min": 1}}
                }
            ]
        },
        {
            "condition": "minecraft:all_of",
            "terms": [
                {
                    "condition": "minecraft:entity_scores",
                    "entity": "this",
                    "scores": {"tf2.current_slot": 1}
                },
                {
                    "condition": "minecraft:entity_scores",
                    "entity": "this",
                    "scores": {"tf2.secondary_clip": {"min": 1}}
                }
            ]
        }
    ]
}
new predicates(unloaded_crossbow) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {
                "items": ["minecraft:crossbow"],
                "nbt": "{Charged: 0b}"
            }
        }
    }
}
new item_modifiers(load_crossbow) {
    "function": "minecraft:set_nbt",
    "tag": "{Charged: 1b, ChargedProjectiles:[{id: \"minecraft:arrow\", Count: 1b}], Unbreakable: 1b}"
}

new tags.functions(retina.on_hit) {
    "values": [
        "tf2:weapons/on_hit"
    ],
    "replace": false
}

new tags.damage_type(minecraft.no_impact) {
    "values": [
        "tf2:screenshake"
    ],
    "replace": false
}
new damage_type(screenshake) {
    "exhaustion": 0.0,
    "message_id": "generic",
    "scaling": "never"
}

new trim_material(red) {
    "asset_name": "red",
    "description": {
        "color": "#DD3004",
        "translate": "trim_material.tf2.red"
    },
    "ingredient": "minecraft:red_banner",
    "item_model_index": 0.01
}
new trim_material(blu) {
    "asset_name": "blu",
    "description": {
        "color": "#258474",
        "translate": "trim_material.tf2.blu"
    },
    "ingredient": "minecraft:blue_banner",
    "item_model_index": 0.02
}
new tags.items(minecraft.trim_materials) {
    "values": [
        "minecraft:red_banner",
        "minecraft:blue_banner"
    ]
}
new item_modifiers(apply_team_material) [
    {
        "function": "minecraft:set_nbt",
        "tag": "{Trim: {material: \"tf2:red\"}}",
        "conditions": [
            {
                "condition": "minecraft:entity_scores",
                "entity": "this",
                "scores": {
                    "tf2.team": 1
                }
            }
        ]
    },
    {
        "function": "minecraft:set_nbt",
        "tag": "{Trim: {material: \"tf2:blu\"}}",
        "conditions": [
            {
                "condition": "minecraft:entity_scores",
                "entity": "this",
                "scores": {
                    "tf2.team": 2
                }
            }
        ]
    }
];

class Weapons {
    function main_fire() {
        if (tf2.attack_delay:@s > 0) return 0;
        if (tf2.class:@s == 6 && tf2.current_slot:@s == 0 && tf2.time_revved:@s < tf2.rev_threshold:@s) return 0;

        switch (tf2.class:@s) {
            case Class.SPY: break; //Class.Spy.inventory_lock();
            case Class.SNIPER: Class.Sniper.inventory_lock();
            case Class.SCOUT: Class.Scout.inventory_lock();
            case Class.SOLDIER: Class.Soldier.inventory_lock();
            // case Class.DEMOMAN: Class.Demoman.inventory_lock();
            case Class.HEAVY: Class.Heavy.inventory_lock();
            // case Class.PYRO: Class.Pyro.inventory_lock();
            // case Class.ENGINEER: Class.Engineer.inventory_lock();
            // case Class.MEDIC: Class.Medic.inventory_lock();
        }

        if (!predicate tf2:has_main_fire) return 0;
        this.get_ammo();
        if ($_clip_ <= 0 && !predicate tf2:holding_melee) return 0;

        if (!predicate tf2:holding_melee) {
            playsound tf2:item.gun.shoot player @s ~ ~ ~ 1.35 1 0.1;
        }

        tf2.team:$current = tf2.team:@s;
        data modify storage retina:input {} merge from entity @s SelectedItem.tag.retina;
        $_damage_  = data get entity @s SelectedItem.tag.attributes.damage.base;
        $_range_   = data get entity @s SelectedItem.tag.attributes.range 1000;
        $_maxRamp_ = data get entity @s SelectedItem.tag.attributes.damage.maxRamp 100;
        if (!data entity @s SelectedItem.tag.attributes.range) $_range_ = 2147483647;
        if (!data entity @s SelectedItem.tag.attributes.damage.maxRamp) $_maxRamp_ = 150;
        $_rangeDependent_ = execute unless predicate tf2:uniform_damage;
        // retina._variable_:$end_particle = true;

        retina.__variable__:$func_id = 100;
        $_totalDamage_ = 0;
        if (predicate tf2:holding_projectile) {
            this.projectile();
        }
        if (!predicate tf2:holding_projectile) {
            this.hitscan();
        }
        // retina._variable_:$end_particle = false;
        $_delay_ = data get entity @s SelectedItem.tag.attributes.attackDelay 20000;
        tf2.attack_delay:@s += $_delay_;
        scoreboard players reset $func_id retina.__variable__;

        data modify storage tf2.__temp__:summon number.X set from storage retina:output ContactCoordinates[0];
        data modify storage tf2.__temp__:summon number.Y set from storage retina:output ContactCoordinates[1];
        data modify storage tf2.__temp__:summon number.Z set from storage retina:output ContactCoordinates[2];
        execute store result storage tf2.__temp__:summon number.value int 1 run $_totalDamage_.get();
        if ($_totalDamage_ >= 1) {
            Weapons.damage_numbers() with storage tf2.__temp__:summon number;
        }

        // Melee sound effects
        if (predicate tf2:holding_melee) return run {
            execute at @s anchored eyes run particle minecraft:sweep_attack ^ ^ ^1;
            if (!data storage retina:output {Target: "ENTITY"}) {
                return run playsound tf2:item.melee.miss player @s ~ ~ ~ 0.35 0.35 0.1;
            }
            playsound tf2:item.melee.hit player @s ~ ~ ~ 1.5 0.9 0.1;
        }

        $_clip_ --;
        this.set_ammo();
        tf2.consecutive_reload:@s = false;
    }
    function hitscan() {
        $_weaponID_ = data get entity @s SelectedItem.tag.CustomModelData 0.001;
        if ($_weaponID_ != 61) {
            return run function retina:traverse/multicast;
        }
        // Heavy minigun {CMD: 61xxx} does 4 at once
        data merge storage retina:input {HorizontalCount: 1, VerticalCount: 1, CenteredCount: 0};
        function retina:traverse/multicast;
        function retina:traverse/multicast;
        function retina:traverse/multicast;
        function retina:traverse/multicast;
    }
    function projectile() {
        // testing code
        tf2.team:$temp = tf2.team:@s;
        tf2.batch_number:$local = tf2.batch_number:@s;
        retina.__variable__:$input_pitch = data get entity @s Rotation[1] 10;
        retina.__variable__:$input_yaw = data get entity @s Rotation[0] 10;
        function retina:math/gimbal_to_vec;
        data modify storage tf2.__temp__:summon projectile set value {X: 0.0, Y: 0.0, Z: 0.0, yaw: 0.0, pitch: 0.0, spawnX: 0.0, spawnY: 0.0, spawnZ: 0.0};
        execute store result storage tf2.__temp__:summon projectile.speed double 0.01905 run data get entity @s SelectedItem.tag.projectile.speed;
        execute store result storage tf2.__temp__:summon projectile.speed double 0.05 run data get storage tf2.__temp__:summon projectile.speed;
        execute store result storage tf2.__temp__:summon projectile.speed double 0.000001 run data get storage tf2.__temp__:summon projectile.speed 1000;
        execute run {
            $execute store result storage tf2.__temp__:summon projectile.X double $(speed) run retina.__variable__:$output_vec3.X.get();
            $execute store result storage tf2.__temp__:summon projectile.Y double $(speed) run retina.__variable__:$output_vec3.Y.get();
            $execute store result storage tf2.__temp__:summon projectile.Z double $(speed) run retina.__variable__:$output_vec3.Z.get();
        } with storage tf2.__temp__:summon projectile;
        execute store result storage tf2.__temp__:summon projectile.yaw double 0.1 run retina.__variable__:$input_yaw.get();
        execute store result storage tf2.__temp__:summon projectile.pitch double 0.1 run retina.__variable__:$input_pitch.get();
        data modify storage tf2.__temp__:summon projectile.spawnX set from entity @s SelectedItem.tag.projectile.spawn[0];
        data modify storage tf2.__temp__:summon projectile.spawnY set from entity @s SelectedItem.tag.projectile.spawn[1];
        data modify storage tf2.__temp__:summon projectile.spawnZ set from entity @s SelectedItem.tag.projectile.spawn[2];
        data modify storage tf2.__temp__:summon projectile.owner set from entity @s UUID;
        execute at @s anchored eyes run {
            $summon arrow ^$(spawnX) ^$(spawnY) ^$(spawnZ) {
                Owner: $(owner),
                damage: 0.0,
                pickup: false,
                NoGravity: true,
                Silent: true,
                Invulnerable: true,
                PersistenceRequired: true,
                ShotFromCrossbow: true,
                PierceLevel: 127b,
                Tags: ["tf2.projectile", "tf2.new", "tf2.explosive"],
                Motion: [$(X)d, $(Y)d, $(Z)d],
                active_effects: [{
                    id: "minecraft:invisibility",
                    amplifier: false,
                    show_particles: false,
                    duration: -1
                }],
                Passengers: [{
                    Rotation: [$(yaw)f, $(pitch)f],
                    id: "minecraft:item_display",
                    item: {id: "minecraft:glowstone_dust", Count: true, tag:{CustomModelData:41000, Motion:[$(X)d, $(Y)d, $(Z)d]}},
                    Tags: ["tf2.new", "tf2.projectile"]
                }]
            };
        } with storage tf2.__temp__:summon projectile;
        execute as @e[type=item_display,tag=tf2.new,tag=tf2.projectile,limit=1,sort=nearest] run {
            data modify entity @s Rotation[0] set from storage tf2.__temp__:summon projectile.yaw;
            data modify entity @s Rotation[1] set from storage tf2.__temp__:summon projectile.pitch;
            tag @s remove tf2.new;
        }
        execute as @e[type=arrow,tag=tf2.new,tag=tf2.projectile,limit=1,sort=nearest] run {
            team join delta.no_collide;
            tf2.age:@s = 0;
            tf2.team:@s = tf2.team:$temp;
            tf2.batch_number:@s = tf2.batch_number:$local;
            execute on origin run tag @s add tf2.origin;
            execute on passengers run data modify entity @s item.tag.attributes 
                 set from entity @a[tag=tf2.origin,limit=1] SelectedItem.tag.attributes;
            execute on passengers run data modify entity @s item.tag.projectile 
                 set from entity @a[tag=tf2.origin,limit=1] SelectedItem.tag.projectile;
            execute on origin run tag @s remove tf2.origin;
            tag @s remove tf2.new;
        }
    }
    function get_ammo() {
        if (tf2.current_slot:@s == 0) return run {
            $_clip_    = tf2.primary_clip:@s;
            $_maxClip_ = tf2.primary_maxClip:@s;
            $_ammo_    = tf2.primary_ammo:@s;
        }
        if (tf2.current_slot:@s == 1) {
            $_clip_    = tf2.secondary_clip:@s;
            $_maxClip_ = tf2.secondary_maxClip:@s;
            $_ammo_    = tf2.secondary_ammo:@s;
        }
    }
    function set_ammo() {
        if (tf2.current_slot:@s == 0) return run {
            tf2.primary_clip:@s      = $_clip_;
            tf2.primary_maxClip:@s   = $_maxClip_;
            tf2.primary_ammo:@s      = $_ammo_;
        }
        if (tf2.current_slot:@s == 1) {
            tf2.secondary_clip:@s    = $_clip_;
            tf2.secondary_maxClip:@s = $_maxClip_;
            tf2.secondary_ammo:@s    = $_ammo_;
        }
    }
    function reload() {
        switch (tf2.class:@s) {
            case Class.SPY: break; //Class.Spy.inventory_lock();
            case Class.SNIPER: Class.Sniper.inventory_lock();
            case Class.SCOUT: Class.Scout.inventory_lock();
            case Class.SOLDIER: Class.Soldier.inventory_lock();
            // case Class.DEMOMAN: Class.Demoman.inventory_lock();
            case Class.HEAVY: Class.Heavy.inventory_lock();
            // case Class.PYRO: Class.Pyro.inventory_lock();
            // case Class.ENGINEER: Class.Engineer.inventory_lock();
            // case Class.MEDIC: Class.Medic.inventory_lock();
        }
        if (predicate tf2:hide_ammo) return 0;
        if (tf2.reload_delay:@s > 0) return 0;
        this.get_ammo();
        if ($_clip_ >= $_maxClip_) return 0;
        if ($_ammo_ == 0) return 0;

        $_reloadType_ = data get entity @s SelectedItem.tag.controls.reload;
        switch ($_reloadType_) {
            case Reload.NONE:
                break;
            case Reload.SINGLE:
                $_clip_ ++;
                $_ammo_ --;
            case Reload.LOSSY:
                $_ammoCost_ = $_maxClip_;
                $_ammoCost_ < $_ammo_;
                $_clip_ = $_ammoCost_;
                $_ammo_ -= $_ammoCost_;
            case Reload.LOSSLESS:
                $_ammoCost_ = $_maxClip_;
                $_ammoCost_ -= $_clip_;
                $_ammoCost_ < $_ammo_;
                $_clip_ += $_ammoCost_;
                $_ammo_ -= $_ammoCost_;
        }
        this.set_ammo();

        if (tf2.consecutive_reload:@s == 0) $_reloadDelay_ = data get entity @s SelectedItem.tag.attributes.reloadDelay[0] 20000;
        if (tf2.consecutive_reload:@s == 1) $_reloadDelay_ = data get entity @s SelectedItem.tag.attributes.reloadDelay[1] 20000;
        tf2.reload_delay:@s += $_reloadDelay_;
        tf2.consecutive_reload:@s = true;

        if (tf2.attack_delay:@s <= 0) {
            // Prevents it from seeing "unloaded crossbow" the next tick and assuming the fire button was hit
            item modify entity @s weapon.mainhand tf2:load_crossbow;
        }
    }
    function actionbar() {
        if (predicate tf2:hide_ammo) {
            return run Text.actionbar(@s, "&<red>❤ Health: &<tf2.health:@s> / &<tf2.max_health:@s>");
        }
        Text.actionbar(@s, "&<red>❤ Health: &<tf2.health:@s> / &<tf2.max_health:@s>             &<gray>Ammo: &<$_clip_> &<dark_gray>(&<$_ammo_>)");
    }
    function on_hit() {
        if (retina.__variable__:$func_id !== 100) return 0;

        execute unless predicate tf2:hide_ammo at @s run Weapons.draw_line();
        execute as @e[type=#tf2:player_like, scores={retina.hit=1..}, tag=!tf2.dead] run this.apply_damage();
    }
    function draw_line() {
        // @within this.damage()
        execute summon minecraft:marker run {
            if (retina.__variable__:$offset_Y matches 776..778) {tp @s ~ ~1.42 ~;}
            if (retina.__variable__:$offset_Y matches 608..610) {tp @s ~ ~1.07 ~;}
            if (retina.__variable__:$offset_Y === 192)          {tp @s ~ ~0.20 ~;}
            tag @s add tf2.height;
            data modify storage tf2.__temp__:summon line.X set from entity @s Pos[0];
            data modify storage tf2.__temp__:summon line.Y set from entity @s Pos[1];
            data modify storage tf2.__temp__:summon line.Z set from entity @s Pos[2];
            kill @s;
        }
        // rotate according to player vector
        $input_vec3.X = retina.__variable__:$output_vec3.X;
        $input_vec3.Y = retina.__variable__:$output_vec3.Y;
        $input_vec3.Z = retina.__variable__:$output_vec3.Z;
        Math.vec_to_gimbal();
        execute store result storage tf2.__temp__:summon line.yaw float 0.1 run $output_yaw.get();
        execute store result storage tf2.__temp__:summon line.pitch float 0.1 run $output_pitch.get();

        $scale_length = data get storage retina:output Distance 2000;
        //$scale_length -= 400;
        execute store result storage tf2.__temp__:summon line.scale float 0.001 run $scale_length.get();

        execute run {
            $execute positioned $(X) $(Y) $(Z) run summon item_display ^ ^ ^0.15 {
                item: {id: "glowstone_dust", Count: 1b, tag: {CustomModelData: 0}},
                Rotation: [$(yaw)f, $(pitch)f],
                Tags: ["tf2.visual", "tf2.newest"],
                transformation: {
                left_rotation: [0f, 0f, 0f, 1f],
                right_rotation: [0f, 0f, 0f, 1f],
                translation: [0f, 0f, 0f],
                scale: [1f, 1f, $(scale)f]
                }
            };
            tf2.lifetime:@e[type=item_display,tag=tf2.visual,tag=tf2.newest] = 4;
            tag @e[type=item_display,tag=tf2.visual,tag=tf2.newest] remove tf2.newest;
            // damage @s 1 arrow;
        } with storage tf2.__temp__:summon line;
        data remove storage tf2.__temp__:summon line;
    }
    function apply_damage() {
        // @within this.damage()
        if (score @s tf2.team = $current tf2.team) return 0;
        if (entity @s[gamemode=spectator]) return 0;
        $_distance_ = data get storage retina:output Distance 1000;
        $_hitHead_ = data get storage retina:output HitEntityHead;
        if ($_distance_ > $_range_) return 0;
        $_finalDamage_ = $_damage_;
        
        this.calculate_falloff();
        $_finalDamage_ *= $_multiplier_;
        $_finalDamage_ += 99;
        $_finalDamage_ /= 100;
        tf2.health:@s -= $_finalDamage_;
        $_totalDamage_ += $_finalDamage_;
        damage @s 0.01 tf2:screenshake by @a[tag=retina.executing, limit=1];

        // Death message & sound effects
        if (entity @s[tag=tf2.said_death_msg]) return 1;
        if (tf2.health:@s > 0) {
            return run playsound tf2:ding.hit player @a[tag=retina.executing,predicate=!tf2:holding_melee] ~ ~ ~ 0.9 1 0.05;
        }
        tf2.batch_number:$local = tf2.batch_number:@s;
        execute as @a if score @s tf2.batch_number = $local tf2.batch_number run tag @s add tf2.current;
        if ($_hitHead_ && entity @a[tag=retina.executing, scores={tf2.class=2, tf2.time_scoped=4..}]) {
            Text.tellraw(@a[tag=tf2.current], "&<@a[tag=retina.executing]> headshot &<@s> with &<item_of(@a[tag=retina.executing])>");
            execute store result storage tf2.__temp__:index num int 1 run random value 1..5;
            // stopsound @a[tag=retina.executing,predicate=!tf2:holding_melee] player tf2:item.gun.shoot;
            execute as @a[tag=retina.executing,predicate=!tf2:holding_melee] at @s
                    run this.crit_sound() with storage tf2.__temp__:index;
            execute store result storage tf2.__temp__:index num int 1 run random value 1..3;
            execute at @s run this.crit_receive_sound() with storage tf2.__temp__:index;
        } else {
            Text.tellraw(@a[tag=tf2.current], "&<@a[tag=retina.executing]> killed &<@s> with &<item_of(@a[tag=retina.executing])>");
            playsound tf2:ding.kill player @a[tag=retina.executing,predicate=!tf2:holding_melee] ~ ~ ~ 0.9 1 0.05;
        }
        tag @a remove tf2.current;
        tag @s add tf2.said_death_msg;
    }
    function calculate_falloff() {
        if ($_rangeDependent_) {
            $_hammerUnits_ = data get storage retina:output Distance 52.49343832021;
            $_hammerUnits_ < 1024;

            $_temp1_ = $_hammerUnits_;
            $_temp1_ *= $_hammerUnits_;
            $_temp1_ *= 3;

            $_temp2_ = $_hammerUnits_;
            $_temp2_ *= $_hammerUnits_;
            $_temp2_ *= $_hammerUnits_;
            $_temp2_ *= 2;
            if ($_temp2_ == -2147483648) $_temp2_ --;
            $_temp2_ /= 1024;

            $_multiplier_ = $_temp1_;
            $_multiplier_ -= $_temp2_;
            $_multiplier_ *= -100;
            $_multiplier_ /= 1048576;
            $_multiplier_ += 50;

            $_temp3_ = 100;
            if ($_hammerUnits_ < 512) {
                $_temp3_ = $_maxRamp_;
                $_temp3_ -= 100;
                $_temp3_ *= 2;
            }
            $_multiplier_ *= $_temp3_;
            $_multiplier_ /= 100;
            $_multiplier_ += 100;
        }
        else if (entity @a[tag=retina.executing, scores={tf2.class=2, tf2.time_scoped=4..}]) {
            Class.Sniper.damage_scale();
        }
        else {$_multiplier_ = 100;}
    }
    function damage_numbers() {
        // @within this.main_fire();
        $execute positioned 0 0.4 0 run summon text_display ~$(X) ~$(Y) ~$(Z) {
            billboard: "center",
            text: '{"color":"red", "bold":true, "text":"-$(value)"}',
            Tags: ["tf2.visual", "tf2.newest"],
            transformation: {
            left_rotation: [0f, 0f, 0f, 1f],
            right_rotation: [0f, 0f, 0f, 1f],
            translation: [0f, 0f, 0f],
            scale: [2f, 2f, 2f]
            }
        };
        tf2.lifetime:@e[type=text_display,tag=tf2.visual,tag=tf2.newest] = 12;
        tag @e[type=text_display,tag=tf2.visual,tag=tf2.newest] remove tf2.newest;
        data remove storage tf2.__temp__:summon number;
    }
    function slot_check() {
        tf2.current_slot:@s ??= 0;
        tf2.last_slot:@s = tf2.current_slot:@s;
        tf2.current_slot:@s = data get entity @s SelectedItemSlot;

        if (tf2.last_slot:@s != tf2.current_slot:@s) {
            tf2.attack_delay:@s = data get entity @s SelectedItem.tag.attributes.deployTime 10000;
            if (!data entity @s SelectedItem.tag.attributes.deployTime) tf2.attack_delay:@s = 10000;
            tf2.consecutive_reload:@s = false;
        }
    }
    function crit_sound() {
        // @needs_macro
        $ playsound tf2:crit.hit$(num) player @s ~ ~ ~ 0.85 1 0.05;
    }
    function crit_receive_sound() {
        // @needs_macro
        $ playsound tf2:crit.received$(num) player @s ~ ~ ~ 0.85 1 0.05;
    }
}

class Projectile {
    function tick() {
        execute on passengers run tag @s add tf2.passenger_temp;
        data modify entity @s Motion set from entity @e[type=item_display,tag=tf2.passenger_temp,limit=1] item.tag.Motion;
        tag @e[type=item_display,tag=tf2.passenger_temp] remove tf2.passenger_temp;

        this.check_collision();
        execute as @e[type=#tf2:player_like,tag=tf2.search] run this.remove_tags();
        if (entity @s[tag=tf2.cleanup]) return run {
            this.cleanup();
        }
        tf2.age:@s++;
    }
    function check_collision() {
        tf2.batch_number:$local = tf2.batch_number:@s;
        execute as @e[type=#tf2:player_like]
                if score @s tf2.batch_number
                   = $local tf2.batch_number
                unless entity @s[gamemode=spectator]
                run tag @s add tf2.search;

        // Passes through teammates during first 0.25 seconds
        tf2.team:$temp = tf2.team:@s;
        execute as @e[type=#tf2:player_like,tag=tf2.search]
                unless score @s tf2.team = $temp tf2.team
                run tag @s add tf2.opponent;
        if (tf2.age:@s < 5) {
            tag @e[type=#tf2:player_like,tag=tf2.search,tag=!tf2.opponent] remove tf2.search;
        }

        $collided = false;
        if (data entity @s {inGround: 1b}) {$collided++;}
        data modify storage tf2.__temp__:vars motion set from entity @s Motion;
        execute at @s summon marker run {
            $proj_X = data get entity @s Pos[0] 1000;
            $proj_Y = data get entity @s Pos[1] 1000;
            $proj_Z = data get entity @s Pos[2] 1000;
            data modify entity @s Pos 
                 set from storage tf2.__temp__:vars motion;
            execute positioned 0.0 0 0.0 
                    facing entity @s feet 
                    run tp @s 0 -10000 0 ~ ~;
            execute rotated as @s
                    positioned ^ ^ ^0.5
                    align xyz
                    summon marker run {
                        $next_proj_X = data get entity @s Pos[0] 1000;
                        $next_proj_Y = data get entity @s Pos[1] 1000;
                        $next_proj_Z = data get entity @s Pos[2] 1000;
                        tag @e[type=#tf2:player_like,tag=tf2.search,
                               dx=0,dy=0,dz=0,sort=nearest,limit=1] add tf2.in_voxel;
                        kill;
                    }
            kill;
        }
        execute as @e[type=#tf2:player_like,tag=tf2.in_voxel] at @s run {
            execute summon marker run {
                // marker NBT is faster than player NBT
                $next_diff_X = $diff_X = data get entity @s Pos[0] 1000; 
                $diff_X -= $proj_X;
                $next_diff_X -= $next_proj_X;
                $next_diff_Y = $diff_Y = data get entity @s Pos[1] 1000; 
                $diff_Y -= $proj_Y;
                $next_diff_Y -= $next_proj_Y;
                $next_diff_Z = $diff_Z = data get entity @s Pos[2] 1000; 
                $diff_Z -= $proj_Z;
                $next_diff_Z -= $next_proj_Z;
                kill;
            }
            if ($diff_X matches -550..550 
             && $diff_Y matches -2050..250 
             && $diff_Z matches -550..550) {
                tag @s add tf2.hit;
            }
            if ($next_diff_X matches -550..550
             && $next_diff_Y matches -2050..250
             && $next_diff_Z matches -550..550) {
                tag @s add tf2.hit;
            }
        }
        tag @e[type=#tf2:player_like,tag=tf2.hit,sort=nearest,limit=1] add tf2.closest_hit;
        // execute as @e[type=#tf2:player_like,tag=tf2.closest_hit] run say "hit";
        if (entity @e[type=#tf2:player_like,tag=tf2.closest_hit]) {$collided += 2;}
        // print($collided);
        if (!$collided) return 0;
        execute on passengers run {
            $_damage_ = data get entity @s item.tag.attributes.damage.base;
            $_selfDamage_ = data get entity @s item.tag.projectile.explosion.selfDamage;
            $_maxRamp_ = data get entity @s item.tag.attributes.damage.maxRamp 100;
            if (!data entity @s item.tag.attributes.damage.maxRamp) $_maxRamp_ = 150;
            $_rangeDependent_ = data get entity @s item.tag.attributes.damage.uniform;
            $_rangeDependent_ ?= execute if score $_rangeDependent_ tf2.var matches 0;
        }
        // print(tf2.damage:@s);
        tag @s add tf2.cleanup;

        if (entity @s[tag=!tf2.explosive]) return run {
            execute as @e[type=#tf2:player_like,tag=tf2.closest_hit] run this.simple_damage();
        }

        execute on passengers 
                store result storage tf2.__temp__:vars radius double 0.01905 
                run data get entity @s item.tag.projectile.explosion.radius;
        this.explode() with storage tf2.__temp__:vars;
    }
    function simple_damage() {
        if (entity @s[tag=!tf2.opponent]) return 0;
        // say "damaged";
        tf2.health:@s -= $_damage_;
        damage @s 0.01 tf2:screenshake;
    }
    function explode() {
        particle minecraft:explosion ~ ~ ~;
        $playersHurt = $_totalDamage_ = 0;
        execute on origin run tag @s add tf2.origin;
        execute on origin run tag @s add tf2.opponent;
        tag @s add tf2.projectile;
        $execute at @s as @e[type=#tf2:player_like,tag=tf2.opponent,distance=..$(radius)] run this.wall_check();
        tag @s remove tf2.projectile;
        execute on origin run tag @s remove tf2.origin;
    }
    function wall_check() {
        tag @s add tf2.player;
        execute summon marker at @s run {
            data modify entity @s NoAI set value 1b;
            data modify storage retina:input MaxRecursionDepth set value 127b;
            tp @s ~ ~ ~ facing entity @e[tag=tf2.player,limit=1] eyes;
            function retina:traverse/setup;
            kill @s;
        }
        tag @s remove tf2.player;
        if (data storage retina:output {Target: "ENTITY"} && Object.isEqual("retina:output", "TargetedEntity.UUID", "@e[type=#tf2:player_like,tag=tf2.check,limit=1]", "UUID")) {
            this.splash_damage();
        }
        data modify storage tf2.__temp__:summon number.X set from storage retina:output ContactCoordinates[0];
        data modify storage tf2.__temp__:summon number.Y set from storage retina:output ContactCoordinates[1];
        data modify storage tf2.__temp__:summon number.Z set from storage retina:output ContactCoordinates[2];
        execute store result storage tf2.__temp__:summon number.value int 1 run $_totalDamage_.get();
        if ($_totalDamage_ >= 1) {
            Weapons.damage_numbers() with storage tf2.__temp__:summon number;
        }
    }
    function splash_damage() {
        this.calculate_splash();
        tf2.health:@s -= $_finalDamage_;
        $_totalDamage_ = $_finalDamage_;
        $playersHurt++;
        damage @s 0.01 tf2:screenshake by @a[tag=tf2.origin, limit=1];
        this.knockback();

        // Death message & sound effects
        if (entity @s[tag=tf2.said_death_msg]) return 1;
        if (tf2.health:@s > 0) {
            return run playsound tf2:ding.hit player @a[tag=tf2.origin] ~ ~ ~ 0.9 1 0.05;
        }
        tf2.batch_number:$local = tf2.batch_number:@s;
        execute as @a if score @s tf2.batch_number = $local tf2.batch_number run tag @s add tf2.current;
        Text.tellraw(@a[tag=tf2.current], "&<@a[tag=tf2.origin]> blew up &<@s> with &<item_of(@a[tag=tf2.origin])>");
        playsound tf2:ding.kill player @a[tag=tf2.origin] ~ ~ ~ 0.9 1 0.05;
        tag @a remove tf2.current;
        tag @s add tf2.said_death_msg;
    }
    function calculate_splash() {
        $_centerDist_ = data get storage retina:output Distance 52.49343832021;
        $_splashEdge_ = data get storage tf2.__temp__:vars radius 52.49343832021;
        execute as @e[tag=tf2.origin] at @s summon marker run {
            $X0 = data get entity @s Pos[0] 100;
            $Y0 = data get entity @s Pos[1] 100;
            $Z0 = data get entity @s Pos[2] 100;
            kill;
        }
        execute at @s summon marker run {
            $Xf = data get entity @s Pos[0] 100;
            $Yf = data get entity @s Pos[1] 100;
            $Zf = data get entity @s Pos[2] 100;
            kill;
        }
        $deltaX = $Xf; $deltaX -= $X0; 
        $deltaY = $Yf; $deltaY -= $Y0; 
        $deltaZ = $Zf; $deltaZ -= $Z0; 
        data modify storage tf2.__temp__:summon matrix set value [
            0f, 0f, 0f, 0f,
            0f, 0f, 0f, 0f,
            0f, 0f, 0f, 0f,
            0f, 0f, 0f, 1f
        ];
        execute store result storage tf2.__temp__:summon matrix[0] float 1 run $deltaX.get();
        execute store result storage tf2.__temp__:summon matrix[4] float 1 run $deltaY.get();
        execute store result storage tf2.__temp__:summon matrix[8] float 1 run $deltaZ.get();
        execute summon item_display run {
            data modify entity @s transformation set value [0f];
            data modify entity @s transformation set from storage tf2.__temp__:summon matrix;
            data modify storage retina:output Distance set from entity @s transformation.scale[0];
            kill;
        } with storage tf2.__temp__:summon matrix;
        $_finalDamage_ = $_damage_;
        Weapons.calculate_falloff();
        $_finalDamage_ *= $_multiplier_;
        // printf("mult = &<$_multiplier_>");
        $_finalDamage_ += 99;
        $_finalDamage_ /= 100;
        
        if (entity @s[tag=tf2.closest_hit,tag=!tf2.origin] && $collided >= 2) {
            return run $_finalDamage_.get();
        }

        if (entity @s[tag=tf2.origin]) {
            $_finalDamage_ = $_selfDamage_;
        }
        $_splash_multiplier_ = $_centerDist_;
        $_splash_multiplier_ *= 50;
        $_splash_multiplier_ /= $_splashEdge_;
        $_splash_multiplier_ *= -1;
        $_splash_multiplier_ += 100;
        // printf("splash = &<$_splash_multiplier_>");
        $_finalDamage_ *= $_splash_multiplier_;
        $_finalDamage_ += 99;
        $_finalDamage_ /= 100;
        if (!entity @s[tag=tf2.origin,scores={tf2.class=4..5}]) {
            return run $_finalDamage_.get();
        }

        // Less damage from your own explosives if nobody else is hurt
        // Soldier: 3/5 as much, Demo: 3/4 as much
        if ($playersHurt > 1) {
            return run $_finalDamage_.get();
        }
        $_finalDamage_ *= 3;
        $_temp_ = 9;
        $_temp_ -= tf2.class:@s;
        $_finalDamage_ /= $_temp_;
        return run $_finalDamage_.get();
    }
    function knockback() {
        delta.api.launch:$x = retina.__variable__:$output_vec3.X;
        delta.api.launch:$x *= 12000;
        delta.api.launch:$x /= 480;
        delta.api.launch:$y = retina.__variable__:$output_vec3.Y;
        delta.api.launch:$y *= 12000;
        delta.api.launch:$y /= 480;
        delta.api.launch:$z = retina.__variable__:$output_vec3.Z;
        delta.api.launch:$z *= 12000;
        delta.api.launch:$z /= 480;
        function delta:api/launch_xyz;
    }
    function remove_tags() {
        tag @s remove tf2.search;
        tag @s remove tf2.opponent;
        tag @s remove tf2.in_voxel;
        tag @s remove tf2.hit;
        tag @s remove tf2.closest_hit;
    }
    function cleanup() {
        execute on passengers run kill @s;
        kill @s;
    }
}