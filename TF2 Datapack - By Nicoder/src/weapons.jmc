new predicates(holding_melee) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {
                "nbt": "{attributes: {isMelee: 1b}}"
            }
        }
    }
}
new predicates(non_damaging) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:entity_properties",
            "entity": "this",
            "predicate": {
                "equipment": {
                    "mainhand": {
                        "nbt": "{attributes: {damage: {base: 0}}}"
                    }
                }
            }
        },
        {
            "condition": "minecraft:reference",
            "name": "tf2:empty_hand"
        }
    ]
}
new predicates(empty_hand) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {  
        "equipment": {
            "mainhand": {
                "count": 0
            }
        }
    }
}
new predicates(hide_ammo) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:reference",
            "name": "tf2:holding_melee"
        },
        {
            "condition": "minecraft:reference",
            "name": "tf2:non_damaging"
        }
    ]
}
new predicates(has_main_fire) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {
                "nbt": "{controls: {main_fire: true}}"
            }
        }
    }
}

new tags.functions(retina.on_hit) {
    "values": [
        "tf2:weapons/damage"
    ],
    "replace": false
}

class Weapons {
    function main_fire() {
        switch ($class) {
            case Class.SPY: break; //Class.Spy.inventory_lock();
            case Class.SNIPER: break; //Class.Sniper.inventory_lock();
            case Class.SCOUT: Class.Scout.inventory_lock();
            // case Class.SOLDIER: Class.Soldier.inventory_lock();
            // case Class.DEMOMAN: Class.Demoman.inventory_lock();
            // case Class.HEAVY: Class.Heavy.inventory_lock();
            // case Class.PYRO: Class.Pyro.inventory_lock();
            // case Class.ENGINEER: Class.Engineer.inventory_lock();
            // case Class.MEDIC: Class.Medic.inventory_lock();
        }

        if (!predicate tf2:has_main_fire) return 0;
        if (tf2.attack_delay:@s > 0) return 0;
        Weapons.get_ammo();
        if ($_clip_ <= 0 && !predicate tf2:holding_melee) return 0;

        tf2.team:$current = tf2.team:@s;
        data modify storage retina:input {} merge from entity @s SelectedItem.tag.retina;
        $_damage_ = data get entity @s SelectedItem.tag.attributes.damage.base;
        $_range_ = data get entity @s SelectedItem.tag.attributes.range 1000;
        if (!data entity @s SelectedItem.tag.attributes.range) $_range_ = 2147483647;
        $_maxRamp_ = data get entity @s SelectedItem.tag.attributes.damage.maxRamp 100;
        if (!data entity @s SelectedItem.tag.attributes.maxRamp) $_maxRamp_ = 150;
        $_noRamp_ = execute if predicate tf2:holding_melee;
        // retina._variable_:$end_particle = true;

        retina.__variable__:$func_id = 100;
        function retina:traverse/multicast;
        // retina._variable_:$end_particle = false;
        $_delay_ = data get entity @s SelectedItem.tag.attributes.attackDelay 20000;
        tf2.attack_delay:@s += $_delay_;
        scoreboard players reset $func_id retina.__variable__;

        // TODO: use `return run` when 1.20.2 releases
        if (predicate tf2:holding_melee) {
            if (score $offset_Y retina.__variable__ matches 776..778) execute at @s anchored eyes run particle minecraft:sweep_attack ^ ^ ^1;
            if (score $offset_Y retina.__variable__ matches 608..610) execute at @s anchored eyes run particle minecraft:sweep_attack ^ ^ ^1;
            if (score $offset_Y retina.__variable__ matches 192) execute at @s anchored eyes run particle minecraft:sweep_attack ^ ^ ^1;
        }
        else {
            $_clip_ --;
            Weapons.set_ammo();
            tf2.consecutive_reload:@s = false;
        }
    }
    function get_ammo() {
        if (tf2.current_slot:@s == 0) {
            $_clip_ = tf2.primary_clip:@s;
            $_maxClip_ = tf2.primary_maxClip:@s;
            $_ammo_ = tf2.primary_ammo:@s;
        }
        if (tf2.current_slot:@s == 1) {
            $_clip_ = tf2.secondary_clip:@s;
            $_maxClip_ = tf2.secondary_maxClip:@s;
            $_ammo_ = tf2.secondary_ammo:@s;
        }
    }
    function set_ammo() {
        if (tf2.current_slot:@s == 0) {
            tf2.primary_clip:@s = $_clip_;   
            tf2.primary_maxClip:@s = $_maxClip_;
            tf2.primary_ammo:@s = $_ammo_;  
        }
        if (tf2.current_slot:@s == 1) {
            tf2.secondary_clip:@s = $_clip_;
            tf2.secondary_maxClip:@s = $_maxClip_;
            tf2.secondary_ammo:@s = $_ammo_;
        }
    }
    function reload() {
        switch ($class) {
            case Class.SPY: break; //Class.Spy.inventory_lock();
            case Class.SNIPER: break; //Class.Sniper.inventory_lock();
            case Class.SCOUT: Class.Scout.inventory_lock();
            // case Class.SOLDIER: Class.Soldier.inventory_lock();
            // case Class.DEMOMAN: Class.Demoman.inventory_lock();
            // case Class.HEAVY: Class.Heavy.inventory_lock();
            // case Class.PYRO: Class.Pyro.inventory_lock();
            // case Class.ENGINEER: Class.Engineer.inventory_lock();
            // case Class.MEDIC: Class.Medic.inventory_lock();
        }
        if (predicate tf2:hide_ammo) return 0;
        if (tf2.reload_delay:@s > 0) return 0;
        Weapons.get_ammo();
        if ($_clip_ >= $_maxClip_) return 0;
        if ($_ammo_ == 0) return 0;

        $_reloadType_ = data get entity @s SelectedItem.tag.controls.reload;
        switch ($_reloadType_) {
            case Reload.NONE: 
                break;
            case Reload.SINGLE:
                $_clip_ ++;
                $_ammo_ --;
            case Reload.LOSSY:
                $_ammoCost_ = $_maxClip_;
                $_ammoCost_ < $_ammo_;
                $_clip_ = $_ammoCost_;
                $_ammo_ -= $_ammoCost_;
            case Reload.LOSSLESS:
                $_ammoCost_ = $_maxClip_;
                $_ammoCost_ -= $_clip_;
                $_ammoCost_ < $_ammo_;
                $_clip_ += $_ammoCost_;
                $_ammo_ -= $_ammoCost_;
        }
        Weapons.set_ammo();

        if (tf2.consecutive_reload:@s == 0) $_reloadDelay_ = data get entity @s SelectedItem.tag.attributes.reloadDelay[0] 20000;
        if (tf2.consecutive_reload:@s == 1) $_reloadDelay_ = data get entity @s SelectedItem.tag.attributes.reloadDelay[1] 20000;
        tf2.reload_delay:@s += $_reloadDelay_;
        tf2.consecutive_reload:@s = true;
    }
    function actionbar() {
        // TODO: use `return run` when 1.20.2 releases
        if (predicate tf2:hide_ammo) {
            Text.actionbar(@s, "&<red>❤ Health: &<tf2.health:@s> / &<tf2.max_health:@s>");
        }
        else {
            Text.actionbar(@s, "&<red>❤ Health: &<tf2.health:@s> / &<tf2.max_health:@s>             &<gray>Ammo: &<$_clip_> &<dark_gray>(&<$_ammo_>)");
        }
    }
    function damage() {
        if (retina.__variable__:$func_id !== 100) return 0;
        execute unless predicate tf2:hide_ammo at @s summon minecraft:item_display run {
            tag @s add tf2.bullet;
            tf2.timer:@s = 5;
            data merge entity @s {
                item: {id: "glowstone_dust", Count: 1b, tag: {CustomModelData: 0}}
            };
            $temp_Y = data get entity @s Pos[1] 480;
            $temp_Y += retina.__variable__:$offset_Y;
            execute store result entity @s Pos[1] double 0.002083333333333 run $temp_Y.get();
            execute store result entity @s transformation.scale[2] float 0.001 run data get storage retina:output Distance 2000;
            $input_vec3.X = retina.__variable__:$output_vec3.X;
            $input_vec3.Y = retina.__variable__:$output_vec3.Y;
            $input_vec3.Z = retina.__variable__:$output_vec3.Z;
            Math.vec_to_gimbal();
            if ($output_yaw > 0) $output_pitch *= -1;
            if ($output_yaw > 0) $output_pitch += 1800;
            if ($output_yaw > 0 && $output_pitch > 1800) $output_pitch -= 3600;
            
            execute store result entity @s Rotation[0] float 0.1 run $output_yaw.get();
            execute store result entity @s Rotation[1] float 0.1 run $output_pitch.get();
        }

        execute as @e[type=#tf2:player_like, scores={retina.hit=1..}] run {  
            if (score @s tf2.team = $current tf2.team) return 0;
            $_distance_ = data get storage retina:output Distance 1000;
            if ($_distance_ > $_range_) return 0;
            $_finalDamage_ = $_damage_;

            if (!$_noRamp_) {
                $_hammerUnits_ = data get storage retina:output Distance 52.49343832021;
                $_hammerUnits_ < 1024;

                $_temp1_ = $_hammerUnits_;
                $_temp1_ *= $_hammerUnits_;
                $_temp1_ *= 3;

                $_temp2_ = $_hammerUnits_;
                $_temp2_ *= $_hammerUnits_;
                $_temp2_ *= $_hammerUnits_;
                $_temp2_ *= 2;
                if ($_temp2_ == -2147483648) $_temp2_ --;
                $_temp2_ /= 1024;

                $_multiplier_ = $_temp1_;
                $_multiplier_ -= $_temp2_;
                $_multiplier_ *= -100;
                $_multiplier_ /= 1048576;
                $_multiplier_ += 50;

                $_temp3_ = 100;
                if ($_hammerUnits_ < 512) {
                    $_temp3_ = $_maxRamp_;
                    $_temp3_ -= 100;
                    $_temp3_ *= 2;
                }
                $_multiplier_ *= $_temp3_;
                $_multiplier_ /= 100;
                $_multiplier_ += 100;

                $_finalDamage_ *= $_multiplier_;
                $_finalDamage_ += 99;
                $_finalDamage_ /= 100;
            }

            tf2.health:@s -= $_finalDamage_; 
        }
    }
}

import "src/classes/*";