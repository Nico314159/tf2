new predicates(holding_melee) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {
                "nbt": "{attributes: {isMelee: 1b}}"
            }
        }
    }
}
new predicates(non_damaging) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:entity_properties",
            "entity": "this",
            "predicate": {
                "equipment": {
                    "mainhand": {
                        "nbt": "{attributes: {damage: {base: 0}}}"
                    }
                }
            }
        },
        {
            "condition": "minecraft:reference",
            "name": "tf2:empty_hand"
        }
    ]
}
new predicates(empty_hand) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {"count": 0}
        }
    }
}
new predicates(hide_ammo) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:reference",
            "name": "tf2:holding_melee"
        },
        {
            "condition": "minecraft:reference",
            "name": "tf2:non_damaging"
        }
    ]
}
new predicates(uniform_damage) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:reference",
            "name": "tf2:holding_melee"
        },
        {
            "condition": "minecraft:entity_properties",
            "entity": "this",
            "predicate": {
                "equipment": {
                    "mainhand": {
                        "nbt": "{attributes: {damage: {uniform: true}}}"
                    }
                }
            }
        }
    ]
}
new predicates(has_main_fire) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {
                "nbt": "{controls: {main_fire: true}}"
            }
        }
    }
}
new predicates(ammo_in_clip) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:all_of",
            "terms": [
                {
                    "condition": "minecraft:entity_scores", 
                    "entity": "this",
                    "scores": {"tf2.current_slot": 0}
                },
                {
                    "condition": "minecraft:entity_scores", 
                    "entity": "this",
                    "scores": {"tf2.primary_clip": {"min": 1}}
                }
            ]
        },
        {
            "condition": "minecraft:all_of",
            "terms": [
                {
                    "condition": "minecraft:entity_scores", 
                    "entity": "this",
                    "scores": {"tf2.current_slot": 1}
                },
                {
                    "condition": "minecraft:entity_scores", 
                    "entity": "this",
                    "scores": {"tf2.secondary_clip": {"min": 1}}
                }
            ]
        }
    ]
}
new predicates(unloaded_crossbow) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {
                "items": ["minecraft:crossbow"],
                "nbt": "{Charged: 0b}"
            }
        }
    }
}
new item_modifiers(load_crossbow) {
    "function": "minecraft:set_nbt",
    "tag": "{Charged: 1b, ChargedProjectiles:[{id: \"minecraft:arrow\", Count: 1b}], Unbreakable: 1b}"
}

new tags.functions(retina.on_hit) {
    "values": [
        "tf2:weapons/damage"
    ],
    "replace": false
}

new tags.damage_type(minecraft.no_impact) {
    "values": [
        "tf2:screenshake"
    ],
    "replace": false
}
new damage_type(screenshake) {
    "exhaustion": 0.0,
    "message_id": "generic",
    "scaling": "never"
}

new trim_material(red) {
    "asset_name": "red",
    "description": {
        "color": "#DD3004",
        "translate": "trim_material.tf2.red"
    },
    "ingredient": "minecraft:red_banner",
    "item_model_index": 0.01
}
new trim_material(blu) {
    "asset_name": "blu",
    "description": {
        "color": "#258474",
        "translate": "trim_material.tf2.blu"
    },
    "ingredient": "minecraft:blue_banner",
    "item_model_index": 0.02
}
new tags.items(minecraft.trim_materials) {
    "values": [
        "minecraft:red_banner",
        "minecraft:blue_banner"
    ]
}
new item_modifiers(apply_team_material) [
    {
        "function": "minecraft:set_nbt",
        "tag": "{Trim: {material: \"tf2:red\"}}",
        "conditions": [
            {
                "condition": "minecraft:entity_scores",
                "entity": "this",
                "scores": {
                    "tf2.team": 1
                }
            }
        ]
    },
    {
        "function": "minecraft:set_nbt",
        "tag": "{Trim: {material: \"tf2:blu\"}}",
        "conditions": [
            {
                "condition": "minecraft:entity_scores",
                "entity": "this",
                "scores": {
                    "tf2.team": 2
                }
            }
        ]
    }
];

class Weapons {
    function main_fire() {
        if (tf2.attack_delay:@s > 0) return 0;
        if (tf2.class:@s == 6 && tf2.current_slot:@s == 0 && tf2.time_revved:@s < tf2.rev_threshold:@s) return 0;

        switch (tf2.class:@s) {
            case Class.SPY: break; //Class.Spy.inventory_lock();
            case Class.SNIPER: Class.Sniper.inventory_lock();
            case Class.SCOUT: Class.Scout.inventory_lock();
            // case Class.SOLDIER: Class.Soldier.inventory_lock();
            // case Class.DEMOMAN: Class.Demoman.inventory_lock();
            case Class.HEAVY: Class.Heavy.inventory_lock();
            // case Class.PYRO: Class.Pyro.inventory_lock();
            // case Class.ENGINEER: Class.Engineer.inventory_lock();
            // case Class.MEDIC: Class.Medic.inventory_lock();
        }

        if (!predicate tf2:has_main_fire) return 0;
        this.get_ammo();
        if ($_clip_ <= 0 && !predicate tf2:holding_melee) return 0;

        if (!predicate tf2:holding_melee) {
            playsound tf2:item.gun.shoot ambient @s ~ ~ ~ 1.5 1 0.1;
        }

        tf2.team:$current = tf2.team:@s;
        data modify storage retina:input {} merge from entity @s SelectedItem.tag.retina;
        $_damage_  = data get entity @s SelectedItem.tag.attributes.damage.base;
        $_range_   = data get entity @s SelectedItem.tag.attributes.range 1000;
        $_maxRamp_ = data get entity @s SelectedItem.tag.attributes.damage.maxRamp 100;
        if (!data entity @s SelectedItem.tag.attributes.range) $_range_ = 2147483647;
        if (!data entity @s SelectedItem.tag.attributes.damage.maxRamp) $_maxRamp_ = 150;
        $_rangeDependent_ = execute unless predicate tf2:uniform_damage;
        // retina._variable_:$end_particle = true;

        retina.__variable__:$func_id = 100;
        $_totalDamage_ = 0;
        function retina:traverse/multicast;
        // retina._variable_:$end_particle = false;
        $_delay_ = data get entity @s SelectedItem.tag.attributes.attackDelay 20000;
        tf2.attack_delay:@s += $_delay_;
        scoreboard players reset $func_id retina.__variable__;

        data modify storage tf2.__temp__:summon number.X set from storage retina:output ContactCoordinates[0];
        data modify storage tf2.__temp__:summon number.Y set from storage retina:output ContactCoordinates[1];
        data modify storage tf2.__temp__:summon number.Z set from storage retina:output ContactCoordinates[2];
        execute store result storage tf2.__temp__:summon number.value int 1 run $_totalDamage_.get();
        if ($_totalDamage_ >= 1) {
            Weapons.damage_numbers() with storage tf2.__temp__:summon number;
        }

        // Equivalent to the range 192 u 608..610 u 776..778
        $validOffset = false;
        execute if score $offset_Y retina.__variable__ matches 192..778
            unless score $offset_Y retina.__variable__ matches 193..607
            unless score $offset_Y retina.__variable__ matches 611..775
            run $validOffset = true;

        // Melee sound effects
        if (predicate tf2:holding_melee) return run {
            if (!$validOffset) return 0;
            execute at @s anchored eyes run particle minecraft:sweep_attack ^ ^ ^1;
            if (!data storage retina:output {Target: "ENTITY"}) {
                return run playsound tf2:item.melee.miss ambient @s ~ ~ ~ 0.35 0.35 0.1;
            }
            playsound tf2:item.melee.hit ambient @s ~ ~ ~ 1.5 0.9 0.1;
        }

        $_clip_ --;
        this.set_ammo();
        tf2.consecutive_reload:@s = false;
    }
    function get_ammo() {
        if (tf2.current_slot:@s == 0) return run {
            $_clip_    = tf2.primary_clip:@s;
            $_maxClip_ = tf2.primary_maxClip:@s;
            $_ammo_    = tf2.primary_ammo:@s;
        }
        if (tf2.current_slot:@s == 1) {
            $_clip_    = tf2.secondary_clip:@s;
            $_maxClip_ = tf2.secondary_maxClip:@s;
            $_ammo_    = tf2.secondary_ammo:@s;
        }
    }
    function set_ammo() {
        if (tf2.current_slot:@s == 0) return run {
            tf2.primary_clip:@s      = $_clip_;
            tf2.primary_maxClip:@s   = $_maxClip_;
            tf2.primary_ammo:@s      = $_ammo_;
        }
        if (tf2.current_slot:@s == 1) {
            tf2.secondary_clip:@s    = $_clip_;
            tf2.secondary_maxClip:@s = $_maxClip_;
            tf2.secondary_ammo:@s    = $_ammo_;
        }
    }
    function reload() {
        switch (tf2.class:@s) {
            case Class.SPY: break; //Class.Spy.inventory_lock();
            case Class.SNIPER: Class.Sniper.inventory_lock();
            case Class.SCOUT: Class.Scout.inventory_lock();
            // case Class.SOLDIER: Class.Soldier.inventory_lock();
            // case Class.DEMOMAN: Class.Demoman.inventory_lock();
            case Class.HEAVY: Class.Heavy.inventory_lock();
            // case Class.PYRO: Class.Pyro.inventory_lock();
            // case Class.ENGINEER: Class.Engineer.inventory_lock();
            // case Class.MEDIC: Class.Medic.inventory_lock();
        }
        if (predicate tf2:hide_ammo) return 0;
        if (tf2.reload_delay:@s > 0) return 0;
        this.get_ammo();
        if ($_clip_ >= $_maxClip_) return 0;
        if ($_ammo_ == 0) return 0;

        $_reloadType_ = data get entity @s SelectedItem.tag.controls.reload;
        switch ($_reloadType_) {
            case Reload.NONE:
                break;
            case Reload.SINGLE:
                $_clip_ ++;
                $_ammo_ --;
            case Reload.LOSSY:
                $_ammoCost_ = $_maxClip_;
                $_ammoCost_ < $_ammo_;
                $_clip_ = $_ammoCost_;
                $_ammo_ -= $_ammoCost_;
            case Reload.LOSSLESS:
                $_ammoCost_ = $_maxClip_;
                $_ammoCost_ -= $_clip_;
                $_ammoCost_ < $_ammo_;
                $_clip_ += $_ammoCost_;
                $_ammo_ -= $_ammoCost_;
        }
        this.set_ammo();

        if (tf2.consecutive_reload:@s == 0) $_reloadDelay_ = data get entity @s SelectedItem.tag.attributes.reloadDelay[0] 20000;
        if (tf2.consecutive_reload:@s == 1) $_reloadDelay_ = data get entity @s SelectedItem.tag.attributes.reloadDelay[1] 20000;
        tf2.reload_delay:@s += $_reloadDelay_;
        tf2.consecutive_reload:@s = true;

        if (tf2.attack_delay:@s <= 0) {
            // Prevents it from seeing "unloaded crossbow" the next tick and assuming the fire button was hit
            item modify entity @s weapon.mainhand tf2:load_crossbow;
        }
    }
    function actionbar() {
        if (predicate tf2:hide_ammo) {
            return run Text.actionbar(@s, "&<red>❤ Health: &<tf2.health:@s> / &<tf2.max_health:@s>");
        }
        Text.actionbar(@s, "&<red>❤ Health: &<tf2.health:@s> / &<tf2.max_health:@s>             &<gray>Ammo: &<$_clip_> &<dark_gray>(&<$_ammo_>)");
    }
    function damage() {
        if (retina.__variable__:$func_id !== 100) return 0;

        execute unless predicate tf2:hide_ammo at @s run Weapons.draw_line();

        execute as @e[type=#tf2:player_like, scores={retina.hit=1..}] run Weapons.calculate_falloff();
    }
    function draw_line() {
        // @within this.damage()
        execute summon minecraft:marker run {
            if (retina.__variable__:$offset_Y matches 776..778) {tp @s ~ ~1.42 ~;}
            if (retina.__variable__:$offset_Y matches 608..610) {tp @s ~ ~1.07 ~;}
            if (retina.__variable__:$offset_Y === 192)          {tp @s ~ ~0.20 ~;}
            tag @s add tf2.height;
            data modify storage tf2.__temp__:summon line.X set from entity @s Pos[0];
            data modify storage tf2.__temp__:summon line.Y set from entity @s Pos[1];
            data modify storage tf2.__temp__:summon line.Z set from entity @s Pos[2];
            kill @s;
        }
        // rotate according to player vector
        $input_vec3.X = retina.__variable__:$output_vec3.X;
        $input_vec3.Y = retina.__variable__:$output_vec3.Y;
        $input_vec3.Z = retina.__variable__:$output_vec3.Z;
        Math.vec_to_gimbal();
        execute store result storage tf2.__temp__:summon line.yaw float 0.1 run $output_yaw.get();
        execute store result storage tf2.__temp__:summon line.pitch float 0.1 run $output_pitch.get();

        $scale_length = data get storage retina:output Distance 2000;
        //$scale_length -= 400;
        execute store result storage tf2.__temp__:summon line.scale float 0.001 run $scale_length.get();

        execute run {
            $execute positioned $(X) $(Y) $(Z) run summon item_display ^ ^ ^0.15 {
                item: {id: "glowstone_dust", Count: 1b, tag: {CustomModelData: 0}},
                Rotation: [$(yaw)f, $(pitch)f],
                Tags: ["tf2.visual", "tf2.newest"],
                transformation: {
                left_rotation: [0f, 0f, 0f, 1f],
                right_rotation: [0f, 0f, 0f, 1f],
                translation: [0f, 0f, 0f],
                scale: [1f, 1f, $(scale)f]
                }
            };
            tf2.lifetime:@e[type=item_display,tag=tf2.visual,tag=tf2.newest] = 4;
            tag @e[type=item_display,tag=tf2.visual,tag=tf2.newest] remove tf2.newest;
            // damage @s 1 arrow;
        } with storage tf2.__temp__:summon line;
        data remove storage tf2.__temp__:summon line;
    }
    function calculate_falloff() {
        // @within this.damage()
        if (score @s tf2.team = $current tf2.team) return 0;
        $_distance_ = data get storage retina:output Distance 1000;
        if ($_distance_ > $_range_) return 0;
        $_finalDamage_ = $_damage_;

        if ($_rangeDependent_) {
            $_hammerUnits_ = data get storage retina:output Distance 52.49343832021;
            $_hammerUnits_ < 1024;

            $_temp1_ = $_hammerUnits_;
            $_temp1_ *= $_hammerUnits_;
            $_temp1_ *= 3;

            $_temp2_ = $_hammerUnits_;
            $_temp2_ *= $_hammerUnits_;
            $_temp2_ *= $_hammerUnits_;
            $_temp2_ *= 2;
            if ($_temp2_ == -2147483648) $_temp2_ --;
            $_temp2_ /= 1024;

            $_multiplier_ = $_temp1_;
            $_multiplier_ -= $_temp2_;
            $_multiplier_ *= -100;
            $_multiplier_ /= 1048576;
            $_multiplier_ += 50;

            $_temp3_ = 100;
            if ($_hammerUnits_ < 512) {
                $_temp3_ = $_maxRamp_;
                $_temp3_ -= 100;
                $_temp3_ *= 2;
            }
            $_multiplier_ *= $_temp3_;
            $_multiplier_ /= 100;
            $_multiplier_ += 100;
        }
        else if (entity @a[tag=retina.executing, scores={tf2.class=2, tf2.time_scoped=4..}]) {
            Class.Sniper.damage_scale();
        }
        else {$_multiplier_ = 100;}

        $_finalDamage_ *= $_multiplier_;
        $_finalDamage_ += 99;
        $_finalDamage_ /= 100;
        tf2.health:@s -= $_finalDamage_;
        $_totalDamage_ += $_finalDamage_;
        damage @s 0.01 tf2:screenshake by @a[tag=retina.executing, limit=1];
    }
    function damage_numbers() {
        // @within this.main_fire();
        $execute positioned 0 0.4 0 run summon text_display ~$(X) ~$(Y) ~$(Z) {
            billboard: "center",
            text: '{"color":"red", "bold":"true", "text":"-$(value)"}',
            Tags: ["tf2.visual", "tf2.newest"],
            transformation: {
            left_rotation: [0f, 0f, 0f, 1f],
            right_rotation: [0f, 0f, 0f, 1f],
            translation: [0f, 0f, 0f],
            scale: [2f, 2f, 2f]
            }
        };
        tf2.lifetime:@e[type=text_display,tag=tf2.visual,tag=tf2.newest] = 12;
        tag @e[type=text_display,tag=tf2.visual,tag=tf2.newest] remove tf2.newest;
        data remove storage tf2.__temp__:summon number;
    }
    function slot_check() {
        tf2.current_slot:@s ??= 0;
        tf2.last_slot:@s = tf2.current_slot:@s;
        tf2.current_slot:@s = data get entity @s SelectedItemSlot;

        if (tf2.last_slot:@s != tf2.current_slot:@s) {
            tf2.attack_delay:@s = data get entity @s SelectedItem.tag.attributes.deployTime 10000;
            if (!data entity @s SelectedItem.tag.attributes.deployTime) tf2.attack_delay:@s = 10000;
            tf2.consecutive_reload:@s = false;
        }
    }
}