class Timer
{
    function main() {
        // Handles the timer mechanic, which is essential to almost all gamemodes
        // @within __tick__()

        tf2.timer:@s --;
        Timer.set_value();

        tf2.timer.sec:@s = tf2.timer:@s;
        tf2.timer.sec:@s += 19;
        tf2.timer.sec:@s /= 20;
        tf2.timer.min:@s = tf2.timer.sec:@s;
        tf2.timer.sec:@s %= 60;
        tf2.timer.min:@s /= 60;
        if (entity @s[tag=!tf2.multistage,tag=!tf2.overtime,tag=!tf2.setup_time]) Timer.display.singlestage();
        // if (entity @s[tag=tf2.multistage,tag=!tf2.overtime,tag=!tf2.setup_time]) Timer.display.multistage();
        if (entity @s[tag=tf2.setup_time]) Timer.display.setup_time();
        if (entity @s[tag=tf2.overtime]) Timer.display.overtime();

        if (score @s tf2.timer matches ..1200) Timer.chat();
        if (score @s[tag=tf2.setup_time] tf2.timer matches 0) Timer.exit_setup();
        if (score @s[tag=!tf2.setup_time] tf2.timer matches 0) Timer.zero();
        if (score @s tf2.timer matches -100) reset.as_marker();
    } 
    function chat() {
        // Sends timer-related dialogue lines in chat.
        // @within Timer.main()

        tf2.batch_number:$local = tf2.batch_number:@s;
        execute as @a if score @s tf2.batch_number = $local tf2.batch_number run tag @s add tf2.current;
        if (score @s[tag=tf2.setup_time] tf2.timer matches 1200) Text.tellraw(@a[tag=tf2.current], "&<bold,white>Mission begins in sixty seconds.");
        if (score @s[tag=tf2.setup_time] tf2.timer matches 600) Text.tellraw(@a[tag=tf2.current], "&<bold,white>Mission begins in thirty seconds.");
        if (score @s[tag=tf2.setup_time] tf2.timer matches 200) Text.tellraw(@a[tag=tf2.current], "&<bold,white>Mission begins in ten seconds.");
        if (score @s[tag=tf2.setup_time] tf2.timer matches 100) Text.tellraw(@a[tag=tf2.current], "&<bold,white>Five...");
        if (score @s[tag=tf2.setup_time] tf2.timer matches 80) Text.tellraw(@a[tag=tf2.current], "&<bold,white>Four..");
        if (score @s[tag=tf2.setup_time] tf2.timer matches 60) Text.tellraw(@a[tag=tf2.current], "&<bold,white>Three..");
        if (score @s[tag=tf2.setup_time] tf2.timer matches 40) Text.tellraw(@a[tag=tf2.current], "&<bold,white>Two..");
        if (score @s[tag=tf2.setup_time] tf2.timer matches 20) Text.tellraw(@a[tag=tf2.current], "&<bold,italic,white>One.");

        if (score @s[tag=!tf2.overtime,tag=!tf2.setup_time] tf2.timer matches 1200) Text.tellraw(@a[tag=tf2.current], "&<bold,white>Mission ends in sixty seconds.");
        if (score @s[tag=!tf2.overtime,tag=!tf2.setup_time] tf2.timer matches 600) Text.tellraw(@a[tag=tf2.current], "&<bold,white>Mission ends in thirty seconds.");
        if (score @s[tag=!tf2.overtime,tag=!tf2.setup_time] tf2.timer matches 200) Text.tellraw(@a[tag=tf2.current], "&<bold,white>Mission ends in ten seconds.");
        if (score @s[tag=!tf2.overtime,tag=!tf2.setup_time] tf2.timer matches 100) Text.tellraw(@a[tag=tf2.current], "&<bold,white>Five!");
        if (score @s[tag=!tf2.overtime,tag=!tf2.setup_time] tf2.timer matches 80) Text.tellraw(@a[tag=tf2.current], "&<bold,white>Four!");
        if (score @s[tag=!tf2.overtime,tag=!tf2.setup_time] tf2.timer matches 60) Text.tellraw(@a[tag=tf2.current], "&<bold,white>Three!");
        if (score @s[tag=!tf2.overtime,tag=!tf2.setup_time] tf2.timer matches 40) Text.tellraw(@a[tag=tf2.current], "&<bold,white>Two!");
        if (score @s[tag=!tf2.overtime,tag=!tf2.setup_time] tf2.timer matches 20) Text.tellraw(@a[tag=tf2.current], "&<bold,italic,white>One!");

        $temp = execute if predicate tf2:coin_flip; // 50/50 chance to pick one of two dialogue lines.
        if (score @s[tag=tf2.overtime] tf2.timer matches 1200 && $temp = 1) Text.tellraw(@a[tag=tf2.current], "&<bold,white>Overtime!");
        if (score @s[tag=tf2.overtime] tf2.timer matches 1200 && $temp != 1) Text.tellraw(@a[tag=tf2.current], "&<bold,white>Overtime...");
    } 

    function set_value() {
        Hardcode.repeat("_i_", () => {execute store result bossbar tf2:timer__i_ value run scoreboard players get @s[scores={tf2.batch_number=_i_}] tf2.timer;}, start = 1, stop = _INSTANCES_CAP_);
    } 
    function set_max() {
        Hardcode.repeat("_i_", () => {execute store result bossbar tf2:timer__i_ max run scoreboard players get @s[scores={tf2.batch_number=_i_}] tf2.timer;}, start = 1, stop = _INSTANCES_CAP_);
        Timer.set_value();
    } 

    function show() {
        // Displays timer bar to all players in the same batch as the marker
        Hardcode.repeat("_i_", () => {
            if (score @s tf2.batch_number matches _i_) bossbar set tf2:timer__i_ visible true;
            if (score @s tf2.batch_number matches _i_) bossbar set tf2:timer__i_ players @a[scores={tf2.batch_number=_i_}];
            if (score @s tf2.batch_number matches _i_) bossbar set tf2:timer__i_ color white;
            }, start = 1, stop = _INSTANCES_CAP_
        );
    } 
    function hide() {
        Hardcode.repeat("_i_", () => {if (score @s tf2.batch_number matches _i_) bossbar set tf2:timer__i_ visible false;}, start = 1, stop = _INSTANCES_CAP_);
    } 

    function begin_setup() {
        tag @s add tf2.setup_time;
        tf2.timer:@s = data get entity @s data.map.setup_time 20;
        Hardcode.repeat("_i_", () => {if (score @s tf2.batch_number matches _i_) bossbar set tf2:timer__i_ color green;}, start = 1, stop = _INSTANCES_CAP_);
        Timer.set_max();

        if (data entity @s {data:{map:{name: "ad_test"}}}) fill -508 1 -517 -517 1 -508 minecraft:cobblestone_wall replace minecraft:blue_carpet; // placeholder
    } 
    function exit_setup() {
        if (data entity @s {data:{map:{name: "ad_test"}}}) fill -508 1 -517 -517 1 -508 minecraft:blue_carpet replace minecraft:cobblestone_wall; // placeholder
        tf2.timer:@s = data get entity @s data.map.timer 20;
        Timer.set_max();
        Timer.show();
        tag @s remove tf2.setup_time;
    } 

    function zero() {
        // Handles what to do when the timer reaches zero.

        // If any objectives are still in contention, then start overtime if it isn't already.
        tf2.batch_number:$local = tf2.batch_number:@s;
        execute as @e[type=marker,tag=tf2.control_point] if score @s tf2.batch_number = $local tf2.batch_number run tag @s add tf2.current;
        tag @e[tag=tf2.current] remove tf2.overtime;
        execute as @e[type=marker,tag=tf2.current] if score @s tf2.blu_progress < @s tf2.capture_threshold if score @s tf2.red_progress < @s tf2.capture_threshold run tag @s add tf2.overtime;
        execute unless entity @s[tag=tf2.overtime] if entity @e[type=marker,tag=tf2.current,tag=tf2.overtime] run Timer.overtime();

        // Otherwise, end the game.
        tag @e[type=marker] remove tf2.current;
        if (score @s tf2.timer matches 0) Timer.end_game();
    } 
    function overtime() {
        tag @s add tf2.overtime;
        tf2.timer:@s = 1200; // overtime lasts 1 minute
        Hardcode.repeat("_i_", () => {if (score @s tf2.batch_number matches _i_) bossbar set tf2:timer__i_ color red;}, start = 1, stop = _INSTANCES_CAP_);
        Timer.set_max();
    } 
    function end_game() {
        scoreboard players reset $winner tf2.var;
        $temp = tf2.gamemode:@s;
        $temp %= 4; // determines whether gamemode is symmetric or not (see gamemode key). 
        if ($temp == 1) $winner = 1; // RED wins in asymmetric gamemodes (like A/D or Payload)
        if ($temp != 1) $winner = -1; // Stalemate in symmetric gamemodes (like KOTH, 5CP, or CTF)
        reset.announce_winner();
    }

    class display {
        // Slightly different text for regular time, setup time, and overtime.
        // Second command in each lambda is for zero-padding.
        function singlestage() {
            Hardcode.repeat("_i_", () => {
                if (entity @s[scores={tf2.batch_number=_i_,tf2.timer.sec=10..59}]) bossbar set tf2:timer__i_ name [
                    {"text": "", "font": "minecraft:default"}, {"nbt": "info[_i_][7].left", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"},
                    {"text": "Round - "}, {"score": {"name": "@s", "objective": "tf2.timer.min"}}, {"text": ":"}, {"score": {"name": "@s", "objective": "tf2.timer.sec"}}, {"text": " remaining"}, {"nbt": "info[_i_][7].mid", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"},
                    {"nbt": "info[_i_][0].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][1].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][2].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][3].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"},
                    {"nbt": "info[_i_][4].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][5].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][6].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][7].right", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}
                ];
                if (entity @s[scores={tf2.batch_number=_i_,tf2.timer.sec=0..9}]) bossbar set tf2:timer__i_ name [
                    {"text": "", "font": "minecraft:default"}, {"nbt": "info[_i_][7].left", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"},
                    {"text": "Round - "}, {"score": {"name": "@s", "objective": "tf2.timer.min"}}, {"text": ":0"}, {"score": {"name": "@s", "objective": "tf2.timer.sec"}}, {"text": " remaining"}, {"nbt": "info[_i_][7].mid", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"},
                    {"nbt": "info[_i_][0].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][1].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][2].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][3].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, 
                    {"nbt": "info[_i_][4].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][5].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][6].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][7].right", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}
                ];
                }, start = 1, stop = _INSTANCES_CAP_
            );
        }
        function setup_time() {
            Hardcode.repeat("_i_", () => {
                if (entity @s[scores={tf2.batch_number=_i_,tf2.timer.sec=10..59}]) bossbar set tf2:timer__i_ name [
                    {"text": "", "font": "minecraft:default"}, {"nbt": "info[_i_][7].left", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"},
                    {"text": "Setup - "}, {"score": {"name": "@s", "objective": "tf2.timer.min"}}, {"text": ":"}, {"score": {"name": "@s", "objective": "tf2.timer.sec"}}, {"text": " remaining"}, {"nbt": "info[_i_][7].mid", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"},
                    {"nbt": "info[_i_][0].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][1].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][2].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][3].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"},
                    {"nbt": "info[_i_][4].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][5].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][6].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][7].right", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}
                ];
                if (entity @s[scores={tf2.batch_number=_i_,tf2.timer.sec=0..9}]) bossbar set tf2:timer__i_ name [
                    {"text": "", "font": "minecraft:default"}, {"nbt": "info[_i_][7].left", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"},
                    {"text": "Setup - "}, {"score": {"name": "@s", "objective": "tf2.timer.min"}}, {"text": ":0"}, {"score": {"name": "@s", "objective": "tf2.timer.sec"}}, {"text": " remaining"}, {"nbt": "info[_i_][7].mid", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"},
                    {"nbt": "info[_i_][0].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][1].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][2].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][3].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"},
                    {"nbt": "info[_i_][4].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][5].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][6].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][7].right", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}
                ]; 
                }, start = 1, stop = _INSTANCES_CAP_
            );
        }
        function overtime() {
            Hardcode.repeat("_i_", () => {
                if (entity @s[scores={tf2.batch_number=_i_,tf2.timer.sec=10..59}]) bossbar set tf2:timer__i_ name [
                    {"text": "", "font": "minecraft:default"}, {"nbt": "info[_i_][7].left", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"},
                    {"text": "Overtime! - "}, {"score": {"name": "@s", "objective": "tf2.timer.min"}}, {"text": ":"}, {"score": {"name": "@s", "objective": "tf2.timer.sec"}}, {"text": " remaining"}, {"nbt": "info[_i_][7].mid", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"},
                    {"nbt": "info[_i_][0].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][1].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][2].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][3].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"},
                    {"nbt": "info[_i_][4].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][5].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][6].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][7].right", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}
                ];
                if (entity @s[scores={tf2.batch_number=_i_,tf2.timer.sec=0..9}]) bossbar set tf2:timer__i_ name [
                    {"text": "", "font": "minecraft:default"}, {"nbt": "info[_i_][7].left", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"},
                    {"text": "Overtime! - "}, {"score": {"name": "@s", "objective": "tf2.timer.min"}}, {"text": ":0"}, {"score": {"name": "@s", "objective": "tf2.timer.sec"}}, {"text": " remaining"}, {"nbt": "info[_i_][7].mid", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"},
                    {"nbt": "info[_i_][0].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][1].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][2].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][3].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"},
                    {"nbt": "info[_i_][4].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][5].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][6].main", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}, {"nbt": "info[_i_][7].right", "storage": "tf2:control_points", "interpret": true, "font": "tf2:square"}
                ]; 
                }, start = 1, stop = _INSTANCES_CAP_
            );
        }
    }
}
