class Timer
{
    function main() {
        // Handles the timer mechanic, which is essential to almost all gamemodes
        // @within __tick__()

        execute store result storage tf2.__temp__:index i int 1 run tf2.batch_number:@s.get();
        tf2.timer:@s --;
        Timer.set_value() with storage tf2.__temp__:index;
        tf2.timer.sec:@s = tf2.timer:@s;
        tf2.timer.sec:@s += 19;
        tf2.timer.sec:@s /= 20;
        tf2.timer.min:@s = tf2.timer.sec:@s;
        tf2.timer.sec:@s %= 60;
        tf2.timer.min:@s /= 60;

        if (entity @s[tag=!tf2.multistage,tag=!tf2.overtime,tag=!tf2.setup_time]) Timer.display.singlestage() with storage tf2.__temp__:index;
        // if (entity @s[tag=tf2.multistage,tag=!tf2.overtime,tag=!tf2.setup_time]) Timer.display.multistage() with storage tf2.__temp__:index;
        if (entity @s[tag=tf2.setup_time]) Timer.display.setup_time() with storage tf2.__temp__:index;
        if (entity @s[tag=tf2.overtime]) Timer.display.overtime() with storage tf2.__temp__:index;

        if (tf2.timer:@s <= 1200) Timer.chat();
        if (tf2.timer:@s[tag=tf2.setup_time] == 0) Timer.exit_setup() with storage tf2.__temp__:index;
        if (tf2.timer:@s[tag=!tf2.setup_time] == 0) Timer.zero() with storage tf2.__temp__:index;
        if (tf2.timer:@s == -100) reset.as_marker();
    }
    function chat() {
        // Sends timer-related dialogue lines in chat.
        // @within Timer.main()

        tf2.batch_number:$local = tf2.batch_number:@s;
        execute as @a if score @s tf2.batch_number = $local tf2.batch_number run tag @s add tf2.current;
        if (entity @s[tag=tf2.setup_time]) {
            switch (tf2.timer:@s) {
            case 1200: Text.tellraw(@a[tag=tf2.current], "&<bold,white>Mission begins in sixty seconds.");
            case  600: Text.tellraw(@a[tag=tf2.current], "&<bold,white>Mission begins in thirty seconds.");
            case  200: Text.tellraw(@a[tag=tf2.current], "&<bold,white>Mission begins in ten seconds.");
            case  100: Text.tellraw(@a[tag=tf2.current], "&<bold,white>Five...");
            case   80: Text.tellraw(@a[tag=tf2.current], "&<bold,white>Four..");
            case   60: Text.tellraw(@a[tag=tf2.current], "&<bold,white>Three..");
            case   40: Text.tellraw(@a[tag=tf2.current], "&<bold,white>Two..");
            case   20: Text.tellraw(@a[tag=tf2.current], "&<bold,italic,white>One.");
            }
        }
        else if (entity @s[tag=!tf2.overtime]) {
            switch (tf2.timer:@s) {
            case 1200: Text.tellraw(@a[tag=tf2.current], "&<bold,white>Mission ends in sixty seconds.");
            case  600: Text.tellraw(@a[tag=tf2.current], "&<bold,white>Mission ends in thirty seconds.");
            case  200: Text.tellraw(@a[tag=tf2.current], "&<bold,white>Mission ends in ten seconds.");
            case  100: Text.tellraw(@a[tag=tf2.current], "&<bold,white>Five!");
            case   80: Text.tellraw(@a[tag=tf2.current], "&<bold,white>Four!");
            case   60: Text.tellraw(@a[tag=tf2.current], "&<bold,white>Three!");
            case   40: Text.tellraw(@a[tag=tf2.current], "&<bold,white>Two!");
            case   20: Text.tellraw(@a[tag=tf2.current], "&<bold,italic,white>One!");
            }
        }

        // 50/50 chance to pick one of two dialogue lines.
        $temp = execute if predicate tf2:coin_flip;
        if (tf2.timer:@s[tag=tf2.overtime] == 1200 && $temp == 1) Text.tellraw(@a[tag=tf2.current], "&<bold,white>Overtime!");
        if (tf2.timer:@s[tag=tf2.overtime] == 1200 && $temp != 1) Text.tellraw(@a[tag=tf2.current], "&<bold,white>Overtime...");
    }

    function set_value() {
        // @needs_macro
        // @within Timer.main()
        $execute store result bossbar tf2:timer_$(i) value
                 run tf2.timer:@s.get();
    }
    function set_max() {
        // @needs_macro
        // @within
        //  Timer.begin_setup()
        //  Timer.exit_setup()
        //  Timer.overtime()
        //  start_game.as_marker.main()
        $execute store result bossbar tf2:timer_$(i) max
                 store result bossbar tf2:timer_$(i) value
                 run tf2.timer:@s.get();
    }

    function show() {
        // Displays timer bar to all players in the same batch as the marker
        // @needs_macro
        // @within
        //  Timer.exit_setup()
        //  start_game.as_marker.main()
        $bossbar set tf2:timer_$(i) visible true;
        $bossbar set tf2:timer_$(i) players @a[scores={tf2.batch_number=$(i)}];
        $bossbar set tf2:timer_$(i) color white;
    }
    function hide() {
        // @needs_macro
        // @within
        //  reset.announce_winner()
        $bossbar set tf2:timer_$(i) visible false;
    }

    function begin_setup() {
        // @needs_macro
        // @within start_game.as_marker.main()
        tag @s add tf2.setup_time;
        tf2.timer:@s = data get entity @s data.map.setup_time 20;
        $bossbar set tf2:timer_$(i) color green;
        Timer.set_max() with storage tf2.__temp__:index;

        if (data entity @s {data:{map:{name: "ad_test"}}}) {
            // placeholder
            fill -508 1 -517 -517 1 -508 minecraft:cobblestone_wall replace minecraft:blue_carpet;
        }
    }
    function exit_setup() {
        // @within Timer.main()
        tf2.timer:@s = data get entity @s data.map.timer 20;
        Timer.set_max() with storage tf2.__temp__:index;
        Timer.show() with storage tf2.__temp__:index;
        tag @s remove tf2.setup_time;

        if (data entity @s {data:{map:{name: "ad_test"}}}) {
            // placeholder
            fill -508 1 -517 -517 1 -508 minecraft:blue_carpet replace minecraft:cobblestone_wall;
        }
    }

    function zero() {
        // Handles what to do when the timer reaches zero.
        // @within Timer.main()

        // If any objectives are still in contention, then start overtime if it isn't already.
        tf2.batch_number:$local = tf2.batch_number:@s;
        execute as @e[type=marker,tag=tf2.control_point]
                if score @s tf2.batch_number = $local tf2.batch_number
                run  tag @s add tf2.current;
        tag @e[tag=tf2.current,tag=tf2.objective] remove tf2.overtime;
        execute as @e[type=marker,tag=tf2.current,tag=tf2.objective]
                if score @s tf2.blu_progress < @s tf2.capture_threshold
                if score @s tf2.red_progress < @s tf2.capture_threshold
                run  tag @s add tf2.overtime;
        execute unless entity @s[tag=tf2.overtime]
                if entity @e[type=marker,tag=tf2.current,tag=tf2.overtime]
                run Timer.overtime() with storage tf2.__temp__:index;

        // Otherwise, end the game.
        tag @e[type=marker] remove tf2.current;
        if (tf2.timer:@s == 0) Timer.end_game();
    }
    function overtime() {
        // @needs_macro
        // @within Timer.zero()
        tag @s add tf2.overtime;
        tf2.timer:@s = 1200; // overtime lasts 1 minute
        $bossbar set tf2:timer_$(i) color red;
        Timer.set_max() with storage tf2.__temp__:index;
    }
    function end_game() {
        // @within
        //  Timer.zero()
        //  Objectives.control_point.decay.main()
        scoreboard players reset $winner tf2.var;
        $temp = tf2.gamemode:@s;
        $temp %= 4; // determines whether gamemode is symmetric or not (see gamemode key).
        if ($temp == 1) $winner = 1; // RED wins in asymmetric gamemodes (like A/D or Payload)
        if ($temp != 1) $winner = -1; // Stalemate in symmetric gamemodes (like 5CP or CTF)
        reset.announce_winner();
    }

    class display {
        // Slightly different text for regular time, setup time, and overtime.
        // Second command in each function is for zero-padding.
        // @needs_macro
        // @within Timer.main()

        function singlestage() {
            $execute if entity @s[scores={tf2.timer.sec=10..59}] run Bossbar.setName(tf2:timer_$(i), "&<space(left),font(square)>Round - &<tf2.timer.min:@s>:&<tf2.timer.sec:@s> remaining&<space(mid),font(square)>&<point(0),font(square)>&<point(1),font(square)>&<point(2),font(square)>&<point(3),font(square)>&<point(4),font(square)>&<point(5),font(square)>&<point(6),font(square)>&<space(right),font(square)>");
            $execute if entity @s[scores={tf2.timer.sec=0..9}] run Bossbar.setName(tf2:timer_$(i), "&<space(left),font(square)>Round - &<tf2.timer.min:@s>:0&<tf2.timer.sec:@s> remaining&<space(mid),font(square)>&<point(0),font(square)>&<point(1),font(square)>&<point(2),font(square)>&<point(3),font(square)>&<point(4),font(square)>&<point(5),font(square)>&<point(6),font(square)>&<space(right),font(square)>");
        }
        function setup_time() {
            $execute if entity @s[scores={tf2.timer.sec=10..59}] run Bossbar.setName(tf2:timer_$(i), "&<space(left),font(square)>Setup - &<tf2.timer.min:@s>:&<tf2.timer.sec:@s> remaining&<space(mid),font(square)>&<point(0),font(square)>&<point(1),font(square)>&<point(2),font(square)>&<point(3),font(square)>&<point(4),font(square)>&<point(5),font(square)>&<point(6),font(square)>&<space(right),font(square)>");
            $execute if entity @s[scores={tf2.timer.sec=0..9}] run Bossbar.setName(tf2:timer_$(i), "&<space(left),font(square)>Setup - &<tf2.timer.min:@s>:0&<tf2.timer.sec:@s> remaining&<space(mid),font(square)>&<point(0),font(square)>&<point(1),font(square)>&<point(2),font(square)>&<point(3),font(square)>&<point(4),font(square)>&<point(5),font(square)>&<point(6),font(square)>&<space(right),font(square)>");
        }
        function overtime() {
            $execute if entity @s[scores={tf2.timer.sec=10..59}] run Bossbar.setName(tf2:timer_$(i), "&<space(left),font(square)>Overtime! - &<tf2.timer.min:@s>:&<tf2.timer.sec:@s> remaining&<space(mid),font(square)>&<point(0),font(square)>&<point(1),font(square)>&<point(2),font(square)>&<point(3),font(square)>&<point(4),font(square)>&<point(5),font(square)>&<point(6),font(square)>&<space(right),font(square)>");
            $execute if entity @s[scores={tf2.timer.sec=0..9}] run Bossbar.setName(tf2:timer_$(i), "&<space(left),font(square)>Overtime! - &<tf2.timer.min:@s>:0&<tf2.timer.sec:@s> remaining&<space(mid),font(square)>&<point(0),font(square)>&<point(1),font(square)>&<point(2),font(square)>&<point(3),font(square)>&<point(4),font(square)>&<point(5),font(square)>&<point(6),font(square)>&<space(right),font(square)>");
        }
    }
}

class KOTH_Timer
{
    function main() {
        // Handles the timer mechanic, which is essential to almost all gamemodes
        // @within __tick__()

        execute store result storage tf2.__temp__:index i int 1 run tf2.batch_number:@s.get();
        this.display() with storage tf2.__temp__:index;

        if (tf2.team:@s == 0) return 0;
        if (tf2.team:@s == 1) {data modify storage tf2.__temp__:index name set value "red";}
        if (tf2.team:@s == 2) {data modify storage tf2.__temp__:index name set value "blu";}
        this.update() with storage tf2.__temp__:index;

        if (tf2.red_timer:@s[tag=!tf2.ended] == 0 || tf2.blu_timer:@s[tag=!tf2.ended] == 0) {
            this.zero() with storage tf2.__temp__:index;
        }
        tf2.timer:@s[tag=tf2.ended] --;
        if (tf2.timer:@s == -100) {
            reset.as_marker();
        }
    }

    function update() {
        $if (entity @s[tag=tf2.$(name)_overtime]) return 0;
        if (entity @s[tag=tf2.ended]) return 0;
        $scoreboard players operation $ticksCopy tf2.var = @s tf2.$(name)_timer;
        // Copy is meant to reduce total number of macro invocations
        $ticksCopy --;
        $secondsCopy = $ticksCopy;
        $secondsCopy += 19;
        $secondsCopy /= 20;
        $minutesCopy = $secondsCopy;
        $secondsCopy %= 60;
        $minutesCopy /= 60;
        $execute store result bossbar tf2:$(name)_timer_$(i) value run $ticksCopy.get();
        $scoreboard players operation @s tf2.$(name)_timer = $ticksCopy tf2.var;
        $scoreboard players operation @s tf2.$(name)_timer.sec = $secondsCopy tf2.var;
        $scoreboard players operation @s tf2.$(name)_timer.min = $minutesCopy tf2.var;
    }
    function set_max() {
        // @needs_macro
        // @within
        //  start_game.as_marker.main()
        $execute store result bossbar  tf2:red_timer_$(i) max
                 store result bossbar  tf2:red_timer_$(i) value
                 store result score @s tf2.red_timer
                 store result bossbar  tf2:blu_timer_$(i) max
                 store result bossbar  tf2:blu_timer_$(i) value
                 store result score @s tf2.blu_timer
                 run data get entity @s data.map.timer 20;

        $this.update({"name": "red", "i": $(i)});
        $this.update({"name": "blu", "i": $(i)});
    }

    function zero() {
        // Handles what to do when the timer reaches zero.
        // @within KOTH_Timer.main()
        $execute as @e[type=marker,tag=tf2.objective,scores={tf2.batch_number=$(i)},limit=1]
                 store success score $do_overtime tf2.var
                 if score @s tf2.$(name)_progress < @s tf2.capture_threshold;
        $tag @s remove tf2.$(name)_overtime;
        $execute if score $do_overtime tf2.var matches 1 run tag @s add tf2.$(name)_overtime;
        if (!$do_overtime) this.end_game();
    }
    // function overtime() {}
    function end_game() {
        // @within
        //  this.zero()
        if (tf2.red_timer:@s == 0) $winner = 1;
        if (tf2.blu_timer:@s == 0) $winner = 2;
        reset.announce_winner();
        tag @s add tf2.ended;
        tf2.timer:@s = -1;
    }

    function show() {
        // Displays both KOTH timer bars to all players in the same batch as the marker
        // @needs_macro
        // @within
        //  start_game.as_marker.main()
        $bossbar set tf2:red_timer_$(i) visible true;
        $bossbar set tf2:red_timer_$(i) players @a[scores={tf2.batch_number=$(i)}];
        $bossbar set tf2:blu_timer_$(i) visible true;
        $bossbar set tf2:blu_timer_$(i) players @a[scores={tf2.batch_number=$(i)}];
    }
    function hide() {
        // @needs_macro
        // @within
        //  reset.announce_winner()
        $bossbar set tf2:red_timer_$(i) visible false;
        $bossbar set tf2:blu_timer_$(i) visible false;
    }
    function display() {
        // @needs_macro
        // @within this.main()
        // say "display called";
        $execute if entity @s[scores={tf2.red_timer.sec=10..59}] run Bossbar.setName(tf2:red_timer_$(i), "RED - &<tf2.red_timer.min:@s>:&<tf2.red_timer.sec:@s> remaining");
        $execute if entity @s[scores={tf2.red_timer.sec=0..9}] run Bossbar.setName(tf2:red_timer_$(i), "RED - &<tf2.red_timer.min:@s>:0&<tf2.red_timer.sec:@s> remaining");
        $execute if entity @s[tag=tf2.red_overtime] run Bossbar.setName(tf2:red_timer_$(i), "RED - Overtime!");

        $execute if entity @s[scores={tf2.blu_timer.sec=10..59}] run Bossbar.setName(tf2:blu_timer_$(i), "&<space(left),font(square)>BLU - &<tf2.blu_timer.min:@s>:&<tf2.blu_timer.sec:@s> remaining&<space(mid),font(square)>&<point(0),font(square)>&<space(right),font(square)>");
        $execute if entity @s[scores={tf2.blu_timer.sec=0..9}] run Bossbar.setName(tf2:blu_timer_$(i), "&<space(left),font(square)>BLU - &<tf2.blu_timer.min:@s>:0&<tf2.blu_timer.sec:@s> remaining&<space(mid),font(square)>&<point(0),font(square)>&<space(right),font(square)>");
        $execute if entity @s[tag=tf2.blu_overtime] run Bossbar.setName(tf2:blu_timer_$(i), "&<space(left),font(square)>BLU - Overtime!&<space(mid),font(square)>&<point(0),font(square)>&<space(right),font(square)>");
    }
}

