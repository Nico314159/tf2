TextProps.font("font", "_foo_", "tf2:_foo_");
TextProp.font("default_font", "minecraft:default");
TextProp.hoverText(
    "info_atk_def",
    "&<red>RED &<white>starts with all the control points, and &<blue>BLU must capture &<italic>all &<!italic>of them in order to win. Once a point is taken, it cannot be reclaimed by &<red>RED. &<white>If the timer runs out, &<red>RED &<white>wins no matter how much progress &<blue>BLU &<white>has made."
);
TextProp.hoverText(
    "info_control_points",
    "Each team starts out owning half the control points; whichever team captures all of them wins. Stalemate if the timer runs out."
);
TextProps.nbt(
    propertyName = "space",
    indexString  = "_part_",
    type         = storage,
    source       = "tf2:control_points",
    path         = info[$(i)][7]._part_,
    interpret    = true
);
TextProps.nbt(
    propertyName = "point",
    indexString  = "_j_",
    type         = storage,
    source       = "tf2:control_points",
    path         = info[$(i)][_j_].main,
    interpret    = true
);
TextProps.nbt(
    propertyName = "gui_wheel",
    indexString  = "_path_",
    type         = storage,
    source       = "tf2:lookup",
    path         = points[0].wheel._path_,
    interpret    = true
);
TextProps.nbt(
    propertyName = "item_of",
    indexString  = "_selector_",
    type         = entity,
    source       = "_selector_",
    path         = SelectedItem.tag.display.Name,
    interpret    = true
);
TextProps.nbt(
    propertyName = "HUD",
    indexString  = "key",
    type         = storage,
    source       = "tf2:actionbar",
    path         = key,
    interpret    = true
);
TextProp.keybind("main_fire", "key.use");
TextProp.keybind("alt_fire",  "key.swapOffhand");
TextProp.keybind("reload",    "key.drop");
TextProp.keybind("not_used",  "key.attack");
TextProps.keybind(propertyName="control", indexString="_i_", keybind="key._i_");
TextProp.clickCommand("toggle_autoreload", () => {trigger autoreload;});

@lazy function controls_reminder() {
    Text.tellraw(@s, `
&<underlined>Control Scheme:
&<gray>Main Attack (both guns && melee) = &<white,bold,main_fire>
&<gray>Alt Fire (zoom-in, revving, etc) = &<white,bold,alt_fire>
&<gray>Reload = &<white,bold,reload> &<white,underlined,toggle_autoreload>[Toggle Autoreload]
&<gray>You &<bold,italic,red>NEVER &<gray>need to press &<white,bold,not_used>
    `);
}
Trigger.add(controls, () => {controls_reminder();});
Trigger.add(autoreload, () => {
    if (entity @s[tag=tf2.autoreload]) {
        Text.tellraw(@s, "Autoreload is now &<gray,bold>disabled.");
        tag @s remove tf2.autoreload;
    }
    else {
        Text.tellraw(@s, "Autoreload is now &<yellow,bold>enabled.");
        tag @s add tf2.autoreload;
    }
});