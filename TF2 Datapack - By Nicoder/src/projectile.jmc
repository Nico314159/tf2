class Projectile {
    new advancement(take_hit) {
    	"criteria": {
		    "requirement": {
	    		"trigger": "minecraft:entity_hurt_player",
			    "conditions": {
    	  			"damage": {
	    				"type": {
				 		    "direct_entity": {
					        	"type": "minecraft:arrow"
    					    }
		        		}
				    }
    			}
	    	}
    	},
		"rewards": {"function": "tf2:projectile/count_hits"}
	}

    function tick() {
        if (entity @s[tag=tf2.has_trail]) {
            execute at @s run this.trail();
        }
        if (entity @s[tag=tf2.animated]) {
            this.animate();
        }

        vars::Motion = @s::item.components.minecraft:custom_data.Motion;
        vars::Pos = @s::Pos;
        execute on vehicle run vars::Rotation = @s::Rotation;

        execute if entity @s[tag=!tf2.drag] 
                on vehicle
                run this.copy_xz_motion(); 

        execute on vehicle expand {
            @s::Pos[0] = vars::Pos[0];
            @s::Pos[2] = vars::Pos[2];
        }
        @s::Rotation[0] = EVAL(-1 / 1000) * (float) vars::Rotation[0] * 1000;
        @s::Rotation[1] = EVAL(-1 / 1000) * (float) vars::Rotation[1] * 1000;

        if (entity @s[tag=tf2.convection]) {
            execute on vehicle run this.convection();
        }

        this.check_collision();
        execute as @e[type=#tf2:player_like,tag=tf2.batch] run this.remove_tags();
        tf2.age:@s++;
        if (tf2.age:@s > tf2.lifetime:@s) {
            tag @s add tf2.cleanup;
        }
        if (entity @s[tag=tf2.cleanup]) {
            this.cleanup();
        }
    }
    function count_hits() {
        tf2.hits_taken:@s++;
        advancement revoke @s only tf2:projectile/take_hit;
    }
    function trail() {
        Hardcode.repeat("|z|", () => {
            particle minecraft:smoke ^ ^-0.2 ^Hardcode.calc(|z| / -3) 0 0 0 0 10;
        }, start=1, stop=4);
    }
    function animate() {
        tf2.model_number:@s++;
        item modify entity @s contents { 
            "function": "minecraft:set_custom_model_data",
            "value": {"type": "minecraft:score", "target": "this", "score": "tf2.model_number"}
        };
    }
    function calc_lifetime() {
        if (data storage tf2:summon projectile.weapon.components.minecraft:custom_data.projectile.lifetime) {
            return run summon::projectile.weapon.components.minecraft:custom_data.projectile.lifetime;
        }
        
        if (data storage tf2:summon projectile.weapon.components.minecraft:custom_data.projectile.lifetime_range) {
            return run Math.macro_random() 
                       with summon::projectile.weapon.components.minecraft:custom_data.projectile.lifetime_range;
        }

        return Projectile.DEFAULT_LIFETIME;
    }
    function init_arrow() {
        // @needs_macro
        $ summon arrow ^$(spawnX) ^$(spawnY) ^$(spawnZ) {
            Rotation: [$(yaw)f, $(pitch)f],
            Owner: $(owner),
            damage: 0.001,
            pickup: false,
            NoGravity: $(no_gravity),
            Silent: true,
            PierceLevel: 127b,
            PersistenceRequired: true,
            ShotFromCrossbow: true,
            Tags: ["tf2.projectile", "tf2.new"],
            Motion: [$(X)d, $(Y)d, $(Z)d],
            active_effects: [{
                id: "minecraft:invisibility",
                amplifier: false,
                show_particles: false,
                duration: -1
            }],
            Passengers: [{
                id: "minecraft:item_display",
                item: {id: "minecraft:glowstone_dust", components:{
                    "minecraft:custom_model_data": $(CMD), 
                    "minecraft:custom_data": {Motion:[$(X)d, $(Y)d, $(Z)d]}
                }},
                start_interpolation: -1,
                item_display: "ground",
                Tags: ["tf2.new", "tf2.projectile"]
            }]
        };
    }
    function deviation() {
        function retina:math/gimbal_to_matrix;

        retina.__variable__:$horizontal_count = retina.__variable__:$vertical_count = 10;
        retina.__variable__:$spread_least = summon::projectile.deviation.min;
        retina.__variable__:$spread_most = summon::projectile.deviation.max;

        function retina:math/sway_heave_surge/find;
        function retina:math/sway_heave_surge/apply;
    }
    function copy_xz_motion() {
        @s::Motion[0] = vars::Motion[0];
        @s::Motion[2] = vars::Motion[2];
    }
    function compensate_velocity() {
        $velocity = summon::projectile.X * 100;
        $velocity += tf2.now_x:@s;
        $velocity -= tf2.last_x:@s;
        summon::projectile.X = 0.01 * (double) $velocity;

        $velocity = summon::projectile.Z * 100;
        $velocity += tf2.now_z:@s;
        $velocity -= tf2.last_z:@s;
        summon::projectile.Z = 0.01 * (double) $velocity;
    }
    function convection() {
        $velocity = @s::Motion[1] * 1000;
        $accel = execute on passengers run @s::item.components.minecraft:custom_data.projectile.convection.factor * 1000;
        $velocity += $accel;
        @s::Motion[1] = 0.001 * (double) $velocity;
    }

    function check_collision() {
        tf2.batch_number:$local = tf2.batch_number:@s;
        execute as @e[type=#tf2:player_like]
                if score @s tf2.batch_number
                   = $local tf2.batch_number
                unless entity @s[gamemode=spectator]
                run tag @s add tf2.batch; 
        tag @e[type=#tf2:player_like,tag=tf2.batch] add tf2.search;

        // Passes through teammates during first 0.25 seconds
        tf2.team:$temp = tf2.team:@s;
        execute as @e[type=#tf2:player_like,tag=tf2.search]
                unless score @s tf2.team = $temp tf2.team
                run tag @s add tf2.opponent;
        if (tf2.age:@s < 5) {
            tag @e[type=#tf2:player_like,tag=tf2.search,tag=!tf2.opponent] remove tf2.search;
        }

        $collided = false;
        execute on vehicle if data entity @s {inGround: true} run {
            $collided++;
        }

        execute on vehicle at @s as @p[scores={tf2.hits_taken=1..}, tag=tf2.search] run tag @s add tf2.hit;
        execute as @a[tag=tf2.hit] run tf2.hits_taken:@s--;
        if (entity @a[tag=tf2.hit]) {
            $collided += 2;
        }

        if (!$collided) return 0;

        lookup::item = @s::item;
        $_damage_ = lookup::item.components.minecraft:custom_data.attributes.damage.base;
        $_selfDamage_ = lookup::item.components.minecraft:custom_data.projectile.explosion.selfDamage;
        $_maxRamp_ = lookup::item.components.minecraft:custom_data.attributes.damage.maxRamp * 100;
        if (!data storage tf2:lookup item.components.minecraft:custom_data.attributes.damage.maxRamp) $_maxRamp_ = 150;
        $_temporalFalloff_ = lookup::item.components.minecraft:custom_data.attributes.damage.temporalFalloff;
        $_rangeDependent_ = lookup::item.components.minecraft:custom_data.attributes.damage.uniform;
        $_rangeDependent_ ?= execute if score $_rangeDependent_ tf2.var matches 0;

        tag @s[tag=!tf2.ignore_env] add tf2.cleanup;
        vars::weapon_name = lookup::item.components.minecraft:custom_name;

        if (entity @s[tag=!tf2.explosion]) return run {
            this.simple_damage();
        }

        vars::radius = 0.01905 * (double) lookup::item.components.minecraft:custom_data.projectile.explosion.radius;
        this.explode() with vars::;
    }
    function simple_damage() {
        if (!entity @a[tag=tf2.hit_by_projectile,tag=tf2.opponent,scores={tf2.health=1..}]) {return fail;}

        tf2.player.id:$temp = tf2.player.id:@s;
        execute as @a if score @s tf2.player.id = $temp tf2.player.id run tag @s add tf2.origin;
        
        $_finalDamage_ = $_damage_;
        if (!$_temporalFalloff_) expand {
            this.pythagorean_3D();
            Weapons.calculate_falloff();
        }
        if ($_temporalFalloff_) {
            this.temporal_falloff();
        }
        $_finalDamage_ *= $_multiplier_;
        // printf ("mult = &<$_multiplier_>");
        $_finalDamage_ += 99;
        $_finalDamage_ /= 100;

        lookup::damages << {};
        lookup::damages[-1].cause = tf2.player.id:@s;
        lookup::damages[-1].target = tf2.player.id:@p[tag=tf2.hit_by_projectile];
        lookup::damages[-1].amount = $_finalDamage_;
        lookup::damages[-1].kill_verb = "killed";
        lookup::damages[-1].weapon = vars::weapon_name;

        vars::callbacks = @s::item.components.minecraft:custom_data.attributes.on_hit;
        vars::callback = vars::callbacks[0];
        if (data storage tf2:vars callbacks[]) {
            this.callbacks() with vars::;
        }

    }
    function callbacks() {
        // @needs_macro
        vars::callback = vars::callbacks[0];
        $ $(callback);
        vars::callbacks[0].del();
        if (data storage tf2:vars callbacks[]) {
            this.callbacks() with vars::;
        }
    }
    function pythagorean_3D() {
        execute as @e[tag=tf2.origin] at @s summon marker run {
            $X0 = @s::Pos[0] * 100;
            $Y0 = @s::Pos[1] * 100;
            $Z0 = @s::Pos[2] * 100;
            kill;
        }
        execute at @s summon marker run {
            $Xf = @s::Pos[0] * 100;
            $Yf = @s::Pos[1] * 100;
            $Zf = @s::Pos[2] * 100;
            kill;
        }
        $deltaX = $Xf; $deltaX -= $X0; 
        $deltaY = $Yf; $deltaY -= $Y0; 
        $deltaZ = $Zf; $deltaZ -= $Z0; 
        summon::matrix = [
            0f, 0f, 0f, 0f,
            0f, 0f, 0f, 0f,
            0f, 0f, 0f, 0f,
            0f, 0f, 0f, 1f
        ];
        summon::matrix[0] = (float) $deltaX;
        summon::matrix[4] = (float) $deltaY;
        summon::matrix[8] = (float) $deltaZ;
        execute summon item_display run {
            @s::transformation = tf2:summon::matrix;
            retina:output::Distance = 0.01 * (double) @s::transformation.scale[0];
            kill;
        }
    }
    function temporal_falloff() {
        $_multiplier_ = tf2.age:@s; 
        $_multiplier_ *= 100;
        $_multiplier_ /= tf2.lifetime:@s;
        $_multiplier_ *= -1;
        $_multiplier_ += 100;
        $_multiplier_ > 50;
        $_multiplier_ < 100;
    }
    function explode() {
        particle minecraft:explosion ~ ~ ~;
        $playersHurt = $_totalDamage_ = 0;
        tf2.player.id:$temp = tf2.player.id:@s;
        execute as @a if score @s tf2.player.id = $temp tf2.player.id expand {
            tag @s add tf2.origin;
            tag @s add tf2.opponent;
        }

        $ execute at @s as @e[type=#tf2:player_like,tag=tf2.opponent,distance=..$(radius)] run this.wall_check();
        tag @a remove tf2.origin;
    }
    function wall_check() {
        tag @s add tf2.player;
        execute summon marker run {
            @s::NoAI = 1b;
            retina:input:: += {MaxRecursionDepth: 127b, VerticalCount: 1, HorizontalCount: 1, CenteredCount: 0, TargetEntities: true};
            rotate @s facing entity @e[tag=tf2.player,limit=1] eyes;
            function retina:traverse/setup;
            kill @s;
        }
        tag @s remove tf2.player;
        if (entity @s[tag=tf2.hit_by_projectile]) expand {
            retina:output::Distance = 0;
            this.splash_damage();
        }
        if (!entity @s[tag=tf2.hit_by_projectile] && data storage retina:output {Target: "ENTITY"} && Object.isEqual("retina:output", "TargetedEntity.UUID", "@e[type=#tf2:player_like,tag=tf2.check,limit=1]", "UUID")) {
            this.splash_damage();
        } 
    }
    function splash_damage() {
        $_finalDamage_ = this.calculate_splash();
        printf(" $_finalDamage_ = &<$_finalDamage_>");

        if ($_finalDamage_ > 0) {
            $playersHurt++;
        }

        lookup::damages << {};
        lookup::damages[-1].cause = tf2.player.id:@a[tag=tf2.origin,limit=1];
        lookup::damages[-1].target = tf2.player.id:@s;
        lookup::damages[-1].amount = $_finalDamage_;
        lookup::damages[-1].kill_verb = "blew up";
        lookup::damages[-1].weapon = vars::weapon_name;

        this.knockback();
    }
    function calculate_splash() {
        $_centerDist_ = retina:output::Distance * EVAL (1 / 0.01905);
        printf("$_centerDist_ = &<$_centerDist_>");
        $_splashEdge_ = vars::radius * EVAL (1 / 0.01905);
        printf("$_splashEdge_ = &<$_splashEdge_>");
        this.pythagorean_3D();
        printf("$_damage_ = &<$_damage_>");
        $_finalDamage_ = $_damage_;
        Weapons.calculate_falloff();
        $_finalDamage_ *= $_multiplier_;
        printf ("mult = &<$_multiplier_>");
        $_finalDamage_ += 99;
        $_finalDamage_ /= 100;
        printf("damage after multiplier = &<$_finalDamage_>");
        if (entity @s[tag=tf2.hit_by_projectile,tag=!tf2.origin]) {
            return run $_finalDamage_.get();
        }

        if (entity @s[tag=tf2.origin]) {
            $_finalDamage_ = $_selfDamage_;
        }
        printf("selfDamage = &<$_selfDamage_>");
        $_splash_multiplier_ = $_centerDist_;
        $_splash_multiplier_ *= 50;
        $_splash_multiplier_ /= $_splashEdge_;
        $_splash_multiplier_ *= -1;
        $_splash_multiplier_ += 100;
        printf("splash = &<$_splash_multiplier_>");
        $_finalDamage_ *= $_splash_multiplier_;
        $_finalDamage_ += 99;
        $_finalDamage_ /= 100;
        printf("damage after splash multiplier = &<$_finalDamage_>");
        if (!entity @s[tag=tf2.origin,scores={tf2.class=4..5}]) {
            return run $_finalDamage_.get();
        }

        // Less damage from your own explosions if nobody else is hurt
        // Soldier: 3/5 as much, Demo: 3/4 as much
        if ($playersHurt > 1) {
            return run $_finalDamage_.get();
        }
        $_finalDamage_ *= 3;
        $_temp_ = 9;
        $_temp_ -= tf2.class:@s;
        $_finalDamage_ /= $_temp_;
        printf("damage after self multiplier = &<$_finalDamage_>");
        return run $_finalDamage_.get();
    }
    function knockback() {
        player_motion.api.launch:$x = retina.__variable__:$output_vec3.X;
        player_motion.api.launch:$x *= EVAL (12000 / Retina.SCALE);
        player_motion.api.launch:$y = retina.__variable__:$output_vec3.Y;
        player_motion.api.launch:$y *= EVAL (12000 / Retina.SCALE);
        player_motion.api.launch:$z = retina.__variable__:$output_vec3.Z;
        player_motion.api.launch:$z *= EVAL (12000 / Retina.SCALE);
        function player_motion:api/launch_xyz;
    }

    function remove_tags() {
        tag @s remove tf2.batch;
        tag @s remove tf2.search;
        tag @s remove tf2.opponent;
        tag @s remove tf2.in_voxel;
        tag @s remove tf2.hit_by_projectile;
        tag @s remove tf2.closest_hit;
    }
    function cleanup() {
        execute on vehicle run this.cleanup();
        kill @s;
    }
}