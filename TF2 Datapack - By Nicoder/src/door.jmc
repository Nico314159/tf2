class Door {
    function summon() {
        $ execute positioned $(x) $(y) $(z) align xyz run summon item_display ~ ~ ~ {
            Tags: ["tf2.door", "tf2.newest"],
            item: {
                id: "minecraft:gold_ingot",
                count: 1,
                components: {
                    "minecraft:custom_model_data": 100,
                    "minecraft:custom_data": {
                        size_x: $(size_x)f,
                        size_y: $(size_y)f,
                        size_z: $(size_z)f,
                        path: $(path)
            }   }   },
            item_display: "ground",
            transformation: {
                left_rotation: [0f, 0f, 0f, 1f],
                right_rotation: [0f, 0f, 0f, 1f],
                translation: [0f, 0f, 0f],
                scale: [$(size_x), $(size_y), $(size_z)]
            }
        };
        $ execute as @e[tag=tf2.door,tag=tf2.newest] 
                  run this.initialize_path({wait: $(wait)});
    }

    @lazy function determine_fill_coords() {
        Hardcode.repeatLists(["|axis|", "|#|"], () => {
            $|axis|_from = lookup::entity.Pos[|#|];
            $|axis|_to = lookup::entity.item.components.minecraft:custom_data.size_|axis|;
            $|axis|_to > 1;
            $|axis|_to += $|axis|_from;
            $|axis|_to --;
            lookup::entity.item.components.minecraft:custom_data.fill.|axis|_from = $|axis|_from;
            lookup::entity.item.components.minecraft:custom_data.fill.|axis|_to   = $|axis|_to;
        }, [["x", "y", "z"], ["0", "1", "2"]]);
    }

    function initialize_path() {
        $ scoreboard players set @s tf2.wait $(wait);
        tag @s remove tf2.newest;
        lookup::entity = @s::{};
        lookup::entity.item.components.minecraft:custom_data.goal_positions.closed = 0f;
        lookup::entity.item.components.minecraft:custom_data.goal_positions.open = (float) lookup::entity.item.components.minecraft:custom_data.size_y;
        this.determine_fill_coords();
        @s::item.components = lookup::entity.item.components;
    }

    function tick() {
        particle flame ~ ~ ~;
        lookup::entity = @s::{};
        if (entity @s[tag=!tf2.anim_over]) {
            this.animate();
        }
        $players_nearby = this.check_for_players() with lookup::entity.item.components.minecraft:custom_data;
        tf2.time_open:@s[tag=tf2.is_open]++;
        if ($players_nearby && entity @s[tag=!tf2.is_open]) {
            this.open();
        }
        if (!$players_nearby && tf2.time_open:@s[scores={tf2.wait=0..}] >= tf2.wait:@s) {
            this.close();
        }
        if (entity @s[tag=tf2.anim_over,tag=!tf2.is_open]) {
            this.place_blocks() with @s::item.components.minecraft:custom_data.fill;
        }
    }

    function check_for_players() {
        $ execute positioned ~-.5 ~-.5 ~-.5
                  if entity @a[dx=$(size_x), dy=$(size_y), dz=$(size_z)]
                  run return true;
        return false;
    }

    @lazy function calculate_accel(vertex) {
        tf2.door.vel:@s = 0;
        tf2.door.accel:@s = lookup::entity.item.components.minecraft:custom_data.goal_positions.$vertex[1] * 10000;
        tf2.door.pos:@s = lookup::entity.transformation.translation[1] * 10000;
        tf2.door.accel:@s -= tf2.door.pos:@s;
        tf2.door.accel:@s *= 2;
        tf2.door.accel:@s /= EVAL(Door.ANIM_LENGTH ** 2);
    }

    function open() {
        tag @s add tf2.is_open;
        tag @s remove tf2.anim_over;
        this.calculate_accel(open);
        this.determine_fill_coords();
        this.remove_blocks() with @s::item.components.minecraft:custom_data.fill;
    }
    function close() {
        tag @s remove tf2.is_open;
        tag @s remove tf2.anim_over;
        tf2.time_open:@s = 0;
        this.calculate_accel(closed);
    }
    function remove_blocks() {
        $ fill $(x_from) $(y_from) $(z_from)
               $(x_to)   $(y_to)   $(z_to)
               air replace white_stained_glass;
    }
    function place_blocks() {
        $ fill $(x_from) $(y_from) $(z_from)
               $(x_to)   $(y_to)   $(z_to)
               white_stained_glass replace air;
    }

    function animate() {
        tf2.door.pos:@s = lookup::entity.transformation.translation[1] * 10000;
        $closed_goal = lookup::entity.item.components.minecraft:custom_data.goal_positions.closed[1] * 10000;
        $min_goal = $max_goal = lookup::entity.item.components.minecraft:custom_data.goal_positions.open[1] * 10000;
        $min_goal < $closed_goal;
        $max_goal > $closed_goal;

        tf2.door.vel:@s += tf2.door.accel:@s; 
        tf2.door.pos:@s += tf2.door.vel:@s;
        this.clamp();
        this.projection();
    }
    function clamp() {
        if (tf2.door.pos:@s > $min_goal && tf2.door.pos:@s < $max_goal) {
            return true;
        }
        tf2.door.vel:@s = tf2.door.accel:@s = 0;
        tf2.door.pos:@s > $min_goal;
        tf2.door.pos:@s < $max_goal;
        tag @s add tf2.anim_over;
    }
    function projection() {
        if (!String.isEqual("tf2:lookup", "entity.item.components.minecraft:custom_data.path", "linear")) {
            return fail;
        }
        @s::transformation.translation[1] = 0.0001 * (float) tf2.door.pos:@s;
    }
}