class Class.Scout {
    function give() {
        Item.replaceEntity(scattergun, @s, "hotbar.0");
        Item.replaceEntity(pistol, @s, "hotbar.1");
        Item.replaceEntity(baseball_bat, @s, "hotbar.2");

        tf2.primary_maxClip:@s = execute run tf2.primary_clip:@s = data get entity @s Inventory[0].tag.attributes.clip;
        tf2.primary_ammo:@s = data get entity @s Inventory[0].tag.attributes.ammo;
        tf2.secondary_maxClip:@s = execute run tf2.secondary_clip:@s = data get entity @s Inventory[1].tag.attributes.clip;
        tf2.secondary_ammo:@s = data get entity @s Inventory[1].tag.attributes.ammo;
    }
    function tick() {
        tf2.last_slot:@s = tf2.current_slot:@s;
        tf2.last_slot:@s ??= 0;
        tf2.current_slot:@s = data get entity @s SelectedItemSlot;

        if (tf2.last_slot:@s != tf2.current_slot:@s) {
            tf2.attack_delay:@s = data get entity @s SelectedItem.tag.attributes.deployTime 10000;
            if (!data entity @s SelectedItem.tag.attributes.deployTime) tf2.attack_delay:@s = 10000;
            tf2.consecutive_reload:@s = false;
        }

        Weapons.get_ammo();
        Weapons.actionbar();
        Weapons.set_ammo(); 
        
        if (predicate tf2:grounded) tag @s add tf2.can_double_jump;
        if (tf2.elytra_detect:@s >= 1) {
            retina.__variable__:$input_pitch = data get entity @s Rotation[1] 10;
            retina.__variable__:$input_yaw = data get entity @s Rotation[0] 10;
            function retina:math/gimbal_to_vec;
            delta.api.launch:$x = retina.__variable__:$output_vec3.X;
            delta.api.launch:$x *= 2;
            delta.api.launch:$y = 5000;
            delta.api.launch:$z = retina.__variable__:$output_vec3.Z;
            delta.api.launch:$z *= 2;
            function delta:api/launch_xyz;

            Item.clear(elytra, @s);
            tf2.elytra_detect:@s = 0;
            tf2.permanent.double_jumps:@s++;
            tag @s remove tf2.can_double_jump;
        }

        Class.Scout.inventory_lock();
    }
    function inventory_lock() {
        Item.replaceEntity(scattergun, @s, "hotbar.0");
        $_count_ = Item.clear(scattergun, @s, 0);
        if ($_count_ != 1) Item.clear(scattergun, @s);
        if ($_count_ != 1) Item.replaceEntity(scattergun, @s, "hotbar.0");

        Item.replaceEntity(pistol, @s, "hotbar.1");
        $_count_ = Item.clear(pistol, @s, 0);
        if ($_count_ != 1) Item.clear(pistol, @s);
        if ($_count_ != 1) Item.replaceEntity(pistol, @s, "hotbar.1");

        Item.replaceEntity(baseball_bat, @s, "hotbar.2");
        $_count_ = Item.clear(baseball_bat, @s, 0);
        if ($_count_ != 1) Item.clear(baseball_bat, @s);
        if ($_count_ != 1) Item.replaceEntity(baseball_bat, @s, "hotbar.2");

        if (entity @s[tag=tf2.can_double_jump]) {
            Item.replaceEntity(elytra, @s, "armor.chest");
            $_count_ = Item.clear(elytra, @s, 0);
            if ($_count_ != 1) Item.clear(elytra, @s);
            if ($_count_ != 1) Item.replaceEntity(elytra, @s, "armor.chest");
        }
    }
}