new trim_pattern(medic) {
	"asset_id": "tf2:medic",
	"description": {
		"translate": "trim_pattern.tf2.medic"
	},
	"template_item": "minecraft:stick"
}
generate_body_model(medic);

JMC.python(`
make_weapon(
    Class.MEDIC, slot=0, name='Syringe Gun',
	display_name='Syringe Gun (WIP)',
    attributes={
		'damage': {'base': 10, 'maxRamp': 1.2}, 
		'attackDelay': 0.105, 
		'reloadDelay': [1.305, 1.305],
		'clip': 40, 'ammo': 160, 
		'interpolate_rmb': 1,
		'isProjectile': true
	},
	projectile={
		'spawn': [0.0, -0.45, 0.06], 
		'speed': 990,
		'deviation': {'min': 0, 'max': 200}, 
		'gravity': true,
		'ignore_env': true,
		'unreflectable': true
	},
	controls={'reload': 3},
	team_specific=True
)
`, jmc=true);

JMC.python(`
make_weapon(
    Class.MEDIC, slot=1, name='Medigun',
	display_name="Medi Gun (DOESN'T WORK YET)",
	team_specific=True
)
`, jmc=true);

JMC.python(`
make_weapon(
    Class.MEDIC, slot=2, 
    name='Bonesaw',
    attributes={'damage': {'base': 65}, 'attackDelay': 0.8, 'range': 3.2, 'isMelee': true}
)
`, jmc=true);

class Class.Medic {

	function give() {
		clear @s;
		loot replace entity @s hotbar.0 loot tf2:class/medic/syringe_gun;
		loot replace entity @s hotbar.1 loot tf2:class/medic/medigun;
		loot replace entity @s hotbar.2 loot tf2:class/medic/bonesaw;
		loot replace entity @s armor.legs loot tf2:class/medic/_model;

		lookup::inventory = @s::Inventory;
		tf2.primary_maxClip:@s = tf2.primary_clip:@s = lookup::inventory[0].components.minecraft:custom_data.attributes.clip;
		tf2.primary_maxAmmo:@s = tf2.primary_ammo:@s = lookup::inventory[0].components.minecraft:custom_data.attributes.ammo;
		tf2.secondary_maxClip:@s = tf2.secondary_clip:@s = lookup::inventory[1].components.minecraft:custom_data.attributes.clip;
		tf2.secondary_maxAmmo:@s = tf2.secondary_ammo:@s = lookup::inventory[1].components.minecraft:custom_data.attributes.ammo;
	}
	@lazy
	function tick() {
		Weapons.get_ammo();
		HUD.actionbar();
		Weapons.set_ammo();

		this.inventory_lock();

		$regen_modulo = 0008it54g_p_join:$__global__;
		$regen_modulo %= 20;
		if ($regen_modulo == 0) {
			this.natural_regen();
		}
	}
	function inventory_lock() {
		item replace entity @s weapon.offhand with air;
		
		loot replace entity @s hotbar.0 loot tf2:class/medic/syringe_gun;
		$_count_ = clear @s crossbow[custom_model_data=91001|custom_model_data=91002] 0;
		if ($_count_ != 1) expand {
			clear @s crossbow[custom_model_data=91001|custom_model_data=91002];
			loot replace entity @s hotbar.0 loot tf2:class/medic/syringe_gun;
		}

		loot replace entity @s hotbar.1 loot tf2:class/medic/medigun;
		$_count_ = clear @s crossbow[custom_model_data=92001|custom_model_data=92002] 0;
		if ($_count_ != 1) expand {
			clear @s crossbow[custom_model_data=92001|custom_model_data=92002];
			loot replace entity @s hotbar.1 loot tf2:class/medic/medigun;
		}

		loot replace entity @s hotbar.2 loot tf2:class/medic/bonesaw;
		$_count_ = clear @s snowball[custom_model_data=93000] 0;
		if ($_count_ != 1) expand {
			clear @s snowball[custom_model_data=93000];
			loot replace entity @s hotbar.2 loot tf2:class/medic/bonesaw;
		}

		loot replace entity @s armor.legs loot tf2:class/medic/_model;
		$_count_ = clear @s iron_leggings 0;
		if ($_count_ != 1) expand {
			clear @s iron_leggings;
			loot replace entity @s armor.legs loot tf2:class/medic/_model;
		}

		loot replace entity @s armor.head loot tf2:head;
		$_count_ = clear @s paper 0;
		if ($_count_ != 1) expand {
			clear @s paper;
			loot replace entity @s armor.head loot tf2:head;
		}		
	}
	function natural_regen() {
		tf2.health:@s += 3;
		tf2.health:@s < tf2.max_health:@s;
	}
}