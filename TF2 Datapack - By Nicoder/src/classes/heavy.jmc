new trim_pattern(heavy) {
    "asset_id": "tf2:heavy",
    "description": {
        "translate": "trim_pattern.tf2.heavy"
    },
    "template_item": "minecraft:iron_block"
}
generate_body_model(heavy);

JMC.python(`
make_weapon(
    Class.HEAVY, slot=0, name='minigun_decoy',
    base_item="minecraft:crossbow",
    display_name={
        "translate": "tf2.minigun",
        "fallback": "Minigun (rev up with %s)",
        "with": [{"keybind": "key.swapOffhand"}],
        "color": "gray",
        "italic": true
    },
    attributes=[],
    extra=[{
        "function": "minecraft:set_custom_data",
        "tag": "{kind: fake}"
    }]
)
`, jmc=true);

JMC.python(`
make_weapon(
    Class.HEAVY, slot=0, name='minigun_spinning',
    display_name="Minigun",
    base_item="minecraft:crossbow",
    attributes={'damage': {'base': 9, 'maxRamp': 1.5}, 'attackDelay': 0.1, 'spinupDelay': 0.87, 'clip': 200, 'ammo': 0, 'interpolate_rmb': 2},
    controls={'reload': 0},
    cmd_bump=1,
    extra=[
        {
            "function": "minecraft:set_custom_data",
            "tag": "{kind: real}"
        },
        {
            "function": "minecraft:reference",
            "name": "tf2:load_crossbow",
            "conditions": [
                {
                    "condition": "minecraft:entity_scores",
                    "entity": "this",
                    "scores": {
                        "tf2.time_revved": {
                            "min": {
                                "type": "minecraft:score",
                                "target": "this",
                                "score": "tf2.rev_threshold",
                                "scale": 1
                            }
                        }
                    }
                }
            ]
        }
    ]
)
`, jmc=true);

JMC.python(`
make_weapon(
    Class.HEAVY, slot=1, name='Shotgun', bullets=[3, 3, 1], spread=[100, 250],
    attributes={'damage': {'base': 6, 'maxRamp': 1.5}, 'attackDelay': 0.625, 'reloadDelay': [0.87, 0.51], 'clip': 6, 'ammo': 32}
)
`, jmc=true);

JMC.python(`
make_weapon(
    Class.HEAVY, slot=2, 
    name='right_fist',
    display_name="Fists",
    attributes={'damage': {'base': 65}, 'attackDelay': 0.8, 'range': 3.2, 'isMelee': true}
)
`, jmc=true);

JMC.python(`
make_weapon(
    Class.HEAVY, slot=2, 
    name='left_fist',
    display_name="",
    base_item="minecraft:clay_ball",
    extra=[{
        "function": "minecraft:set_custom_data",
        "tag": "{ attributes: {isMelee: true} }"
    }],
    cmd_bump=1
)
`, jmc=true);




class Class.Heavy {
    new predicate(is_revving) {
        "condition": "minecraft:all_of",
        "terms": [
            {
                "condition": "minecraft:entity_properties",
                "entity": "this",
                "predicate": {
                    "equipment": {
                        "mainhand": {
                            "items": [
                                "minecraft:crossbow"
                            ],
                            "predicates": {
                                "minecraft:custom_data": "{kind: \"real\"}"
                            }
                        }
                    }
                }
            },
            {
                "condition": "minecraft:entity_properties",
                "entity": "this",
                "predicate": {
                    "equipment": {
                        "offhand": {
                            "items": [
                                "minecraft:crossbow"
                            ],
                            "predicates": {
                                "minecraft:custom_data": "{kind: \"fake\"}"
                            }
                        }
                    }
                }
            }
        ]
    }

    function give() {
        clear @s;
        loot replace entity @s hotbar.0 loot tf2:class/heavy/minigun_decoy;
        loot replace entity @s weapon.offhand loot tf2:class/heavy/minigun_spinning;
        loot replace entity @s hotbar.1 loot tf2:class/heavy/shotgun;
        loot replace entity @s hotbar.2 loot tf2:class/heavy/right_fist;
        loot replace entity @s armor.legs loot tf2:class/heavy/_model;

        lookup::inventory = @s::Inventory;
        tf2.primary_maxClip:@s = tf2.primary_clip:@s = lookup::inventory[{Slot:-106b}].components.minecraft:custom_data.attributes.clip;
        tf2.primary_maxAmmo:@s = tf2.primary_ammo:@s = lookup::inventory[{Slot:-106b}].components.minecraft:custom_data.attributes.ammo;
        tf2.secondary_maxClip:@s = tf2.secondary_clip:@s = lookup::inventory[1].components.minecraft:custom_data.attributes.clip;
        tf2.secondary_maxAmmo:@s = tf2.secondary_ammo:@s = lookup::inventory[1].components.minecraft:custom_data.attributes.ammo;
        tf2.rev_threshold:@s = lookup::inventory[{Slot:-106b}].components.minecraft:custom_data.attributes.spinupDelay * 20000;
    }
    @lazy
    function tick() {
        Weapons.get_ammo();
        HUD.actionbar();
        Weapons.set_ammo();

        attribute @s[predicate=tf2:class/heavy/is_revving] minecraft:generic.movement_speed modifier add tf2:slow_while_revving -0.476 add_multiplied_total;
        attribute @s[predicate=!tf2:class/heavy/is_revving] minecraft:generic.movement_speed modifier remove tf2:slow_while_revving;
        attribute @s[predicate=tf2:class/heavy/is_revving] minecraft:generic.jump_strength modifier add tf2:no_jump -1 add_multiplied_total;
        attribute @s[predicate=!tf2:class/heavy/is_revving] minecraft:generic.jump_strength modifier remove tf2:no_jump;
        tf2.time_revved:@s[predicate=tf2:class/heavy/is_revving] += 1000;
        
        if (tf2.current_slot:@s != 0 && tf2.time_revved:@s != 0) {
            tf2.attack_delay:@s += tf2.rev_threshold:@s;
            tf2.time_revved:@s = 0;
        }

        tf2.time_revved:@s[predicate=!tf2:class/heavy/is_revving] = 0;
        Class.Heavy.inventory_lock();
    }
    function inventory_lock() {
        loot replace entity @s hotbar.1 loot tf2:class/heavy/shotgun;
        $_count_ = clear @s crossbow[custom_model_data=62000] 0;
        if ($_count_ != 1) clear @s crossbow[custom_model_data=62000];
        if ($_count_ != 1) loot replace entity @s hotbar.1 loot tf2:class/heavy/shotgun;

        loot replace entity @s hotbar.2 loot tf2:class/heavy/right_fist;
        $_count_ = clear @s snowball[custom_model_data=63000] 0;
        if ($_count_ != 1) clear @s snowball[custom_model_data=63000];
        if ($_count_ != 1) loot replace entity @s hotbar.2 loot tf2:class/heavy/right_fist;

        loot replace entity @s armor.legs loot tf2:class/heavy/_model;
        $_count_ = clear @s iron_leggings 0;
        if ($_count_ != 1) clear @s iron_leggings;
        if ($_count_ != 1) loot replace entity @s armor.legs loot tf2:class/heavy/_model;

        loot replace entity @s armor.head loot tf2:head;
        $_count_ = clear @s paper 0;
        if ($_count_ != 1) clear @s paper;
        if ($_count_ != 1) loot replace entity @s armor.head loot tf2:head;

        if (tf2.current_slot:@s == 2) {
            loot replace entity @s weapon.offhand loot tf2:class/heavy/left_fist;
            $_count_ = clear @s clay_ball[custom_model_data=63000] 0;
            if ($_count_ != 1) clear @s clay_ball[custom_model_data=63000];
            if ($_count_ != 1) loot replace entity @s weapon.offhand loot tf2:class/heavy/left_fist;
        } else {
            clear @s clay_ball[custom_model_data=63000];
        }

        $_crossbow_id_ = @s::Inventory[-1].components."minecraft:custom_model_data" * 0.001;

        if (predicate tf2:class/heavy/is_revving && $_crossbow_id_ === 61 && tf2.current_slot:@s == 0) return run {
            loot replace entity @s hotbar.0 loot tf2:class/heavy/minigun_spinning;
            $_count_ = clear @s crossbow[custom_model_data=61001, custom_data={kind: "real"}] 0;
            if ($_count_ != 1) clear @s crossbow[custom_model_data=61001, custom_data={kind: "real"}];
            if ($_count_ != 1) loot replace entity @s hotbar.0 loot tf2:class/heavy/minigun_spinning;

            loot replace entity @s weapon.offhand loot tf2:class/heavy/minigun_decoy;
            $_count_ = clear @s crossbow[custom_model_data=61000, custom_data={kind: "fake"}] 0;
            if ($_count_ != 1) clear @s crossbow[custom_model_data=61000, custom_data={kind: "fake"}];
            if ($_count_ != 1) loot replace entity @s weapon.offhand loot tf2:class/heavy/minigun_decoy;
        }

        loot replace entity @s hotbar.0 loot tf2:class/heavy/minigun_decoy;
        $_count_ = clear @s crossbow[custom_model_data=61000, custom_data={kind: "fake"}] 0;
        if ($_count_ != 1) clear @s crossbow[custom_model_data=61000, custom_data={kind: "fake"}];
        if ($_count_ != 1) loot replace entity @s hotbar.0 loot tf2:class/heavy/minigun_decoy;

        if (tf2.current_slot:@s != 0) return run clear @s crossbow[custom_data={kind: "real"}];

        loot replace entity @s weapon.offhand loot tf2:class/heavy/minigun_spinning;
        $_count_ = clear @s crossbow[custom_model_data=61001, custom_data={kind: "real"}] 0;
        if ($_count_ != 1) clear @s crossbow[custom_model_data=61001, custom_data={kind: "real"}];
        if ($_count_ != 1) loot replace entity @s weapon.offhand loot tf2:class/heavy/minigun_spinning;
    }
}