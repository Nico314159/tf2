new trim_pattern(spy) {
    "asset_id": "tf2:spy",
    "description": {
        "translate": "trim_pattern.tf2.spy"
    },
    "template_item": "minecraft:stick"
}
generate_body_model(spy);


JMC.python(
    `
    import json
    classes = ('Sniper', 'Scout', 'Heavy', 'Soldier', 'Spy', 'Pyro')
    ids = (2, 3, 6, 4, 1, 7)

    pages = []
    for (color, COLOR, N) in zip(('red', 'blue'), ('RED', 'BLU'), (1, 2)):
        pages.append([
            {
                "text": f"[{COLOR} {class_name}]\\n\\n",
                "color": f"{color}",
                "bold": True,
                "clickEvent": {
                    "action": "run_command", 
                    "value": f"/trigger disguise set {N * 10 + id}"
                }
            }
            for (class_name, id) in zip(classes, ids)
        ])
        
    r1 = {"function": "minecraft:set_written_book_pages", "pages": pages, "mode": "replace_all"}
    b1 = {"function": "minecraft:set_written_book_pages", "pages": list(reversed(pages)), "mode": "replace_all"}
    emit(f'new item_modifier(class.spy.red_menu) {json.dumps(b1)}')
    emit(f'new item_modifier(class.spy.blu_menu) {json.dumps(r1)}')
    `,
    jmc=true
);

class Class.Spy {
    new loot_table(revolver) {
        "pools": [{
            "rolls": 1,
            "entries": [
                {
                    "type": "minecraft:loot_table",
                    "value": "tf2:crossbow_base",
                    "functions": [
                        {
                            "function": "minecraft:set_name",
                            "name": {
                                "text": "Revolver",
                                "color": "gray",
                                "italic": true
                            }
                        },
                        {
                            "function": "minecraft:set_components",
                            "components": {
                                "minecraft:custom_model_data": 11000,
                                "minecraft:unbreakable": {"show_in_tooltip": false}
                            }
                        },
                        {
                            "function": "minecraft:set_custom_data",
                            "tag": "{
                                retina: {HorizontalCount: 1, VerticalCount: 1, CenteredCount: 0, EndpointEntity: true, TargetEntities: true, SpreadFactor: [25, 50], MaxRecursionDepth: 100},
                                attributes: {damage: {base: 40, maxRamp: 1.5}, attackDelay: 0.5d, reloadDelay: [1.133d, 1.133d], clip: 6, ammo: 24, spreadRecovery: 25},
                                controls: {main_fire: true, alt_fire: false, reload: 3}
                            }"
                        }
                    ]
                }
            ]
        }]
    }
    new loot_table(sapper) {
        "pools": [{
            "rolls": 1,
            "entries": [
                {
                    "type": "minecraft:item",
					"name": "minecraft:clay_ball",
                    "functions": [
                        {
                            "function": "minecraft:set_name",
                            "name": {
                                "text": "Sapper (not yet implemented)",
                                "color": "gray",
                                "italic": true
                            }
                        },
                        {
                            "function": "minecraft:set_components",
                            "components": {
                                "minecraft:custom_model_data": 12000,
                                "minecraft:unbreakable": {"show_in_tooltip": false}
                            }
                        }
                    ]
                }
            ]
        }]
    }
    new loot_table(butterfly_knife) {
        "pools": [{
            "rolls": 1,
            "entries": [
                {
                    "type": "minecraft:loot_table",
                    "value": "tf2:melee_base",
                    "functions": [
                        {
                            "function": "minecraft:set_name",
                            "name": {
                                "text": "Butterfly Knife",
                                "color": "gray",
                                "italic": true
                            }
                        },
                        {
                            "function": "minecraft:set_components",
                            "components": {
                                "minecraft:custom_model_data": 13000,
                                "minecraft:unbreakable": {"show_in_tooltip": false}
                            }
                        },
                        {
                            "function": "minecraft:set_custom_data",
                            "tag": "{
                                retina: {HorizontalCount: 1, VerticalCount: 1, CenteredCount: 0, EndpointEntity: false, TargetEntities: true, SpreadFactor: [0, 0], MaxRecursionDepth: 5},
                                attributes: {damage: {base: 40}, attackDelay: 0.8d, range: 3.2d, isMelee: true, canBackstab: false},
                                controls: {main_fire: true, alt_fire: false, reload: 0}
                            }"
                        }
                    ]
                }
            ]
        }]
    }
    new item_modifier(raise_knife) [
        {
            "function": "minecraft:set_custom_data",
            "tag": "{attributes: {canBackstab: true}}"
        },
        {
            "function": "minecraft:set_custom_model_data",
            "value": {
                "type": "minecraft:score",
                "target": {
                    "type": "minecraft:fixed",
                    "name": "$CMD"
                },
                "score": "tf2.var",
                "scale": 1
            }
        }
    ];
    
    new loot_table(disguise_kit) {
        "pools": [{
            "rolls": 1,
            "entries": [
                {
                    "type": "minecraft:item",
					"name": "minecraft:written_book",
                    "functions": [
                        {
                            "function": "minecraft:set_name",
                            "name": {
                                "text": "Disguise Kit",
                                "color": "gray",
                                "italic": true
                            }
                        },
                        {
                            "function": "minecraft:set_components",
                            "components": {
                                "minecraft:custom_model_data": 14000,
                                "minecraft:unbreakable": {"show_in_tooltip": false},
                                "minecraft:enchantment_glint_override": false
                            }
                        },
                        {
							"function": "minecraft:reference",
							"name": "tf2:class/spy/red_menu",
							"conditions": [
								{
									"condition": "minecraft:entity_scores",
									"entity": "this",
									"scores": {"tf2.team": 1}
								}
							]
						},
						{
							"function": "minecraft:reference",
							"name": "tf2:class/spy/blu_menu",
							"conditions": [
								{
									"condition": "minecraft:entity_scores",
									"entity": "this",
									"scores": {"tf2.team": 2}
								}
							]
						}
                    ]
                }
            ]
        }]
    }
    new loot_table(invis_watch) {
        "pools": [{
            "rolls": 1,
            "entries": [
                {
                    "type": "minecraft:item",
					"name": "minecraft:clay_ball",
                    "functions": [
                        {
                            "function": "minecraft:set_name",
                            "name": {
                                "translate": "tf2.invis_watch",
                                "fallback": "Invis Watch (%s to cloak)",
                                "with": [{"keybind": "key.swapOffhand"}],
                                "color": "gray",
                                "italic": true
                            }
                        },
                        {
                            "function": "minecraft:set_components",
                            "components": {
                                "minecraft:custom_model_data": 15000,
                                "minecraft:max_damage": 600,
                                "minecraft:damage": 0,
                                "minecraft:max_stack_size": 1
                            }
                        },
                        { 
                            "function": "minecraft:set_custom_data", 
                            "tag": "{cloak: 'cloak'}" 
                        },
                        {
							"function": "minecraft:set_damage",
							"damage": {
								"type": "minecraft:score",
								"target": "this",
								"score": "tf2.cloak",
								"scale": 0.001666
							}
						}
                    ]
                }
            ]
        }]
    }
    new loot_table(invis_watch_gui_only) {
        "pools": [{
            "rolls": 1,
            "entries": [
                {
                    "type": "minecraft:loot_table",
					"value": "tf2:class/spy/invis_watch",
                    "functions": [
                        {
                            "function": "minecraft:set_components", 
                            "components": {"minecraft:custom_model_data": 15001} 
                        },
                        { 
                            "function": "minecraft:set_custom_data", 
                            "tag": "{cloak: 'uncloak'}" 
                        }
                    ]
                }
            ]
        }]
    }

    function give() {
        clear @s;
        loot replace entity @s hotbar.0 loot tf2:class/spy/revolver;
        loot replace entity @s hotbar.1 loot tf2:class/spy/sapper;
        loot replace entity @s hotbar.2 loot tf2:class/spy/butterfly_knife;
        loot replace entity @s hotbar.3 loot tf2:class/spy/disguise_kit;
        loot replace entity @s weapon.offhand loot tf2:class/spy/invis_watch;
        loot replace entity @s armor.legs loot tf2:class/spy/_model;

        lookup::inventory = @s::Inventory;
        tf2.primary_maxClip:@s = tf2.primary_clip:@s = lookup::inventory[0].components.minecraft:custom_data.attributes.clip;
        tf2.primary_maxAmmo:@s = tf2.primary_ammo:@s = lookup::inventory[0].components.minecraft:custom_data.attributes.ammo;
        tf2.secondary_maxClip:@s = tf2.secondary_clip:@s = tf2.secondary_maxAmmo:@s = tf2.secondary_ammo:@s = 0;
        tf2.is_invisible:@s = 0;
        tag @s remove tf2.disguised;
        tf2.cloak:@s = FULL_CLOAK;
    }

    function cloak() {
        if (tf2.cloak:@s <= 0) {
            return run swap_hands();
        }
        tf2.is_invisible:@s = 1;
        effect give @s[scores={tf2.is_invisible=1}] invisibility infinite 0 true;
    }
    function uncloak() {
        tf2.is_invisible:@s = 0;
        effect clear @s[scores={tf2.is_invisible=0}] invisibility;
    }

    function tick() {
        Weapons.get_ammo();
        HUD.actionbar();
        Weapons.set_ammo();

        if (entity @s[tag=tf2.disguised]) {
            this.nametag.follow();
        }
        if (entity @s[tag=!tf2.disguised]) {
            this.nametag.delete();
        }

        // Toggle cloak by switching hands
        if (items entity @s[scores={tf2.is_invisible=0}] weapon.mainhand clay_ball[custom_data~{cloak: 'cloak'}]) {
            this.cloak();
        }
        if (items entity @s[scores={tf2.is_invisible=1}] weapon.mainhand clay_ball[custom_data~{cloak: 'uncloak'}]) {
            this.uncloak();
        }

        // Cloak drain and replenishment over time
        tf2.cloak:@s[scores={tf2.is_invisible=0, tf2.cloak=..599}]++;
        tf2.cloak:@s[scores={tf2.is_invisible=1}] -= 3;
        if (tf2.cloak:@s[scores={tf2.is_invisible=1}] <= 0) {
            this.uncloak();
        }

        if (entity @s[tag=tf2.disguised, scores={tf2.is_invisible=0}]) {
            return run this.fake_inventory_lock();
        }
        this.inventory_lock();
    }

    function inventory_lock() {
        if (tf2.is_invisible:@s) {
            return run this.disable_attacking();
        }

        item replace entity @s armor.chest with air;

        loot replace entity @s hotbar.0 loot tf2:class/spy/revolver;
        $_count_ = clear @s crossbow[custom_model_data=11000] 0;
        if ($_count_ != 1) clear @s crossbow[custom_model_data=11000];
        if ($_count_ != 1) loot replace entity @s hotbar.0 loot tf2:class/spy/revolver;

        loot replace entity @s hotbar.1 loot tf2:class/spy/sapper;
        $_count_ = clear @s clay_ball[custom_model_data=12000] 0;
        if ($_count_ != 1) clear @s clay_ball[custom_model_data=12000];
        if ($_count_ != 1) loot replace entity @s hotbar.1 loot tf2:class/spy/sapper;

        loot replace entity @s hotbar.2 loot tf2:class/spy/butterfly_knife;
        $_count_ = clear @s snowball[custom_model_data=13000] 0;
        if ($_count_ != 1) clear @s snowball[custom_model_data=13000];
        if ($_count_ != 1) loot replace entity @s hotbar.2 loot tf2:class/spy/butterfly_knife;
        
        if (tf2.current_slot:@s == 2) {
            this.determine_backstab();
        }

        loot replace entity @s hotbar.3 loot tf2:class/spy/disguise_kit;
        $_count_ = clear @s clay_ball[custom_model_data=14000] 0;
        if ($_count_ != 1) clear @s clay_ball[custom_model_data=14000];
        if ($_count_ != 1) loot replace entity @s hotbar.3 loot tf2:class/spy/disguise_kit;

        loot replace entity @s weapon.offhand loot tf2:class/spy/invis_watch;
        $_count_ = clear @s clay_ball[custom_model_data=15000] 0;
        if ($_count_ != 1) clear @s clay_ball[custom_model_data=15000];
        if ($_count_ != 1) loot replace entity @s weapon.offhand loot tf2:class/spy/invis_watch;

        clear @s clay_ball[minecraft:custom_data~{cloak: 'uncloak'}];

        loot replace entity @s armor.legs loot tf2:class/spy/_model;
        $_count_ = clear @s iron_leggings 0;
        if ($_count_ != 1) clear @s iron_leggings;
        if ($_count_ != 1) loot replace entity @s armor.legs loot tf2:class/spy/_model;

        tf2.model_number:@s = EVAL (Class.SPY * 10);
        tf2.model_number:@s += tf2.team:@s;

        loot replace entity @s armor.head loot tf2:head;
        $_count_ = clear @s paper 0;
        if ($_count_ != 1) clear @s paper;
        if ($_count_ != 1) loot replace entity @s armor.head loot tf2:head;
    }
    function disable_attacking() {
        clear @s *[!custom_data~{cloak: 'uncloak'}, !custom_model_data=10];
        loot replace entity @s weapon.offhand loot tf2:class/spy/invis_watch_gui_only;
    }
    function disguise_as() {
        // @needs_macro
        // @context chat
        $ scoreboard players set @s tf2.disguise.team $(team);
        $ scoreboard players set @s tf2.disguise.class $(class);
        tag @s add tf2.disguised;
    }
    function fake_inventory_lock() {
        switch (tf2.disguise.class:@s) {
            case 1: vars::pattern = "spy";
            case 2: vars::pattern = "sniper";
            case 3: vars::pattern = "scout";
            case 4: vars::pattern = "soldier";
            case 5: vars::pattern = "demoman";
            case 6: vars::pattern = "heavy";
            case 7: vars::pattern = "pyro";
            case 8: vars::pattern = "engineer";
            case 9: vars::pattern = "medic";
        }

        if (tf2.disguise.team:@s == 1) {vars::material = "red";}
        if (tf2.disguise.team:@s == 2) {vars::material = "blu";}

        if (items entity @s player.cursor *) {
            item replace entity @s player.cursor with air;
        }
        this.inventory_lock();
        this.fake_primary();
        this.fake_secondary();
        this.fake_melee();

        this.fake_leggings() with vars::;
        $_count_ = clear @s iron_leggings 0;
        if ($_count_ != 1) clear @s iron_leggings;
        if ($_count_ != 1) this.fake_leggings() with vars::;

        // loot replace entity @s weapon.offhand loot tf2:class/spy/invis_watch;
        // $_count_ = clear @s clay_ball[custom_model_data=15000] 0;
        // if ($_count_ != 1) clear @s clay_ball[custom_model_data=15000];
        // if ($_count_ != 1) loot replace entity @s weapon.offhand loot tf2:class/spy/invis_watch;
        item modify entity @s weapon.offhand {
            "function": "minecraft:set_custom_model_data", "value": 15001
        };

        tf2.model_number:@s = tf2.disguise.class:@s;
        tf2.model_number:@s *= 10;
        tf2.model_number:@s += tf2.disguise.team:@s;

        loot replace entity @s armor.head loot tf2:head;
        $_count_ = clear @s paper 0;
        if ($_count_ != 1) clear @s paper;
        if ($_count_ != 1) loot replace entity @s armor.head loot tf2:head;

        this.true_team_trail();
    }
    function fake_primary() {
        $fake_CMD = @s::Inventory[{Slot:0b}].components.minecraft:custom_model_data * 10; // 130010
        $fake_CMD += tf2.disguise.class:@s;
        $fake_CMD *= 10;
        $fake_CMD ++;
        $fake_CMD *= 1000;
        $fake_CMD += tf2.disguise.team:@s;
        $fake_CMD %= EVAL(1_000_000_000);
        if (tf2.disguise.class:@s == Class.SPY) {
            $fake_CMD %= 100000;
        }

        item modify entity @s hotbar.0 {
            "function": "minecraft:set_custom_model_data",
            "value": {
                "type": "minecraft:score",
                "target": {
                    "type": "minecraft:fixed",
                    "name": "$fake_CMD"
                },
                "score": "tf2.var"
            }
        };

        $fake_CMD += EVAL(300_000_000);
        item modify entity @s hotbar.3 {
            "function": "minecraft:set_custom_model_data",
            "value": {
                "type": "minecraft:score",
                "target": {
                    "type": "minecraft:fixed",
                    "name": "$fake_CMD"
                },
                "score": "tf2.var"
            }
        };
    }
    function fake_secondary() {
        // loot replace entity @s hotbar.1 loot tf2:class/spy/sapper;
        $fake_CMD = @s::Inventory[{Slot:1b}].components.minecraft:custom_model_data * 10;
        $fake_CMD += tf2.disguise.class:@s;
        $fake_CMD *= 10;
        $fake_CMD += 2;
        $fake_CMD *= 1000;
        $fake_CMD += tf2.disguise.team:@s;
        $fake_CMD %= EVAL(1_000_000_000);
        if (tf2.disguise.class:@s == Class.SPY) {
            $fake_CMD %= 100000;
        }

        item modify entity @s hotbar.1 {
            "function": "minecraft:set_custom_model_data",
            "value": {
                "type": "minecraft:score",
                "target": {
                    "type": "minecraft:fixed",
                    "name": "$fake_CMD"
                },
                "score": "tf2.var"
            }
        };
    }
    function fake_melee() {
        // loot replace entity @s hotbar.2 loot tf2:class/spy/butterfly_knife;
        $fake_CMD = @s::Inventory[{Slot:2b}].components.minecraft:custom_model_data * 10;
        $fake_CMD += tf2.disguise.class:@s;
        $fake_CMD *= 10;
        $fake_CMD += 3;
        $fake_CMD *= 1000;
        $fake_CMD += tf2.disguise.team:@s;
        $fake_CMD %= EVAL(1_000_000_000);
        if (tf2.disguise.class:@s == Class.SPY) {
            $fake_CMD %= 100000;
        }

        item modify entity @s hotbar.2 {
            "function": "minecraft:set_custom_model_data",
            "value": {
                "type": "minecraft:score",
                "target": {
                    "type": "minecraft:fixed",
                    "name": "$fake_CMD"
                },
                "score": "tf2.var"
            }
        };
    }
    function fake_leggings() {
        $ loot replace entity @s armor.legs loot {
            "pools": [{
                "rolls": 1,
                "entries": [{"type": "minecraft:item", "name": "minecraft:iron_leggings"}],
                "functions": [{
                    "function": "minecraft:set_components",
                    "components": {
                        "minecraft:enchantments": {"minecraft:binding_curse": 1},
                        "minecraft:enchantment_glint_override": false,
                        "minecraft:trim": {"material": "tf2:$(material)", "pattern": "tf2:$(pattern)"}
                    }
                }]
            }]
        };   
    }
    class nametag {
        function create() {
            team leave @s;
            setblock 0 0 0 decorated_pot;
            loot replace block 0 0 0 contents loot {
                pools: [{
                    rolls: 1, 
                    entries: [{
                        type: "item", name: "stone",
                        functions: [
                            {function: "set_name", entity: "this", name: {selector: "@s"}}
                        ]
                    }]
                }]
            };

            $disguise_team = tf2.disguise.team:@s;
            function player_motion:internal/subtick/get_player_uuid;
            execute summon turtle run this.set_data();

            team join RED @s[scores={tf2.team=1}];
            team join BLU @s[scores={tf2.team=2}];
        }
        // @private
        function set_data() {

            @s::CustomName = [0,0,0]::item.components.minecraft:custom_name;
            @s:: += {CustomNameVisible: true, Age: -2147483647, NoGravity: true};
            attribute @s minecraft:generic.scale base set 1.75;

            if ($disguise_team == 1) { team join RED @s; }
            if ($disguise_team == 2) { team join BLU @s; }

            Hardcode.repeat("_i_", () => {
                player_motion.internal.uuid._i_:@s = player_motion:storage::UUID[_i_];
            }, 0, 4);

            tag @s add retina.ignore;
        }
        @lazy 
        function linked_tp(x, y, z) {
            Hardcode.repeat("_i_", () => {
                $uuid._i_ = player_motion.internal.uuid._i_:@s;
            }, 0, 4);

            execute positioned as @s 
                    as @e[type=turtle]
                    if score @s player_motion.internal.uuid.0 = $uuid.0 tf2.var
                    if score @s player_motion.internal.uuid.1 = $uuid.1 tf2.var
                    if score @s player_motion.internal.uuid.2 = $uuid.2 tf2.var
                    if score @s player_motion.internal.uuid.3 = $uuid.3 tf2.var
                    run tp @s $x $y $z;
        }
        function follow() {
            this.linked_tp(~, ~2, ~);
        }
        function delete() {
            this.linked_tp(0, -1000, 0);
        }
    }

    function determine_backstab() {
        function retina:traverse/setup;
        if (!data storage retina:output {Target: "ENTITY"}) {
            return fail;
        }
        if (entity @a[tag=retina.target,gamemode=spectator]) {
            return fail;
        }

        tf2.team:$current = tf2.team:@s;
        execute as @a[tag=retina.target,limit=1]
                if score @s tf2.team = $current tf2.team
                run return fail;

        $enemy_dist = retina:output::Distance * 10;
        $backstab_range = @s::SelectedItem.components."minecraft:custom_data".attributes.range * 50;
        $backstab_range /= 6;
        if ($enemy_dist > $backstab_range) {return fail;}

        lookup::spy_pos = @s::Pos;
        lookup::enemy_pos = @a[tag=retina.target,limit=1]::Pos;

        // (Spy pos to enemy pos) * (Enemy rotation)
        execute at @s summon marker run tag @s add get_pos;
        execute as @e[type=marker, tag=get_pos] expand {
            tp @s ~ ~ ~ facing entity @a[tag=retina.target,limit=1] feet;
            Math.facing_vec();
            kill @s;
        }
        Math.feed_left();
        
        execute as @a[tag=retina.target,limit=1] run Math.facing_vec();
        Math.feed_right();
        Math.dot_product();
        // printf("&<bold>Enemy: &<!bold>[&<$in2_vec3.X>, &<$in2_vec3.Y>, &<$in2_vec3.Z>]");
        // printf("&<yellow>1st dot product: &<white>&<$dot_product>");
        if ($dot_product < 0) {return fail;}

        // (Spy pos to enemy pos) * (Spy rotation)
        Math.facing_vec();
        Math.feed_right();
        Math.dot_product();
        // printf("&<green>2nd dot product: &<white>&<$dot_product>");
        if ($dot_product < 500) {return fail;}

        // (Enemy rotation) * (Spy rotation)
        execute as @a[tag=retina.target,limit=1] run Math.facing_vec();
        Math.feed_left();
        Math.dot_product();
        // printf("&<blue>3rd dot product: &<white>&<$dot_product>");
        if ($dot_product < -300) {return fail;}

        // $theta_1 = @s::Rotation[0];
        // if ($theta_1 < 0) {$theta_1 += 360;}
        // $theta_2 = @a[tag=retina.target,limit=1]::Rotation[0];
        // if ($theta_2 < 0) {$theta_2 += 360;}
        // $theta_1 -= $theta_2;
        // if ($theta_1 matches 90..270) {return fail;}

        $CMD = @s::SelectedItem.components."minecraft:custom_model_data" * 0.1;
        $CMD *= 10;
        $CMD ++;
        item modify entity @s weapon.mainhand tf2:class/spy/raise_knife;
    }

    function true_team_trail() {
        tf2.team:$current = tf2.team:@s;
        execute as @a if score @s tf2.team = $current tf2.team run tag @s add teammate;
        if (tf2.team:@s == 1) expand {
            particle minecraft:block{block_state:red_terracotta} ~ ~ ~ 0.05 0.00 0.05 0 5 normal @a[tag=teammate, distance=0.01..];
            particle minecraft:falling_dust{block_state:red_stained_glass} ~ ~ ~ 0.2 0.00 0.2 0 5 normal @a[tag=teammate, distance=0.01..];
        }
        if (tf2.team:@s == 2) expand {
            particle minecraft:block{block_state:light_blue_concrete} ~ ~ ~ 0.05 0.00 0.05 0 5 normal @a[tag=teammate, distance=0.01..];
            particle minecraft:falling_dust{block_state:blue_stained_glass} ~ ~ ~ 0.2 0.00 0.2 0 5 normal @a[tag=teammate, distance=0.01..];
        }
        tag @a remove teammate;
    }

    function light_smoke() {
        particle minecraft:white_smoke ~ ~0.75 ~ 0.2 0.6 0.2 0 25 normal @a[tag=!self];
        particle minecraft:white_smoke ~ ~1.25 ~ 0.2 0 0.2 0 25 normal @a[tag=!self];
    }
    function thick_smoke() {
        particle minecraft:poof ~ ~ ~ 0.07 0.7 0.07 0 200 normal @a[tag=!self];
        if (tf2.team:@s == 1) expand {
            particle minecraft:item{item: "red_stained_glass"} ~ ~1.5 ~ 0.15 0 0.15 0.01 100 normal @a[tag=!self];
            particle minecraft:item{item: "red_stained_glass"} ~ ~0.5 ~ 0.15 0 0.15 0.01 100 normal @a[tag=!self];
        }
        if (tf2.team:@s == 2) expand {
            particle minecraft:item{item:"blue_stained_glass"} ~ ~1.5 ~ 0.15 0 0.15 0.01 100 normal @a[tag=!self];
            particle minecraft:item{item:"blue_stained_glass"} ~ ~0.5 ~ 0.15 0 0.15 0.01 100 normal @a[tag=!self];
        }
    }
    function title_image() {
        Text.title(@s, "&<font(disguise)>S");
        title @s times 5t 8t 5t;
    }
    function apply_disguise() {
        tag @s add self;

        if (entity @s[tag=!tf2.disguised,scores={tf2.is_invisible=0}]) {
            this.thick_smoke();
        }

        if (entity @s[tag=tf2.disguised,scores={tf2.is_invisible=0}]) {
            this.light_smoke();
        }
        this.title_image();

        execute unless score @s tf2.team = @s tf2.disguise.team
                at @s anchored eyes  
                run this.nametag.create();

        tag @s remove self;
        tag @s add tf2.disguised;
    }
}

Trigger.add(
    disguise,
    () => {
        $error = false;
        if (tf2.class:@s != Class.SPY) {
            $error = Text.tellraw(@s, "&<yellow, italic>ERROR: You can't use disguises if you're not playing as the Spy.");
        }
        if (!disguise:@s matches 11..19 && !disguise:@s matches 21..29) {
            $error = Text.tellraw(@s, "&<yellow, italic>ERROR: Cannot interpret disguise value of &<bold, disguise:@s>.");
        }

        tf2.disguise.team:@s = tf2.disguise.class:@s = disguise:@s;
        tf2.disguise.team:@s /= 10;
        tf2.disguise.class:@s %= 10;
        
        if (tf2.disguise.class:@s == Class.SPY && tf2.disguise.team:@s == tf2.team:@s) {
            // Disguising as a friendly Spy simply removes your disguise without an error message;
            $error = true;
        }

        if (!$error) {
            Class.Spy.apply_disguise();
        }
        if ($error) {
            tag @s remove tf2.disguised;
        }
    }
);