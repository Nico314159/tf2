new trim_pattern(sniper) {
    "asset_id": "tf2:sniper",
    "description": {
        "translate": "trim_pattern.tf2.sniper"
    },
    "template_item": "minecraft:arrow"
}

class Class.Sniper {
    new advancements(scope) {
        "criteria": {
            "requirement": {
                "trigger": "minecraft:using_item",
                "conditions": {
                    "item": {"items": ["minecraft:spyglass"]}
                }
            }
        },
        "rewards": {
            "function": "tf2:class/sniper/scope"
        }
    }
    new predicates(holding_scope) {
        "condition": "minecraft:all_of",
        "terms": [{
            "condition": "minecraft:entity_properties",
            "entity": "this",
            "predicate": {
                "equipment": {
                    "offhand": {
                        "items": ["minecraft:crossbow"]
                    }
                }
            }
        }]
    }


    new loot_tables(sniper_rifle) {
        "pools": [{
            "rolls": 1,
            "entries": [
                {
                    "type": "minecraft:loot_table",
                    "name": "tf2:crossbow_base",
                    "functions": [
                        {
                            "function": "minecraft:set_name",
                            "name": {
                                "text": "Sniper Rifle",
                                "color": "gray",
                                "italic": true
                            }
                        },
                        {
                            "function": "minecraft:set_nbt",
                            "tag": "{
                                CustomModelData: 21000,
                                retina: {HorizontalCount: 1, VerticalCount: 1, CenteredCount: 0, EndpointEntity: false, TargetEntities: true, SpreadFactor: [0, 0], MaxRecursionDepth: 500},
                                attributes: {damage: {base: 50, uniform: true}, attackDelay: 1.5d, clip: 15, ammo: 0},
                                controls: {main_fire: true, alt_fire: false, reload: 0},
                                Unbreakable: 1b
                            }"
                        }
                        
                    ]
                }
            ]
        }]
    }
    new loot_tables(sniper_rifle_scope) {
        "pools": [{
            "rolls": 1,
            "entries": [
                {
                    "type": "minecraft:item",
                    "name": "minecraft:spyglass",
                    "functions": [
                        {
                            "function": "minecraft:set_nbt",
                            "tag": "{CustomModelData: 21000}"
                        }
                    ]
                }
            ]
        }]
    }
    new loot_tables(smg) {
        "pools": [{
            "rolls": 1,
            "entries": [
                {
                    "type": "minecraft:loot_table",
                    "name": "tf2:crossbow_base",
                    "functions": [
                        {
                            "function": "minecraft:set_name",
                            "name": {
                                "text": "SMG",
                                "color": "gray",
                                "italic": true
                            }
                        },
                        {
                            "function": "minecraft:set_nbt",
                            "tag": "{
                                CustomModelData: 22000,
                                retina: {HorizontalCount: 1, VerticalCount: 1, CenteredCount: 0, EndpointEntity: true, TargetEntities: true, SpreadFactor: [25, 60], MaxRecursionDepth: 100},
                                attributes: {damage: {base: 8}, attackDelay: 0.105d, reloadDelay: [1.1d, 1.1d], clip: 25, ammo: 75},
                                controls: {main_fire: true, alt_fire: false, reload: 3},
                                Unbreakable: 1b
                            }"
                        }
                    ]
                }
            ]
        }]
    }
    new loot_tables(kukri) {
        "pools": [{
            "rolls": 1,
            "entries": [
                {
                    "type": "minecraft:loot_table",
                    "name": "tf2:melee_base",
                    "functions": [
                        {
                            "function": "minecraft:set_name",
                            "name": {
                                "text": "Kukri",
                                "color": "gray",
                                "italic": true
                            }
                        },
                        {
                            "function": "minecraft:set_nbt",
                            "tag": "{
                                CustomModelData: 23000,
                                retina: {HorizontalCount: 1, VerticalCount: 1, CenteredCount: 0, EndpointEntity: false, TargetEntities: true, SpreadFactor: [0, 0], MaxRecursionDepth: 5},
                                attributes: {damage: {base: 65}, attackDelay: 0.8d, range: 3.2d, isMelee: true},
                                controls: {main_fire: true, alt_fire: false, reload: 0}
                            }"
                        }
                    ]
                }
            ]
        }]
    }
    new loot_tables(_model) {
        "pools": [{
            "rolls": 1,
            "entries": [{
                "type": "minecraft:loot_table",
                "name": "tf2:melee_base",
                "functions": [
                    {
                        "function": "minecraft:reference",
                        "name": "tf2:apply_team_material"
                    },
                    {
                        "function": "minecraft:set_nbt",
                        "tag": "{Trim: {pattern: \"tf2:sniper\"}}"
                    }
                ]
            }]
        }]
    }

    @lazy
    function give() {
        clear @s;
        loot replace entity @s hotbar.0 loot tf2:class/sniper/sniper_rifle;
        loot replace entity @s weapon.offhand loot tf2:class/sniper/sniper_rifle_scope;
        loot replace entity @s hotbar.1 loot tf2:class/sniper/smg;
        loot replace entity @s hotbar.2 loot tf2:class/sniper/kukri;
        loot replace entity @s armor.legs loot tf2:class/sniper/_model;

        tf2.primary_maxClip:@s = tf2.primary_clip:@s = data get entity @s Inventory[0].tag.attributes.clip;
        tf2.primary_maxAmmo:@s = tf2.primary_ammo:@s = data get entity @s Inventory[0].tag.attributes.ammo;
        tf2.secondary_maxClip:@s = tf2.secondary_clip:@s = data get entity @s Inventory[1].tag.attributes.clip;
        tf2.secondary_maxAmmo:@s = tf2.secondary_ammo:@s = data get entity @s Inventory[1].tag.attributes.ammo;
    }
    @lazy
    function tick() {
        tf2.grace_period:@s[tag=!tf2.scoped] ++;
        tf2.time_scoped:@s[scores={tf2.grace_period=10..}] = 0;
        tag @s[tag=tf2.scoped] remove tf2.scoped;

        Weapons.get_ammo();
        Weapons.actionbar();
        Weapons.set_ammo();

        if (entity @s[scores={tf2.class=2, tf2.time_scoped=1..}]) {
            Class.Sniper.zoom_meter();
        }

        Class.Sniper.inventory_lock();
    }
    function inventory_lock() {
        item replace entity @s armor.chest with air;
        loot replace entity @s hotbar.1 loot tf2:class/sniper/smg;
        $_count_ = clear @s crossbow{CustomModelData: 22000} 0;
        if ($_count_ != 1) clear @s crossbow{CustomModelData: 22000};
        if ($_count_ != 1) loot replace entity @s hotbar.1 loot tf2:class/sniper/smg;

        loot replace entity @s hotbar.2 loot tf2:class/sniper/kukri;
        $_count_ = clear @s snowball{CustomModelData: 23000} 0;
        if ($_count_ != 1) clear @s snowball{CustomModelData: 23000};
        if ($_count_ != 1) loot replace entity @s hotbar.2 loot tf2:class/sniper/kukri;

        loot replace entity @s armor.legs loot tf2:class/sniper/_model;
        $_count_ = clear @s iron_leggings{Trim: {pattern: "tf2:sniper"}} 0;
        if ($_count_ != 1) clear @s iron_leggings{Trim: {pattern: "tf2:sniper"}};
        if ($_count_ != 1) loot replace entity @s armor.legs loot tf2:class/sniper/_model;

        // gets first 2 digits
        $_crossbow_id_ = data get entity @s Inventory[-1].tag.CustomModelData 0.001;
        if (predicate tf2:class/sniper/holding_scope && $_crossbow_id_ === 21 && tf2.attack_delay:@s <= 0) return run {
            loot replace entity @s weapon.mainhand loot tf2:class/sniper/sniper_rifle_scope;
            item modify entity @s weapon.offhand tf2:load_crossbow;
        }

        loot replace entity @s hotbar.0 loot tf2:class/sniper/sniper_rifle;
        $_count_ = clear @s crossbow{CustomModelData: 21000} 0;
        if ($_count_ != 1) clear @s crossbow{CustomModelData: 21000};
        if ($_count_ != 1) loot replace entity @s hotbar.0 loot tf2:class/sniper/sniper_rifle;

        clear @s spyglass;
    }
    function scope() {
        tf2.time_scoped:@s += 1;
        tf2.grace_period:@s = 0;
        tag @s add tf2.scoped;
        execute at @s run function retina:traverse/setup;
        execute summon marker run {
            data modify entity @s Pos set from storage retina:output ContactCoordinates;
            tag @s add tf2.temp;
        }
        tag @s add tf2.self;
        execute at @e[type=marker, tag=tf2.temp] run {
            if (entity @s[scores={tf2.team=1}]) {
                particle dust 1.0 0.2 0.0 0.9 ^ ^ ^ 0 0 0 0 2 force @a[tag=!tf2.self,tag=!retina.target];
                if (entity @s[distance=  ..02]) particle dust 1.0 0.2 0.0 0.10 ^ ^ ^ 0 0 0 0 2 force @s;
                if (entity @s[distance=02..05]) particle dust 1.0 0.2 0.0 0.25 ^ ^ ^ 0 0 0 0 2 force @s;
                if (entity @s[distance=05..50]) particle dust 1.0 0.2 0.0 0.55 ^ ^ ^ 0 0 0 0 2 force @s;
                if (entity @s[distance=50..  ]) particle dust 1.0 0.2 0.0 0.90 ^ ^ ^ 0 0 0 0 2 force @s;
                particle dust 1.0 0.2 0.0 0.3 ^ ^ ^ 0 0 0 0 2 force @a[tag=retina.target];
            }
            if (entity @s[scores={tf2.team=2}]) {
                particle dust 0.0 0.4 1.0 0.9 ^ ^ ^ 0 0 0 0 2 force @a[tag=!tf2.self,tag=!retina.target];
                if (entity @s[distance=  ..02]) particle dust 0.0 0.4 1.0 0.10 ^ ^ ^ 0 0 0 0 2 force @s;
                if (entity @s[distance=02..05]) particle dust 0.0 0.4 1.0 0.25 ^ ^ ^ 0 0 0 0 2 force @s;
                if (entity @s[distance=05..50]) particle dust 0.0 0.4 1.0 0.55 ^ ^ ^ 0 0 0 0 2 force @s;
                if (entity @s[distance=50..  ]) particle dust 0.0 0.4 1.0 0.90 ^ ^ ^ 0 0 0 0 2 force @s;
                particle dust 0.0 0.4 1.0 0.3 ^ ^ ^ 0 0 0 0 2 force @a[tag=retina.target];
            }
        }
        tag @s remove tf2.self;
        kill @e[type=marker, tag=tf2.temp];
        Advancement.revoke(@s, only, class/sniper/scope);
    }
    @lazy
    function damage_scale() {
        $_multiplier_ = tf2.time_scoped:@a[tag=retina.executing, limit=1];
        $_multiplier_ -= 26;
        $_multiplier_ *= 5;
        $_multiplier_ += 100;

        $_multiplier_ > 100;
        $_multiplier_ < 300;

        $_isHeadshot_ = data get storage retina:output HitEntityHead;
        if ($_isHeadshot_) {
            $_multiplier_ *= 3;
        }
    }
    function zoom_meter() {
        $bars = tf2.time_scoped:@s;
        $bars *= 10;
        $bars /= 66;
        $bars += 3;
        $bars < 13;
        $bars > 3;
        title @s times 0 4 2;
        Text.title(@s[tag=!tf2.on_point], "");
        switch ($bars) {
            case  3: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abc&<dark_gray,font(zoom_meter)>defghijklm");
            case  4: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abcd&<dark_gray,font(zoom_meter)>efghijklm");
            case  5: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abcde&<dark_gray,font(zoom_meter)>fghijklm");
            case  6: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abcdef&<dark_gray,font(zoom_meter)>ghijklm");
            case  7: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abcdefg&<dark_gray,font(zoom_meter)>hijklm");
            case  8: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abcdefgh&<dark_gray,font(zoom_meter)>ijklm");
            case  9: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abcdefghi&<dark_gray,font(zoom_meter)>jklm");
            case 10: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abcdefghij&<dark_gray,font(zoom_meter)>klm");
            case 11: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abcdefghijk&<dark_gray,font(zoom_meter)>lm");
            case 12: Text.subtitle(@s, "&<gray,font(zoom_meter)>_abcdefghijkl&<dark_gray,font(zoom_meter)>m");
            case 13: Text.subtitle(@s, "&<gray,font(zoom_meter)>_:abcdefghijklm%");
        }
    }
}