// TODO: expand this section as time goes on

// See header file for gamemode key
Scoreboard.add(tf2.gamemode, dummy);

// Map key: 0 = ad_test, 1 = cp_test, 2 = koth_woodlands
Scoreboard.add(tf2.map, dummy);

Hardcode.repeatList(
    "objectiveName",
    () => {
        Scoreboard.add(tf2.objectiveName);
    },
    [
        "index", "red_progress", "blu_progress", "capture_threshold",
        "timer", "timer.min", "timer.sec", "increment",
        "red_timer", "red_timer.min", "red_timer.sec", "red_overtime",
        "blu_timer", "blu_timer.min", "blu_timer.sec", "blu_overtime",
        "batch_number", "session", "lifetime", 
        "respawn_timer", "respawn_timer.sec", "class", "team", "health", "max_health",
        "time_scoped", "grace_period", "last_slot", "current_slot",
        "primary_clip", "primary_maxClip", "primary_ammo", 
        "secondary_clip", "secondary_maxClip", "secondary_ammo",
        "attack_delay", "reload_delay", "consecutive_reload",
        "time_revved", "rev_threshold",
        "permanent.games_won", "permanent.games_played", "permanent.double_jumps",
        "fall_y", "fall_y1", "fall_y2", "fall_y3", 
        "drown_lost", "time_surfaced", "current_air", "last_air"
    ]
);

Scoreboard.add(tf2.queue_type, trigger);
Scoreboard.add(tf2.elytra_detect, custom:aviate_one_cm);
Scoreboard.add(tf2.fall, custom:fall_one_cm);
Scoreboard.add(tf2.air, air);

// when in score format - RED = 1, BLU = 2
Team.add(RED, "RED", {color: red,  prefix: "\"[RED] \"", friendlyFire: false});
Team.add(BLU, "BLU", {color: blue, prefix: "\"[BLU] \"", friendlyFire: false});

Hardcode.repeat("_i_", () => {
    Bossbar.add(tf2:timer__i_, "");
    Bossbar.add(tf2:red_timer__i_, "");
    bossbar set tf2:red_timer__i_ color red;
    Bossbar.add(tf2:blu_timer__i_, "");
    bossbar set tf2:blu_timer__i_ color blue;
}, 1, _INSTANCES_CAP_);

TextProp.clickURL("retina_link", "https://github.com/Nico314159/Retina_v2", true);
TextProp.hoverText("retina_hover", "https://github.com/Nico314159/Retina_v2", true);
$found_dependency ?= execute run function retina:__load__;
// TODO: use return run once 1.20.3 releases
if (!$found_dependency) Text.tellraw(@a, "&<dark_red>[ERROR] &<red>Dependency &<aqua,underlined,retina_link,retina_hover>Retina 2&<red> was not found.");
if (!$found_dependency) return -1;

TextProp.clickURL("delta_link", "https://github.com/BigPapi13/Delta", true);
TextProp.hoverText("delta_hover", "https://github.com/BigPapi13/Delta", true);
$found_dependency ?= execute run function delta:internal/technical/load;
if (!$found_dependency) Text.tellraw(@a, "&<dark_red>[ERROR] &<red>Dependency &<aqua,underlined,delta_link,delta_hover>Delta&<red> was not found.");
if (!$found_dependency) return -1;

$profiler_installed ?= execute run function timekeeper:__load__;

gamerule doImmediateRespawn true;
gamerule doMobSpawning false;
gamerule fallDamage false;
gamerule drowningDamage true;
gamerule keepInventory true;
gamerule mobGriefing false;
gamerule naturalRegeneration false;
gamerule showDeathMessages false;

// testing purposes only
$Settings.show_debug_messages = true;

// map data
data merge storage tf2:maps {
    0: {
        name: "ad_test",
        origin: [-500.0d, 1.0d, -500.0d],
        spawn: {
            red: [[-487.0d, 1.0d, -487.0d]],
            blu: [[-513.0d, 1.0d, -513.0d]]
        },
        spawn_time: {red: [5.0f], blu: [5.0f]},
        objectives: [
            {Pos: [-509.5d, 1.0d, -499.5d], Tags: ["tf2.objective", "tf2.control_point"], data: {capture_threshold: 20.0f, team: 1b, increment: 60.0f}},
            {Pos: [-499.5d, 1.0d, -499.5d], Tags: ["tf2.objective", "tf2.control_point", "tf2.locked"], data: {capture_threshold: 20.0f, team: 1b, increment: 60.0f}},
            {Pos: [-489.5d, 1.0d, -499.5d], Tags: ["tf2.objective", "tf2.control_point", "tf2.locked"], data: {capture_threshold: 25.0f, team: 1b, increment: 60.0f}}
        ],
        gamemode: 1b,
        timer: 480.0f,
        setup_time: 30.0f
    },
    1: {
        name: "cp_test",
        origin: [-300.0d, 1.0d, -300.0d],
        spawn: {
            red: [[-279.0d, 1.0d, -300.0d]],
            blu: [[-321.0d, 1.0d, -300.0d]]
        },
        spawn_time: {red: [5.0f], blu: [5.0f]},
        objectives: [
            {Pos: [-311.5d, 1.0d, -303.5d], Tags: ["tf2.objective", "tf2.control_point", "tf2.locked"], data: {capture_threshold: 5.0f, team: 2b, increment: 600.0f}},
            {Pos: [-306.5d, 1.0d, -295.5d], Tags: ["tf2.objective", "tf2.control_point", "tf2.locked"], data: {capture_threshold: 15.0f, team: 2b, increment: 600.0f}},
            {Pos: [-299.5d, 1.0d, -299.5d], Tags: ["tf2.objective", "tf2.control_point"], data: {capture_threshold: 30.0f, team: 0b, increment: 600.0f}},
            {Pos: [-292.5d, 1.0d, -303.5d], Tags: ["tf2.objective", "tf2.control_point", "tf2.locked"], data: {capture_threshold: 15.0f, team: 1b, increment: 600.0f}},
            {Pos: [-287.5d, 1.0d, -295.5d], Tags: ["tf2.objective", "tf2.control_point", "tf2.locked"], data: {capture_threshold: 5.0f, team: 1b, increment: 600.0f}}
        ],
        gamemode: 2b,
        timer: 600.0f
    },
    2: {
        name: "koth_woodlands",
        origin: [1050.0d, 76.0d, 910.0d],
        spawn: {
            red: [[1002.5d, 76.0d, 934.5d]],
            blu: [[1098.0d, 68.0d, 882.5d]]
        },
        spawn_time: {red: [5.0f], blu: [5.0f]},
        objectives: [
            {Pos: [1050.5d, 104.0d, 910.5d], Tags: ["tf2.objective", "tf2.control_point"], data: {capture_threshold: 20.0f, team: 0b}},
        ],
        gamemode: 3b,
        timer: 180.0f
    }
};

new predicates(coin_flip) {
    "condition": "minecraft:random_chance",
    "chance": 0.5
}
new predicates(sprinting) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
	"predicate": {
		"flags": {
			"is_sprinting": true
		}
	}
}
new predicates(sneaking) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
	"predicate": {
		"flags": {
			"is_sneaking": true
		}
	}
}
new predicates(submerged) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:location_check",
            "offsetY": 1,
            "predicate": {
                "fluid": {
                    "fluid": "minecraft:water"
                }
            }
        },
        {
            "condition": "minecraft:location_check",
            "offsetY": 1,
            "predicate": {
                "fluid": {
                    "fluid": "minecraft:flowing_water"
                }
            }
        },
        {
            "condition": "minecraft:location_check",
            "offsetY": 1,
            "predicate": {
                "block": {
                    "state": {
                        "waterlogged": "true"
                    }
                }
            }
        },
        {
            "condition": "minecraft:entity_properties",
            "entity": "this",
            "predicate": {
                "flags": {
                    "is_swimming": true
                }
            }
        }
    ]
}
new predicates(burning) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
	"predicate": {
		"flags": {
			"is_on_fire": true
		}
	}
}
new predicates(grounded) {
    "condition": "minecraft:inverted",
    "term": {
        "condition": "minecraft:entity_properties",
        "entity": "this",
        "predicate": {
            "stepping_on": {
                "block": {
                    "blocks": ["minecraft:air"]
                }
            }
        }
    }
}
new tags.entity_types(player_like) {
    "replace": false,
    "values": ["minecraft:player", "minecraft:villager", "minecraft:blaze"]
}
new tag.blocks(no_fall_dmg) {
    "values": [
        "minecraft:powder_snow",
        "minecraft:sweet_berry_bush",
        "minecraft:ladder",
        "minecraft:vine",
        "minecraft:cobweb",
        "minecraft:water"
    ]
}
new tag.blocks(reduce_fall_dmg) {
    "values": [
        "minecraft:hay_block",
        "minecraft:honey_block"
    ]
}

// Need to define this *before* importing weapon/class files
new loot_tables(crossbow_base) {
    "pools": [
        {
            "rolls": 1,
            "entries": [
                {
                    "type": "minecraft:item",
                    "name": "minecraft:crossbow",
                    "functions": [
                        {
                            "function": "minecraft:reference",
                            "name": "tf2:load_crossbow",
                            "conditions": [
                                {
                                    "condition": "minecraft:entity_scores",
                                    "entity": "this",
                                    "scores": {
                                        "tf2.attack_delay": {"max": 1000}
                                    }
                                },
                                {
                                    "condition": "minecraft:reference",
                                    "name": "tf2:ammo_in_clip"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}

new loot_tables(melee_base) {
    "pools": [
        {
            "rolls": 1,
            "entries": [
                {
                    "type": "minecraft:alternatives",
                    "children": [
                        {
                            "type": "minecraft:item",
                            "name": "minecraft:snowball",
                            "conditions": [
                                {
                                    "condition": "minecraft:entity_scores",
                                    "entity": "this",
                                    "scores": {
                                        "tf2.attack_delay": {"max": 1000}
                                    }
                                }
                            ]
                        },
                        {
                            "type": "minecraft:item",
                            "name": "minecraft:brick"
                        }
                    ]
                }
            ]
        }
    ]
}


if (!$initialization_complete) {
    // Sets up NBT paths & defaults for game settings.
    // Only runs the very first time the pack is loaded.

    // TODO: replace line below when voting system is added
    $Settings.choose_map_randomly = true;
    $Settings.random_crits = $Settings.random_spread
                           = $Settings.use_server_mods 
                           = $Settings.chat_bot
                           = false;
    $Settings.max_batches = 3;

    data merge storage tf2.__temp__:actionbar {string:'[""]'};
    data merge storage tf2.__temp__:summon {};
    data merge storage tf2.__temp__:index {};
    data merge storage tf2.__temp__:lookup {points:[{}]};
    data merge storage tf2:control_points {info:[
        [],
        [
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {left:'[""]', mid:'[""]', right:'[""]'}
        ],
        [
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {left:'[""]', mid:'[""]', right:'[""]'}
        ],
        [
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {left:'[""]', mid:'[""]', right:'[""]'}
        ],
        [
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {left:'[""]', mid:'[""]', right:'[""]'}
        ],
        [
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {owner:'[""]', progress:'[""]', symbol:'[""]', extra:'[""]', wheel:{spacing:'[""]', owner:'[""]', progress:'[""]'}},
            {left:'[""]', mid:'[""]', right:'[""]'}
        ]
    ]};

    // this could *technically* be part of the previous command, but then it would be so long that it's a total PITA.
    Hardcode.repeat("_i_", () => {
        Hardcode.repeat("_j_", () => {
            data modify storage tf2:control_points info[_i_][_j_].main set value '[{"nbt":"info[_i_][_j_].owner","storage":"tf2:control_points","interpret":true,"font":"tf2:square"},{"nbt":"info[_i_][_j_].progress","storage":"tf2:control_points","interpret":true,"font":"tf2:square"},{"nbt":"info[_i_][_j_].symbol","storage":"tf2:control_points","interpret":true,"font":"tf2:square"},{"nbt":"info[_i_][_j_].extra","storage":"tf2:control_points","interpret":true,"font":"tf2:square"}]';
        }, start = 0, stop = 7);
    }, start = 1, stop = _INSTANCES_CAP_);
    $initialization_complete = true;
}
$Settings.max_batches < _INSTANCES_CAP_MINUS_ONE_;

// markers keep track of gamestate
$batch_markers = execute if entity @e[type=marker,tag=tf2.batch];
if ($batch_markers != $Settings.max_batches) setup_markers();

// restart failsafe
execute unless entity @a run {Hardcode.repeat("[i]", () => {tf2.session:$global_[i]++;}, start = 1, stop = _INSTANCES_CAP_);}

return 1;