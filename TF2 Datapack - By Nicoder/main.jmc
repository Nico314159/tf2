import "src/load";
import "src/text_props";
import "src/classes/*";
import "src/weapons";
import "src/utils";
import "src/gameplay_loop";
import "src/math";
import "src/objectives";
import "src/timer";

function __tick__() {
    // @handles #minecraft:tick
    // @context root

    if (!$found_dependency) return -1;

	tf2.lifetime:@e[tag=tf2.visual]--;
    kill @e[tag=tf2.visual, scores={tf2.lifetime=..0}];

    execute as @e[type=#tf2:player_like,tag=!tf2.in_queue,tag=!tf2.is_playing,scores={tf2.queue_type=1..3}] run join_queue();
    execute as @a[tag=!tf2.allowed_to_sprint] run disable_sprint();

    $comp_queue_length   = execute if entity @e[type=#tf2:player_like,tag=tf2.in_queue,scores={tf2.queue_type=1}];
    $casual_queue_length = execute if entity @e[type=#tf2:player_like,tag=tf2.in_queue,scores={tf2.queue_type=2}];
    $chaos_queue_length  = execute if entity @e[type=#tf2:player_like,tag=tf2.in_queue,scores={tf2.queue_type=3}];

    $enough_in_queue = true;
    if ($comp_queue_length < 12 && $casual_queue_length < 24 && $chaos_queue_length < 40) $enough_in_queue = false;
    if ($enough_in_queue) {
        execute as @e[type=marker,tag=tf2.batch,tag=!tf2.in_use,sort=random,limit=1] run start_game.as_marker.main();
    }

    execute as @e[type=marker] run marker_tick();
    execute as @e[type=#tf2:player_like,tag=tf2.is_playing] at @s run player_tick();
    tag @e[type=#tf2:player_like] remove tf2.on_point;
}

function marker_tick() {
    if (entity @s[tag=tf2.in_use,scores={tf2.timer=..2147483647}]) Timer.main();
    if (entity @s[tag=tf2.in_use,scores={tf2.gamemode=1..4}] && entity @a) {
        Objectives.control_point.gamestate();
    }

    execute if entity @s[tag=tf2.control_point,tag=!tf2.init  ] at @s run Objectives.control_point.visuals.init();
    execute if entity @s[tag=tf2.control_point,tag=!tf2.locked] at @s run Objectives.control_point.check_for_players();

    // honetly
    execute if entity @s[tag=tf2.batch] run {
        execute store result storage tf2.__temp__:index i int 1 run tf2.batch_number:@s.get();
        execute run {$execute unless score @s tf2.session = $global_$(i) tf2.session run kill @s;} with storage tf2.__temp__:index;
    }
}

function player_tick() {
    if (entity @s[tag=!tf2.dead,y=-45,dy=5]) {
        tf2.health:@s = 0;
        Text.tellraw(@a, "&<@s> fell into the void.");
        tp @s ~ 5 ~;
    }
    if (entity @s[tag=!tf2.dead,scores={tf2.health=..0}]) {death();}
    if (entity @s[tag=tf2.dead]) {
        tf2.respawn_timer:@s --;
        tf2.respawn_timer.sec:@s = tf2.respawn_timer:@s;
        tf2.respawn_timer.sec:@s += 19;
        tf2.respawn_timer.sec:@s /= 20;
        Text.title(@s, "&<white>You died!");
        Text.subtitle(@s, "&<gray>Respawn in... &<tf2.respawn_timer.sec:@s, bold, dark_gray>");
    }
    if (entity @s[tag=tf2.dead,scores={tf2.respawn_timer=..0}]) {Spawn.init();}

    if (entity @s[gamemode=spectator]) return 1;

    tf2.attack_delay:@s[scores={tf2.attack_delay=0..}] -= 1000;
    tf2.reload_delay:@s[scores={tf2.reload_delay=0..}] -= 1000;

    data modify storage tf2.__temp__:check_match UUID set from entity @s UUID;
    tag @s add tf2.self;
    if (predicate tf2:empty_hand) {
        execute as @e[type=item,tag=!tf2.map_item,distance=..2] run {
            if (Object.isEqual(storage, "tf2.__temp__:check_match", UUID, entity, "@s", Thrower)) {
                execute as @e[tag=tf2.self] run Weapons.reload(); kill @s;
            }
        }
        execute as @e[type=snowball,distance=..5] run {
            if (Object.isEqual(storage, "tf2.__temp__:check_match", UUID, entity, "@s", Owner)) {
                execute as @e[tag=tf2.self] run Weapons.main_fire(); kill @s;
            }
        }
    }
    tag @s remove tf2.self;

    Weapons.slot_check();
    if (predicate tf2:unloaded_crossbow) {
        kill @e[type=arrow];
        if (!predicate tf2:ammo_in_clip) return 0;
        if (tf2.attack_delay:@s > 0) return 0;
        if (tf2.class:@s == 6 && tf2.current_slot:@s == 0 && tf2.time_revved:@s < tf2.rev_threshold:@s) return 0;
        Weapons.main_fire();
    }

    switch (tf2.class:@s) {
        case Class.SPY: Class.Spy.tick();
        case Class.SNIPER: Class.Sniper.tick();
        case Class.SCOUT: Class.Scout.tick();
        // case Class.SOLDIER: Class.Soldier.tick();
        // case Class.DEMOMAN: Class.Demoman.tick();
        case Class.HEAVY: Class.Heavy.tick();
        // case Class.PYRO: Class.Pyro.tick();
        // case Class.ENGINEER: Class.Engineer.tick();
        // case Class.MEDIC: Class.Medic.tick();
    }
}

Player.join(() => {
    // Teleports a newly joined player to the lobby room, clears their inventory, puts them in adventure mode, resets their gameplay tags, and allows them to join queues.
    // @within __tick__()

    // TODO: improve lobby build quality (in-world)
    if ($Settings.show_debug_messages) Text.tellraw(@a, "&<bold><Debug> &<!bold>Player &<@s> has logged in at &<0008it54g_p_join:$__global__> ticks gametime.");
    tp @s[tag=!tf2.admin] Lobby.Main;
    gamemode adventure @s[tag=!tf2.admin];

    clear @s[tag=!tf2.admin];
    item replace entity @s[tag=!tf2.admin] hotbar.8 with written_book{
		pages: [
			'["", {"text": "Welcome to Minecraft TF2!", "bold": true, "underlined": true, "color": "gold"}, "\\n", "\\n", {"text": "[Start Playing] ", "bold": true, "underlined": true, "color": "dark_gray", "clickEvent": {"action": "change_page", "value": "3"}, "hoverEvent": {"action": "show_text", "contents": ["Choose a gamemode and jump right into the action!"]}}, "\\n", "\\n", {"text": "[Tutorial Missions] ", "bold": true, "underlined": true, "color": "gray", "clickEvent": {"action": "change_page", "value": "2"}, "hoverEvent": {"action": "show_text", "contents": ["A singleplayer experience to improve your skills with the various classes and weapons"]}}, "\\n", "\\n", {"text": "[Player Stats]", "bold": true, "underlined": true, "color": "gray", "hoverEvent": {"action": "show_text", "contents": [{"text": "View global counters like total kills,  captures,  etc.", "color": "white"}]}}, "\\n"]',
			'["", {"text": "Select a Mission: ", "underlined": true}, "\\n", "\\n", {"text": "Heist (Spy)", "hoverEvent": {"action": "show_text", "contents": ["Sneak into the base under cover of darkness! Manage your cloak carefully,  or else you will be spotted by cameras."]}}, "\\n", {"text": "Headhunt (Sniper)", "hoverEvent": {"action": "show_text", "contents": ["Hit the floating heads in order to open pathways leading to the treasure room"]}}, "\\n", {"text": "Racecourse (Scout)", "hoverEvent": {"action": "show_text", "contents": ["Try to avoid the obstacles and get through the level as fast as possible. Hint: you\'ll need to use double jumps!"]}}, "\\n", {"text": "Rocket Jump stuff", "hoverEvent": {"action": "show_text", "contents": []}}, "\\n", {"text": "Bullseye (any class)", "hoverEvent": {"action": "show_text", "contents": ["Try to hit as many targets as you can before the timer runs out!"]}}, "\\n", {"text": "Some other stuff idk", "hoverEvent": {"action": "show_text", "contents": []}}]',
			'["", {"text": "Queue for a game: ", "underlined": true}, "\\n", "\\n", "\\n", {"text": "[Competitive Mode]", "bold": true, "color": "dark_green", "clickEvent": {"action": "change_page", "value": "6"}, "hoverEvent": {"action": "show_text", "contents": [{"text": "• Max players: 9 v 9 ", "color": "dark_green"}, "\\n", {"text": "• Random bullet spread: NO", "color": "dark_green"}, "\\n", {"text": "• Gamemode / map pool: LIMITED", "color": "dark_green"}, "\\n", {"text": "• Matchmaking system: YES", "color": "dark_green"}]}}, "\\n", "\\n", "\\n", {"text": "[Casual Mode]", "bold": true, "color": "dark_aqua", "clickEvent": {"action": "change_page", "value": "9"}, "hoverEvent": {"action": "show_text", "contents": [{"text": "• Max players: 12 v 12", "color": "dark_aqua"}, "\\n", {"text": "• Random bullet spread: YES", "color": "dark_aqua"}, "\\n", {"text": "• Gamemode / map pool: ALL", "color": "dark_aqua"}, "\\n", {"text": "• Matchmaking system: YES", "color": "dark_aqua"}, "\\n", {"text": "• Team autobalance: YES", "color": "dark_aqua"}]}}, "\\n", "\\n", "\\n", {"text": "[Chaos Mode]", "bold": true, "color": "dark_red", "clickEvent": {"action": "change_page", "value": "12"}, "hoverEvent": {"action": "show_text", "contents": [{"text": "• Max players: 20 v 20", "color": "dark_red"}, "\\n", {"text": "• Random bullet spread: YES", "color": "dark_red"}, "\\n", {"text": "• Gamemode / map pool: ALL", "color": "dark_red"}, "\\n", {"text": "• Matchmaking system: NO", "color": "dark_red"}, "\\n", "• Team autobalance: NO"]}}]',
			'[""]',
			'[""]',
			'["", "\\n", {"text": "You have selected:", "underlined": true, "color": "dark_gray"}, "\\n", {"text": "Competitive Mode", "bold": true, "color": "dark_green"}, "\\n", "\\n", {"text": "Is this correct?", "color": "black"}, "\\n", {"text": "[Yup]", "color": "dark_green", "clickEvent": {"action": "run_command", "value": "/trigger tf2.queue_type set 1"}}, {"text": " [Nope]", "color": "gray", "clickEvent": {"action": "change_page", "value": "3"}}]',
			'[""]',
			'[""]',
			'["", "\\n", {"text": "You have selected:", "underlined": true, "color": "dark_gray"}, "\\n", {"text": "Casual Mode", "bold": true, "color": "dark_aqua"}, "\\n", "\\n", {"text": "Is this correct?", "color": "black"}, "\\n", {"text": "[Yup]", "color": "dark_aqua", "clickEvent": {"action": "run_command", "value": "/trigger tf2.queue_type set 2"}}, {"text": " [Nope]", "color": "gray", "clickEvent": {"action": "change_page", "value": "3"}}]',
			'[""]',
			'[""]',
			'["", "\\n", {"text": "You have selected:", "underlined": true, "color": "dark_gray"}, "\\n", {"text": "Chaos Mode", "bold": true, "color": "dark_red"}, "\\n", "\\n", {"text": "Is this correct?", "color": "black"}, "\\n", {"text": "[Yup]", "color": "dark_red", "clickEvent": {"action": "run_command", "value": "/trigger tf2.queue_type set 3"}}, {"text": " [Nope]", "color": "gray", "clickEvent": {"action": "change_page", "value": "3"}}]'
		],
		title: "Navigator",
		author: LazyHarpSeal
	};

    scoreboard players enable @s tf2.queue_type;
    tf2.batch_number:@s = tf2.queue_type:@s = 0;

    effect give @s minecraft:saturation infinite 0 true;
    effect give @s minecraft:resistance infinite 4 true;
    attribute @s minecraft:generic.attack_damage base set 0;
    attribute @s minecraft:generic.movement_speed base set 0.1;
    attribute @s minecraft:generic.movement_speed modifier remove 70726576-656e-7473-7072-696e74696e67;
    attribute @s minecraft:generic.movement_speed modifier remove 736c6f77-7768-696c-6572-657676696e67;

    // removes all gameplay-specific variables
    team leave @s;
    tag @s remove tf2.in_queue;
    tag @s remove tf2.allowed_to_sprint;
    tag @s remove tf2.is_playing;
    tag @s remove tf2.random_spread;
    tag @s remove tf2.random_crits;
    tag @s remove tf2.free_vote;
    tag @s remove tf2.can_be_autobalanced;
    tag @s remove tf2.on_point;
    tag @s remove tf2.unable_to_cap;
    tag @s remove tf2.dead;
    scoreboard players reset @s tf2.class;
    scoreboard players reset @s tf2.health;
    scoreboard players reset @s tf2.max_health;
    scoreboard players reset @s tf2.team;
    scoreboard players reset @s tf2.respawn_timer;
});

function death() {
    // Puts a dead player into spectator mode & starts their respawn timer.
    // Respawn timer length is according to the map and team.

    // Note: `data entity ⟨marker⟩ data.map.spawn_time.(red/blu)[0]` is measured in *seconds*, whereas `tf2.respawn_timer:@s` is measured in *ticks*
    Text.actionbar(@s, "&<red>❤ Health: 0 / &<tf2.max_health:@s>");
    title @s times 0 3 3;
    spawnpoint @s ~ ~ ~;
    tag @s add tf2.dead;
    gamemode spectator @s;
    tf2.batch_number:$local = tf2.batch_number:@s;
    execute as @e[type=marker,tag=tf2.batch] if score @s tf2.batch_number = $local tf2.batch_number run tag @s add tf2.temp;
    tf2.respawn_timer:@s[scores={tf2.team=1}] = data get entity @e[type=marker,tag=tf2.temp,limit=1] data.map.spawn_time.red[0] 20;
    tf2.respawn_timer:@s[scores={tf2.team=2}] = data get entity @e[type=marker,tag=tf2.temp,limit=1] data.map.spawn_time.blu[0] 20;
    tag @e[type=marker] remove tf2.temp;
}
class Spawn {
    function init() {
        // (Re)spawns a player, and changes their gamemode back to adventure if applicable.
        // @within:
        //   __tick__()
        //   team_assign()

        scoreboard players operation $local tf2.batch_number = @s tf2.batch_number;
        execute as @e[type=marker,tag=tf2.batch] if score @s tf2.batch_number = $local tf2.batch_number run {
            data modify storage tf2.__temp__:coords red_X set from entity @s data.map.spawn.red[0][0];
            data modify storage tf2.__temp__:coords red_Y set from entity @s data.map.spawn.red[0][1];
            data modify storage tf2.__temp__:coords red_Z set from entity @s data.map.spawn.red[0][2];
            data modify storage tf2.__temp__:coords blu_X set from entity @s data.map.spawn.blu[0][0];
            data modify storage tf2.__temp__:coords blu_Y set from entity @s data.map.spawn.blu[0][1];
            data modify storage tf2.__temp__:coords blu_Z set from entity @s data.map.spawn.blu[0][2];
        }
        Spawn.tp() with storage tf2.__temp__:coords;
        gamemode adventure @s;
        tag @s remove tf2.dead;
        tf2.health:@s = tf2.max_health:@s;
        // Replenish ammo
        class_select();
        // Remove "You died!" message
        Text.title(@s, "");
        Text.subtitle(@s, "");
    }
    function tp() {
        // Dynamically teleports the player to their spawn point.
        // @needs_macro
        // @within spawn.init()

        $tp @s[scores={tf2.team=1}] $(red_X) $(red_Y) $(red_Z);
        $tp @s[scores={tf2.team=2}] $(blu_X) $(blu_Y) $(blu_Z);
    }
}

function uninstall() {
    team remove RED; team remove BLU;
    Hardcode.repeat("_i_", () => {bossbar remove tf2:timer__i_;}, start = 1, stop = _INSTANCES_CAP_);
}