import "load";
import "utils";
import "gameplay_loop";
import "math";
import "weapons";
import "objectives";
import "timer";

function __tick__() {
    // @handles #minecraft:tick
    // @context root

    if (!$retina_installed) return  Error.MISSING_DEPENDENCY;
    tf2.ticks:$global ++;
    tf2.ticks:@a ++;
    if (entity @a[tag=tf2.in_queue]) tf2.ticks:$waiting_room ++;
    execute as @a unless score @s tf2.ticks = $global tf2.ticks run login();

    execute as @e[type=#tf2:player_like,tag=!tf2.in_queue,tag=!tf2.is_playing,scores={tf2.queue_type=1..3}] run select_queue();
    execute as @a[tag=!tf2.allowed_to_sprint] run disable_sprint();
    
    $comp_queue_length = execute if entity @e[type=#tf2:player_like,tag=tf2.in_queue,scores={tf2.queue_type=1}];
    $casual_queue_length = execute if entity @e[type=#tf2:player_like,tag=tf2.in_queue,scores={tf2.queue_type=2}];
    $chaos_queue_length = execute if entity @e[type=#tf2:player_like,tag=tf2.in_queue,scores={tf2.queue_type=3}];

    $enough_in_queue = true;
    if ($comp_queue_length < 12 && $casual_queue_length < 24 && $chaos_queue_length < 40) $enough_in_queue = false;
    if ($enough_in_queue) {
        execute as @e[type=marker,tag=tf2.batch,tag=!tf2.in_use,sort=random,limit=1] run start_game.as_marker.main();
    }
    
    execute as @a[tag=tf2.is_playing,tag=!tf2.dead] at @s if entity @s[y=-45,dy=5] run {
        tf2.health:@s = 0;
        Text.tellraw(@a, "&<@s> fell into the void.");
        tp @s ~ 5 ~;
    }
    execute as @e[type=#tf2:player_like,tag=tf2.is_playing,tag=!tf2.dead,scores={tf2.health=..0}] run death();
    execute as @e[type=#tf2:player_like,tag=tf2.dead] run {
        tf2.respawn_timer:@s --;
        tf2.respawn_timer.sec:@s = tf2.respawn_timer:@s;
        tf2.respawn_timer.sec:@s += 19;
        tf2.respawn_timer.sec:@s /= 20;
        Text.title(@s, "&<white>You died!");
        Text.subtitle(@s, "&<gray>Respawn in... &<tf2.respawn_timer.sec:@s, bold, dark_gray>");
    }
    execute as @e[type=#tf2:player_like,tag=tf2.dead,scores={tf2.respawn_timer=..0}] run Spawn.init();

    execute as @e[type=marker,tag=tf2.in_use] if score @s tf2.timer = @s tf2.timer run Timer.main();

    execute as @e[type=marker,tag=tf2.control_point,tag=!tf2.init] at @s run Objectives.control_point.visuals.init();
    execute as @e[type=marker,tag=tf2.control_point,tag=!tf2.locked] at @s run Objectives.control_point.check_for_players();

    execute as @e[type=marker,tag=tf2.in_use,scores={tf2.gamemode=1..4}] if entity @a run Objectives.control_point.gamestate();

    tf2.attack_delay:@e[type=#tf2:player_like,tag=tf2.is_playing,scores={tf2.attack_delay=..0}] -= 100;

    // honetly
    Hardcode.repeat("_i_", () => {execute as @e[type=marker,scores={tf2.batch_number=_i_}] unless score @s tf2.session = $global__i_ tf2.session run kill @s;}, start = 1, stop = _INSTANCES_CAP_);
}

function login() {
    // Teleports a newly joined player to the lobby room, clears their inventory, puts them in adventure mode, resets their gameplay tags, and allows them to join queues.
    // @within __tick__()

    // TODO: improve lobby build quality (in-world)
    if ($Settings.show_debug_messages = 1) Text.tellraw(@a, "&<bold><Debug> &<!bold>Player &<@s> has logged in at &<tf2.ticks:$global> ticks gametime.");
    tp @s[tag=!tf2.admin] Lobby.Main;
    gamemode adventure @s[tag=!tf2.admin];

    clear @s[tag=!tf2.admin];
    JMC.put('item replace entity @s[tag=!tf2.admin] hotbar.8 with written_book{pages:[\'["",{"text":"Welcome to Minecraft TF2!","bold":true,"underlined":true,"color":"gold"},"\\\\n","\\\\n",{"text":"[Start Playing] ","bold":true,"underlined":true,"color":"dark_gray","clickEvent":{"action":"change_page","value":"3"},"hoverEvent":{"action":"show_text","contents":["Choose a gamemode and jump right into the action!"]}},"\\\\n","\\\\n",{"text":"[Tutorial Missions] ","bold":true,"underlined":true,"color":"gray","clickEvent":{"action":"change_page","value":"2"},"hoverEvent":{"action":"show_text","contents":["A singleplayer experience to improve your skills with the various classes and weapons"]}},"\\\\n","\\\\n",{"text":"[Player Stats]","bold":true,"underlined":true,"color":"gray","hoverEvent":{"action":"show_text","contents":[{"text":"View global counters like total kills, captures, etc.","color":"white"}]}},"\\\\n"]\',\'["",{"text":"Select a Mission:","underlined":true},"\\\\n","\\\\n",{"text":"Heist (Spy)","hoverEvent":{"action":"show_text","contents":["Sneak into the base under cover of darkness! Manage your cloak carefully, or else you will be spotted by cameras."]}},"\\\\n",{"text":"Headhunt (Sniper)","hoverEvent":{"action":"show_text","contents":["Hit the floating heads in order to open pathways leading to the treasure room"]}},"\\\\n",{"text":"Racecourse (Scout)","hoverEvent":{"action":"show_text","contents":["Try to avoid the obstacles and get through the level as fast as possible. Hint: you\\\'ll need to use double jumps!"]}},"\\\\n",{"text":"Rocket Jump stuff","hoverEvent":{"action":"show_text","contents":[]}},"\\\\n",{"text":"Bullseye (any class)","hoverEvent":{"action":"show_text","contents":["Try to hit as many targets as you can before the timer runs out!"]}},"\\\\n",{"text":"Some other stuff idk","hoverEvent":{"action":"show_text","contents":[]}}]\',\'["",{"text":"Queue for a game:","underlined":true},"\\\\n","\\\\n","\\\\n",{"text":"[Competitive Mode]","bold":true,"color":"dark_green","clickEvent":{"action":"change_page","value":"6"},"hoverEvent":{"action":"show_text","contents":[{"text":"• Max players: 9 v 9 ","color":"dark_green"},"\\\\n",{"text":"• Random bullet spread: NO","color":"dark_green"},"\\\\n",{"text":"• Gamemode / map pool: LIMITED","color":"dark_green"},"\\\\n",{"text":"• Matchmaking system: YES","color":"dark_green"}]}},"\\\\n","\\\\n","\\\\n",{"text":"[Casual Mode]","bold":true,"color":"dark_aqua","clickEvent":{"action":"change_page","value":"9"},"hoverEvent":{"action":"show_text","contents":[{"text":"• Max players: 12 v 12","color":"dark_aqua"},"\\\\n",{"text":"• Random bullet spread: YES","color":"dark_aqua"},"\\\\n",{"text":"• Gamemode / map pool: ALL","color":"dark_aqua"},"\\\\n",{"text":"• Matchmaking system: YES","color":"dark_aqua"},"\\\\n",{"text":"• Team autobalance: YES","color":"dark_aqua"}]}},"\\\\n","\\\\n","\\\\n",{"text":"[Chaos Mode]","bold":true,"color":"dark_red","clickEvent":{"action":"change_page","value":"12"},"hoverEvent":{"action":"show_text","contents":[{"text":"• Max players: 20 v 20","color":"dark_red"},"\\\\n",{"text":"• Random bullet spread: YES","color":"dark_red"},"\\\\n",{"text":"• Gamemode / map pool: ALL","color":"dark_red"},"\\\\n",{"text":"• Matchmaking system: NO","color":"dark_red"},"\\\\n","• Team autobalance: NO"]}}]\',\'[""]\',\'[""]\',\'["","\\\\n",{"text":"You have selected:","underlined":true,"color":"dark_gray"},"\\\\n",{"text":"Competitive Mode","bold":true,"color":"dark_green"},"\\\\n","\\\\n",{"text":"Is this correct?","color":"black"},"\\\\n",{"text":"[Yup]","color":"dark_green","clickEvent":{"action":"run_command","value":"/trigger tf2.queue_type set 1"}},{"text":" [Nope]","color":"gray","clickEvent":{"action":"change_page","value":"3"}}]\',\'[""]\',\'[""]\',\'["","\\\\n",{"text":"You have selected:","underlined":true,"color":"dark_gray"},"\\\\n",{"text":"Casual Mode","bold":true,"color":"dark_aqua"},"\\\\n","\\\\n",{"text":"Is this correct?","color":"black"},"\\\\n",{"text":"[Yup]","color":"dark_aqua","clickEvent":{"action":"run_command","value":"/trigger tf2.queue_type set 2"}},{"text":" [Nope]","color":"gray","clickEvent":{"action":"change_page","value":"3"}}]\',\'[""]\',\'[""]\',\'["","\\\\n",{"text":"You have selected:","underlined":true,"color":"dark_gray"},"\\\\n",{"text":"Chaos Mode","bold":true,"color":"dark_red"},"\\\\n","\\\\n",{"text":"Is this correct?","color":"black"},"\\\\n",{"text":"[Yup]","color":"dark_red","clickEvent":{"action":"run_command","value":"/trigger tf2.queue_type set 3"}},{"text":" [Nope]","color":"gray","clickEvent":{"action":"change_page","value":"3"}}]\'],title:"Navigator",author:LazyHarpSeal}');

    tf2.ticks:@s = tf2.ticks:$global;
    scoreboard players enable @s tf2.queue_type;
    tf2.queue_type:@s = 0;

    // removes all gameplay-specific variables
    team leave @s;
    tag @s remove tf2.in_queue;
    tag @s remove tf2.allowed_to_sprint;
    tag @s remove tf2.is_playing;
    tag @s remove tf2.random_spread;
    tag @s remove tf2.random_crits;
    tag @s remove tf2.free_vote;
    tag @s remove tf2.can_be_autobalanced;
    tag @s remove tf2.on_point;
    tag @s remove tf2.unable_to_cap;
    tag @s remove tf2.dead;
    scoreboard players reset @s tf2.class;
    scoreboard players reset @s tf2.health;
    scoreboard players reset @s tf2.max_health;
    scoreboard players reset @s tf2.team;
    scoreboard players reset @s tf2.respawn_timer;
    tf2.batch_number:@s = 0;
} 

function death() {
    // Puts a dead player into spectator mode & starts their respawn timer.
    // Respawn timer length is according to the map and team.

    // Note: `data entity ⟨marker⟩ data.map.spawn_time.(red/blu)[0]` is measured in *seconds*, whereas `tf2.respawn_timer:@s` is measured in *ticks*
    spawnpoint @s ~ ~ ~;
    tag @s add tf2.dead;
    gamemode spectator @s;
    tf2.batch_number:@s -> tf2.batch_number:$local;
    execute as @e[type=marker,tag=tf2.batch] if score @s tf2.batch_number = $local tf2.batch_number run tag @s add tf2.temp;
    tf2.respawn_timer:@s[scores={tf2.team=1}] = data get entity @e[type=marker,tag=tf2.temp,limit=1] data.map.spawn_time.red[0] 20;
    tf2.respawn_timer:@s[scores={tf2.team=2}] = data get entity @e[type=marker,tag=tf2.temp,limit=1] data.map.spawn_time.blu[0] 20;
    tag @e[type=marker] remove tf2.temp;
} 
class Spawn {
    function init() {
        // (Re)spawns a player, and changes their gamemode back to adventure if applicable.
        // @within:
        //   __tick__()
        //   team_assign()

        tag @s add tf2.temp;
        tf2.batch_number:@s -> tf2.batch_number:$local;
        execute as @e[type=marker,tag=tf2.batch] if score @s tf2.batch_number = $local tf2.batch_number run Spawn.tp();
        tag @s remove tf2.temp;
        gamemode adventure @s;
        tag @s remove tf2.dead;
        tf2.health:@s = tf2.max_health:@s;
        Text.title(@s, "");
        Text.subtitle(@s, "");
    } 
    function tp() {
        // Dynamically teleports the player to their spawn point. Executed as a marker, NOT the player.
        // @within spawn.init()

        // Spawn location is stored in `data entity @s data.map.spawn.(red/blu)[0]`
        data modify entity @s data.lastPos set from entity @s Pos;
        if (entity @e[type=#tf2:player_like,tag=tf2.temp,scores={tf2.team=1},limit=1]) data modify entity @s Pos set from entity @s data.map.spawn.red[0];
        if (entity @e[type=#tf2:player_like,tag=tf2.temp,scores={tf2.team=2},limit=1]) data modify entity @s Pos set from entity @s data.map.spawn.blu[0];
        tp @e[type=#tf2:player_like,tag=tf2.temp,limit=1] @s;
        data modify entity @s Pos set from entity @s data.lastPos;
    }
} 