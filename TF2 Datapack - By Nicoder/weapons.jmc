Item.create(
    itemId = test_gun,
    itemType = carrot_on_a_stick,
    displayName = "&<#a50f79, bold, italic>Test Gun",
    onClick = () => {
        tf2.team:$current = tf2.team:@s;
        execute as @e[type=#tf2:player_like] unless score @s tf2.team = $current tf2.team run tag @s add tf2.enemy;
        Raycast.simple(
            onHit = () => {
                tf2.health:@s = 0; 
                Text.tellraw(@a, "&<@s> was eliminated by &<@a[tag=__self__]>");
                kill @s[type=villager];
            },
            onStep = () => {particle crit ~ ~ ~ 0 0 0 0 1;},
            target = @e[type=#tf2:player_like,tag=tf2.enemy,gamemode=!spectator]
        );
        tag @e remove tf2.enemy;
    }
);

Item.create(
    itemId = shotgun,
    itemType = carrot_on_a_stick,
    displayName = "&<gray, italic>Shotgun",
    onClick = () => {
        //if (tf2.attack_delay:@s > 0) return 0;
        tf2.team:$current = tf2.team:@s;
        data merge storage retina:input {HorizontalCount: 3, VerticalCount: 3, CenteredCount: false, EndpointEntity: true, SpreadFactor: [30, 170]};
        retina.__variable__:$end_particle = true;
        function retina:traverse/multicast;
        execute as @e[type=#tf2:player_like, scores={retina.hit=1..}] run {
            if (score @s tf2.team = $current tf2.team) return 0;
            $damage = 9;
            $damage *= retina.hit:@s;
            tf2.health:@s -= $damage; 
        }
        retina.__variable__:$end_particle = false;
        //tf2.attack_delay:@s += 1250;
    }
);
class Weapons {
    class test {
        function give() {
            Item.give(test_gun, @s);
        }
        function give_shotgun() {
            Item.give(shotgun, @s);
        }
    }
}