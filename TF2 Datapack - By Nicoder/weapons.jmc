new predicates(holding_melee) {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "equipment": {
            "mainhand": {
                "nbt": "{attributes: {isMelee: 1b}}"
            }
        }
    }
}
new predicates(non_damaging) {
    "condition": "minecraft:any_of",
    "terms": [
        {
            "condition": "minecraft:entity_properties",
            "entity": "this",
            "predicate": {
                "equipment": {
                    "mainhand": {
                        "nbt": "{attributes: {damage: {base: 0}}}"
                    }
                }
            }
        },
        {
            "condition": "minecraft:entity_properties",
            "entity": "this",
            "predicate": {  
                "equipment": {
                    "mainhand": {
                        "count": 0
                    }
                }
            }
        }
    ]
}


Item.create(
    itemId = scattergun,
    itemType = carrot_on_a_stick,
    displayName = "&<gray, italic>Scattergun",
    lore = [],
    nbt = {
        CustomModelData: 31000, 
        retina: {HorizontalCount: 3, VerticalCount: 3, CenteredCount: 0, EndpointEntity: true, TargetEntities: true, SpreadFactor: [30, 170], MaxRecursionDepth: 100}, 
        attributes: {damage: {base: 9}, attackDelay: 0.625d, clip: 6, ammo: 32}
    },
    onClick = () => { Weapons.main_fire(); }
);
Item.create(
    itemId = pistol,
    itemType = carrot_on_a_stick,  
    displayName = "&<gray, italic>Pistol",
    lore = [],
    nbt = {
        CustomModelData: 32000, 
        retina: {HorizontalCount: 1, VerticalCount: 1, CenteredCount: 0, EndpointEntity: true, TargetEntities: true, SpreadFactor: [20, 45], MaxRecursionDepth: 100}, 
        attributes: {damage: {base: 2}, attackDelay: 0.15d, clip: 12, ammo: 40}
    },
    onClick = () => { Weapons.main_fire(); }
);
Item.create(
    itemId = baseball_bat,
    itemType = carrot_on_a_stick,
    displayName = "&<gray, italic>Baseball Bat",
    lore = [],
    nbt = {
        CustomModelData: 33000, 
        retina: {HorizontalCount: 1, VerticalCount: 1, CenteredCount: 0, EndpointEntity: false, TargetEntities: true, SpreadFactor: [0, 0], MaxRecursionDepth: 5}, 
        attributes: {damage: {base: 35}, attackDelay: 0.5d, range: 3.2d, isMelee: true}
    },
    onClick = () => { Weapons.main_fire(); }
);
Item.create(elytra, elytra);


class Weapons {
    function main_fire() {
        Weapons.get_ammo();
        if (tf2.attack_delay:@s > 0) return 0;
        if ($_clip_ <= 0 && !predicate tf2:holding_melee) return 0;

        tf2.team:$current = tf2.team:@s;
        data modify storage retina:input {} merge from entity @s SelectedItem.tag.retina;
        $_damage_ = data get entity @s SelectedItem.tag.attributes.damage.base;
        $_range_ = data get entity @s SelectedItem.tag.attributes.range 1000;
        if (!data entity @s SelectedItem.tag.attributes.range) $_range_ = 2147483647;
        retina._variable_:$end_particle = true;

        function retina:traverse/multicast;
        execute as @e[type=#tf2:player_like, scores={retina.hit=1..}] run {
            if (score @s tf2.team = $current tf2.team) return 0;
            $_distance_ = data get storage retina:output Distance 1000;
            if ($_distance_ > $_range_) return 0;

            $_damage_ *= retina.hit:@s;
            tf2.health:@s -= $_damage_; 
        }
        retina._variable_:$end_particle = false;
        $_delay_ = data get entity @s SelectedItem.tag.attributes.attackDelay 20000;
        tf2.attack_delay:@s += $_delay_;

        // TODO: use `return run` when 1.20.2 releases
        if (predicate tf2:holding_melee) {
            if (score $offset_Y retina.__variable__ matches 776..778) execute at @s anchored eyes run particle minecraft:sweep_attack ^ ^ ^1;
            if (score $offset_Y retina.__variable__ matches 608..610) execute at @s anchored eyes run particle minecraft:sweep_attack ^ ^ ^1;
            if (score $offset_Y retina.__variable__ matches 192) execute at @s anchored eyes run particle minecraft:sweep_attack ^ ^ ^1;
        }
        else {
            $_clip_ --;
            Weapons.set_ammo();
        }
    }
    function get_ammo() {
        if (tf2.current_slot:@s == 0) {
            $_clip_ = tf2.primary_clip:@s;
            $_maxClip_ = tf2.primary_maxClip:@s;
            $_ammo_ = tf2.primary_ammo:@s;
        }
        if (tf2.current_slot:@s == 1) {
            $_clip_ = tf2.secondary_clip:@s;
            $_maxClip_ = tf2.secondary_maxClip:@s;
            $_ammo_ = tf2.secondary_ammo:@s;
        }
    }
    function set_ammo() {
        if (tf2.current_slot:@s == 0) {
            tf2.primary_clip:@s = $_clip_;   
            tf2.primary_maxClip:@s = $_maxClip_;
            tf2.primary_ammo:@s = $_ammo_;  
        }
        if (tf2.current_slot:@s == 1) {
            tf2.secondary_clip:@s = $_clip_;
            tf2.secondary_maxClip:@s = $_maxClip_;
            tf2.secondary_ammo:@s = $_ammo_;
        }
    }
    function actionbar() {
        // TODO: use `return run` when 1.20.2 releases
        if (predicate tf2:holding_melee || predicate tf2:non_damaging) {
            Text.actionbar(@s, "&<red>❤ Health: &<tf2.health:@s> / &<tf2.max_health:@s>");
        }
        else {
            Text.actionbar(@s, "&<red>❤ Health: &<tf2.health:@s> / &<tf2.max_health:@s>             &<gray>Ammo: &<$_clip_> &<dark_gray>(&<$_ammo_>)");
        }
    }
}

class Class {
    class Spy {
        function tick() {}
    }
    class Sniper {
        function tick() {}
    }
    class Scout {
        function give() {
            Item.replaceEntity(scattergun, @s, "hotbar.0");
            Item.replaceEntity(pistol, @s, "hotbar.1");
            Item.replaceEntity(baseball_bat, @s, "hotbar.2");

            tf2.primary_maxClip:@s = execute run tf2.primary_clip:@s = data get entity @s Inventory[0].tag.attributes.clip;
            tf2.primary_ammo:@s = data get entity @s Inventory[0].tag.attributes.ammo;
            tf2.secondary_maxClip:@s = execute run tf2.secondary_clip:@s = data get entity @s Inventory[1].tag.attributes.clip;
            tf2.secondary_ammo:@s = data get entity @s Inventory[1].tag.attributes.ammo;
        }
        function tick() {
            tf2.last_slot:@s = tf2.current_slot:@s;
            tf2.last_slot:@s ??= 0;
            tf2.current_slot:@s = data get entity @s SelectedItemSlot;

            if (tf2.last_slot:@s != tf2.current_slot:@s) {
                tf2.attack_delay:@s = data get entity @s SelectedItem.tag.attributes.deployTime 10000;
                if (!data entity @s SelectedItem.tag.attributes.deployTime) tf2.attack_delay:@s = 10000;
            }

            Weapons.get_ammo();
            Weapons.actionbar();
            Weapons.set_ammo(); 
            
            if (predicate tf2:grounded) tag @s add tf2.can_double_jump;
            if (tf2.elytra_detect:@s >= 1) {
                retina.__variable__:$input_pitch = data get entity @s Rotation[1] 10;
                retina.__variable__:$input_yaw = data get entity @s Rotation[0] 10;
                function retina:math/gimbal_to_vec;
                delta.api.launch:$x = retina.__variable__:$output_vec3.X;
                delta.api.launch:$x *= 2;
                delta.api.launch:$y = 5000;
                delta.api.launch:$z = retina.__variable__:$output_vec3.Z;
                delta.api.launch:$z *= 2;
                function delta:api/launch_xyz;

                Item.clear(elytra, @s);
                tf2.elytra_detect:@s = 0;
                tf2.permanent.double_jumps:@s++;
                tag @s remove tf2.can_double_jump;
            }

            Class.Scout.inventory_lock();
        }
        function inventory_lock() {
            Item.replaceEntity(scattergun, @s, "hotbar.0");
            $_count_ = Item.clear(scattergun, @s, 0);
            if ($_count_ != 1) Item.clear(scattergun, @s);
            if ($_count_ != 1) Item.replaceEntity(scattergun, @s, "hotbar.0");

            Item.replaceEntity(pistol, @s, "hotbar.1");
            $_count_ = Item.clear(pistol, @s, 0);
            if ($_count_ != 1) Item.clear(pistol, @s);
            if ($_count_ != 1) Item.replaceEntity(pistol, @s, "hotbar.1");

            Item.replaceEntity(baseball_bat, @s, "hotbar.2");
            $_count_ = Item.clear(baseball_bat, @s, 0);
            if ($_count_ != 1) Item.clear(baseball_bat, @s);
            if ($_count_ != 1) Item.replaceEntity(baseball_bat, @s, "hotbar.2");

            if (entity @s[tag=tf2.can_double_jump]) {
                Item.replaceEntity(elytra, @s, "armor.chest");
                $_count_ = Item.clear(elytra, @s, 0);
                if ($_count_ != 1) Item.clear(elytra, @s);
                if ($_count_ != 1) Item.replaceEntity(elytra, @s, "armor.chest");
            }
        }
    }
}

