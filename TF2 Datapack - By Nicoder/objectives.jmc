class objectives {
    class control_point
    {
        class find_index {
            function main() {
                JMC.put("#> tf2:objectives/control_point/find_index/main");
                JMC.put("#");
                JMC.put("# @within");
                JMC.put("#   tf2:objectives/control_point/**");
                JMC.put("#   tf2:reset/**");
                JMC.put("# @context CP entity");
                JMC.put("# @input");
                JMC.put("#   score $local tf2.batch_number");
                JMC.put("#   score @s tf2.index");
                JMC.put("#       Storage address of the current control point and the game it belongs to.");
                JMC.put("# @reads");
                JMC.put("#   storage tf2:control_points info[$local...][@s tf2.index]");
                JMC.put("#       owner: RawTextComponent (font = tf2:square)");
                JMC.put("#           Team-color square to show who controls the point. Flickers when opponents are attacking the point.");
                JMC.put("#       progress: RawTextComponent (font = tf2:square)");
                JMC.put("#           Team-color triangle that shows how close is point is to being taken. Points left-to-right for BLU progress, and right-to-left for RED progress.");
                JMC.put("#       symbol: RawTextComponent (font = tf2:square)");
                JMC.put("#           Most commonly a locked indictator, but also includes the star for cp_steel's final point, and any other special symbols for specific maps.");
                JMC.put("#       extra: RawTextComponent (font = tf2:square)");
                JMC.put("#           Blank by default. If tf2.letter tag is present, displays the letter of the control point in sequence.");
                JMC.put("#");
                JMC.put("#       wheel.owner: RawTextComponent (font = tf2:wheel) ");
                JMC.put("#           Team-color circle in title to show who controls the point. Only shown to players on the point.");
                JMC.put("#       wheel.progress: RawTextComponent (font = tf2:wheel) ");
                JMC.put("#           Team-color wedge sector in title to show how close is point is to being taken. Only shown to players on the point.");
                JMC.put("#       wheel.spacing: RawTextComponent (font = tf2:wheel) ");
                JMC.put("#           Space characters used to make sure the wheel indicator points to the correct control point.");
                JMC.put("# @output");
                JMC.put("#   storage tf2.__temp__:lookup points[0]");
                JMC.put("#       Dynamically-editable copy of all data in the `tf2:control_points info[$local...][@s tf2.index]` storage path.");
                JMC.put("#       Can be copied back to the original path using `function tf2:objectives/control_point/find_index/reinsert/main`.");

                $mini_index = tf2.index:@s;
                $mini_index /= 10;
                Hardcode.switch(
                    tf2.batch_number:$local,
                    "_i_",
                    () => {
                        execute if score $mini_index tf2.var matches 0 run data modify storage tf2.__temp__:lookup points[0] set from storage tf2:control_points info[_i_][0];
                        Hardcode.switch($mini_index, "_j_", () => {data modify storage tf2.__temp__:lookup points[0] set from storage tf2:control_points info[_i_][_j_];}, count = 7);
                    },
                    count = 5
                );
            } function reinsert() {
                JMC.put("#> tf2:objectives/control_point/find_index/reinsert");
                JMC.put("#");
                JMC.put("# @within");
                JMC.put("#   tf2:objectives/control_point/**");
                JMC.put("#   tf2:reset/**");
                JMC.put("# @context CP entity");
                JMC.put("# @input");
                JMC.put("#   score $local tf2.batch_number");
                JMC.put("#   score @s tf2.index");
                JMC.put("#       Storage address of the current control point and the game it belongs to.");
                JMC.put("#   storage tf2.__temp__:lookup points[0]");
                JMC.put("#       Edited copy of data in the `tf2:control_points info[$local...][@s tf2.index]` storage path.");
                JMC.put("# @writes     ");
                JMC.put("#   storage tf2:control_points info[$local...][@s tf2.index]");
                JMC.put("#       Where all visual data related to the current CP is stored.");
                JMC.put("#       See `tf2:objectives/control_point/find_index/main` comments for specific information.");

                $mini_index = tf2.index:@s;
                $mini_index /= 10;
                Hardcode.switch(
                    tf2.batch_number:$local,
                    "_i_",
                    () => {
                        execute if score $mini_index tf2.var matches 0 run data modify storage tf2:control_points info[_i_][0] set from storage tf2.__temp__:lookup points[0];
                        Hardcode.switch($mini_index, "_j_", () => {data modify storage tf2:control_points info[_i_][_j_] set from storage tf2.__temp__:lookup points[0];}, count = 7);
                    },
                    count = 5
                );
            }
        }

        function check_for_players() {
            JMC.put("#> tf2:objectives/control_point/check_for_players");
            JMC.put("# ");
            JMC.put("# @within tf2:__tick__");
            JMC.put("# @context marker & position");
            JMC.put("# @output");
            JMC.put("#   score $(red/blu)_on_point tf2.var");
            JMC.put("#       The number of RED/BLU players on the control point.");

            tag @s remove tf2.contested;

            execute as @e[type=#tf2:player_like, distance=..1.5, tag=!tf2.unable_to_cap] run tag @s add tf2.on_point;
            $red_on_point = execute if entity @e[tag=tf2.on_point, scores={tf2.team=1}];
            $blu_on_point = execute if entity @e[tag=tf2.on_point, scores={tf2.team=2}];

            if ($red_on_point >= 1 && $blu_on_point >= 1) {tag @s add tf2.contested;}

            execute if entity @s[tag=!tf2.contested] run objectives.control_point.main();
            execute if entity @s[tag=!tf2.contested] run objectives.control_point.decay.init();
            tag @e[type=#tf2:player_like] remove tf2.on_point;
        } function main() {
            JMC.put("#> tf2:objectives/control_point/main");
            JMC.put("# ");
            JMC.put("# @within tf2:objectives/control_point/check_for_players");
            JMC.put("# @context CP entity & position");
            JMC.put("# @input");
            JMC.put("#   score $(red/blu)_on_point tf2.var");
            JMC.put("#       Number of RED/BLU players on the point. Determines how much progress to add and to which team.");
            JMC.put("# @writes");
            JMC.put("#   score $bound tf2.var");
            JMC.put("#       Used as input for `tf2:math/harmonic_series`.");
            JMC.put("# @reads ");
            JMC.put("#   score @s tf2.team");
            JMC.put("#       Current owners of the control point (1 = RED, 2 = BLU). Prevents invalid capture progress from being added.");
            JMC.put("#   score @s tf2.(red/blu)_progress");
            JMC.put("#   score @s tf2.capture_threshold");
            JMC.put("#       Variables describing the state of the control point. Used for visuals.");

            JMC.put("# amount of capture progress is nth partial sum of harmonic series");
            $bound > $red_on_point;
            $bound > $blu_on_point;
            $bound < 4;
            math.harmonic_series();

            JMC.put("# apply capture progress to team that has players on point, but you can't capture a point you already own");
            execute if score $red_on_point tf2.var matches 1.. unless score @s tf2.team matches 1 run objectives.control_point.capture_progress.red();
            execute if score $blu_on_point tf2.var matches 1.. unless score @s tf2.team matches 2 run objectives.control_point.capture_progress.blu();

            execute unless score @s tf2.team matches 1 if score @s tf2.red_progress < @s tf2.capture_threshold if score @s tf2.blu_progress < @s tf2.capture_threshold run objectives.control_point.visuals.capture_progress.red.main();
            execute unless score @s tf2.team matches 2 if score @s tf2.red_progress < @s tf2.capture_threshold if score @s tf2.blu_progress < @s tf2.capture_threshold run objectives.control_point.visuals.capture_progress.blu.main();
        } function gamestate() {
            JMC.put("#> tf2:objectives/control_point/gamestate");
            JMC.put("#");
            JMC.put("# @context game marker");
            JMC.put("# @within tf2:__tick__");
            JMC.put("# @handles game progress & win conditions");
            JMC.put("# @reads");
            JMC.put("#   score @s tf2.batch_number");
            JMC.put("#   score ⟨control points⟩ tf2.batch_number");
            JMC.put("#       Finds the control points that belong to this game marker.");
            JMC.put("#   score @s tf2.gamemode");
            JMC.put("#       Which gamemode is being played (see gamemode key below).");
            JMC.put("#   score @s tf2.timer");
            JMC.put("#       Amount of time remaining (negative values mean the game is already over but players haven't been relogged yet).");
            JMC.put("#       Prevents the `tf2:reset/announce_winner` function from being called repeatedly.");
            JMC.put("# @writes");
            JMC.put("#   score @s tf2.index");
            JMC.put("#       Total number of control points in the current game.");
            JMC.put("#   score $(red/blu)_cp_count tf2.var");
            JMC.put("#       Number of control points owned by RED/BLU in the current game.");
            JMC.put("# @output");
            JMC.put("#   score $winner tf2.team");
            JMC.put("#       Which team has won the current game (1 = RED, 2 = BLU). Null value if the game is still ongoing.");

            tag @e remove tf2.current;
            tf2.batch_number:@s -> tf2.batch_number:$local;
            execute as @e[type=marker,tag=tf2.control_point] if score @s tf2.batch_number = $local tf2.batch_number run tag @s add tf2.current;

            $red_cp_count = execute if entity @e[type=marker,tag=tf2.current,scores={tf2.team=1}];
            $blu_cp_count = execute if entity @e[type=marker,tag=tf2.current,scores={tf2.team=2}];

            JMC.put("# Gamemode key: 1 = A/D, 2 = Symmetrical CP, 3 = KOTH, 4 = Dom");
            scoreboard players reset $winner tf2.team;
            execute if score $red_cp_count tf2.var = @s tf2.index if score @s[tag=!tf2.multistage] tf2.gamemode matches 2 run scoreboard players set $winner tf2.team 1;
            execute if score $blu_cp_count tf2.var = @s tf2.index if score @s[tag=!tf2.multistage] tf2.gamemode matches 1..2 run scoreboard players set $winner tf2.team 2;
            JMC.put("# execute if score $red_cp_count tf2.var = @s tf2.index if score @s tf2.gamemode matches 2 if entity @s[tag=tf2.multistage] run function tf2:start_next_stage");
            JMC.put("# execute if score $blu_cp_count tf2.var = @s tf2.index if score @s tf2.gamemode matches 1..2 if entity @s[tag=tf2.multistage] run function tf2:start_next_stage");
            execute if score $winner tf2.team = $winner tf2.team unless score @s tf2.timer matches ..-1 run reset.announce_winner();

            tag @e[type=marker,tag=tf2.control_point,tag=tf2.current] remove tf2.current;
        } function lock() {
            tag @s add tf2.locked;
            scoreboard players operation @s[scores={tf2.team=1}] tf2.red_progress = @s tf2.capture_threshold;
            scoreboard players operation @s[scores={tf2.team=2}] tf2.blu_progress = @s tf2.capture_threshold;
            objectives.control_point.find_index.main();
            data modify storage tf2.__temp__:lookup points[0].symbol set value '[{"text":"320L@","font":"tf2:square"}]';
            objectives.control_point.find_index.reinsert();
        } function unlock() {
            tag @s remove tf2.locked;
            objectives.control_point.find_index.main();
            data modify storage tf2.__temp__:lookup points[0].symbol set value '[{"text":"320#)@","font":"tf2:square"}]';
            objectives.control_point.find_index.reinsert();
        }

        class capture_progress {
            function red() {
                JMC.put("#> tf2:objectives/control_point/capture_progress/red");
                JMC.put("# ");
                JMC.put("# @within");
                JMC.put("#   tf2:objectives/control_point/main");
                JMC.put("#   tf2:objectives/control_point/decay/main");
                JMC.put("# @context CP entity & position");
                JMC.put("# @input");
                JMC.put("#   score $sum tf2.var");
                JMC.put("#       Progress to add in RED's direction (in milli-ticks).");
                JMC.put("# @writes");
                JMC.put("#   score @s tf2.(red/blu)_progress");
                JMC.put("#       Current state of the control point.");
                JMC.put("#   score @s tf2.capture_threshold");
                JMC.put("#       Self-explanatory.");
                JMC.put("#   predicate tf2:coin_flip");
                JMC.put("#       50/50 chance to pick one of two dialogue lines.");

                JMC.put("# BLU progress must be reverted before adding RED progress");
                execute unless score @s tf2.blu_progress matches 0 run scoreboard players operation @s tf2.blu_progress -= $sum tf2.var;
                tf2.blu_progress:@s > 0;
                scoreboard players operation @s[scores={tf2.blu_progress=0}] tf2.red_progress += $sum tf2.var;
                execute if score @s tf2.red_progress >= @s tf2.capture_threshold run objectives.control_point.set_owner.red();

                $temp = execute if predicate tf2:coin_flip;
                execute if entity @s[tag=!tf2.said_dialogue,tag=!tf2.last,scores={tf2.team=2}] if score $temp tf2.var matches 0 run tellraw @a[scores={tf2.team=2}] {"text":"Alert! Our control point is being captured.","bold":true,"color":"white"};
                execute if entity @s[tag=!tf2.said_dialogue,tag=!tf2.last,scores={tf2.team=2}] if score $temp tf2.var matches 1 run tellraw @a[scores={tf2.team=2}] {"text":"Defend our control point!","bold":true,"color":"white"};
                execute if entity @s[tag=!tf2.said_dialogue,tag=tf2.last,scores={tf2.team=2}] if score $temp tf2.var matches 0 run tellraw @a[scores={tf2.team=2}] [{"text":"Alert! Our","bold":true,"color":"white"},{"text":" last ","bold":true,"italic":true,"color":"white"},{"text":"control point is being captured!","bold":true,"color":"white"}];
                execute if entity @s[tag=!tf2.said_dialogue,tag=tf2.last,scores={tf2.team=2}] if score $temp tf2.var matches 1 run tellraw @a[scores={tf2.team=2}] [{"text":"Alert! The","bold":true,"color":"white"},{"text":" final ","italic":true,"bold":true,"color":"white"},{"text":"control point is under attack.","bold":true,"color":"white"}];
                tag @s[scores={tf2.team=2}] add tf2.said_dialogue;
            } function blu() {
                JMC.put("#> tf2:objectives/control_point/capture_progress/blu");
                JMC.put("# ");
                JMC.put("# @within");
                JMC.put("#   tf2:objectives/control_point/main");
                JMC.put("#   tf2:objectives/control_point/decay/main");
                JMC.put("# @context CP entity & position");
                JMC.put("# @input");
                JMC.put("#   score $sum tf2.var");
                JMC.put("#       Progress to add in BLU's direction (in milli-ticks).");
                JMC.put("# @writes");
                JMC.put("#   score @s tf2.(red/blu)_progress");
                JMC.put("#       Current state of the control point.");
                JMC.put("# @reads");
                JMC.put("#   score @s tf2.capture_threshold");
                JMC.put("#       Self-explanatory.");
                JMC.put("#   predicate tf2:coin_flip");
                JMC.put("#       50/50 chance to pick one of two dialogue lines.");

                JMC.put("# RED progress must be reverted before adding BLU progress");
                execute unless score @s tf2.red_progress matches 0 run scoreboard players operation @s tf2.red_progress -= $sum tf2.var;
                tf2.red_progress:@s > 0;
                scoreboard players operation @s[scores={tf2.red_progress=0}] tf2.blu_progress += $sum tf2.var;
                execute if score @s tf2.blu_progress >= @s tf2.capture_threshold run objectives.control_point.set_owner.blu();

                $temp = execute if predicate tf2:coin_flip;
                execute if entity @s[tag=!tf2.said_dialogue,tag=!tf2.last,scores={tf2.team=1}] if score $temp tf2.var matches 0 run tellraw @a[scores={tf2.team=1}] {"text":"Alert! Our control point is being captured.","bold":true,"color":"white"};
                execute if entity @s[tag=!tf2.said_dialogue,tag=!tf2.last,scores={tf2.team=1}] if score $temp tf2.var matches 1 run tellraw @a[scores={tf2.team=1}] {"text":"Defend our control point!","bold":true,"color":"white"};
                execute if entity @s[tag=!tf2.said_dialogue,tag=tf2.last,scores={tf2.team=1}] if score $temp tf2.var matches 0 run tellraw @a[scores={tf2.team=1}] [{"text":"Alert! Our","bold":true,"color":"white"},{"text":" last ","bold":true,"italic":true,"color":"white"},{"text":"control point is being captured!","bold":true,"color":"white"}];
                execute if entity @s[tag=!tf2.said_dialogue,tag=tf2.last,scores={tf2.team=1}] if score $temp tf2.var matches 1 run tellraw @a[scores={tf2.team=1}] [{"text":"Alert! The","bold":true,"color":"white"},{"text":" final ","italic":true,"bold":true,"color":"white"},{"text":"control point is under attack.","bold":true,"color":"white"}];
                tag @s[scores={tf2.team=1}] add tf2.said_dialogue;
            }
        } class decay {
            function init() {
                JMC.put("#> tf2:objectives/control_point/decay/init");
                JMC.put("#");
                JMC.put("# @within tf2:objectives/control_point/check_for_players");
                JMC.put("# @context CP entity & position");

                JMC.put("# if non-owner team still has players on point, don't decay");
                JMC.put("# TODO: update to use /return when 1.20 releases.");
                scoreboard players reset $break tf2.var;
                execute if score $red_on_point tf2.var matches 1.. unless score @s tf2.team matches 1 run $break = 1;
                execute if score $blu_on_point tf2.var matches 1.. unless score @s tf2.team matches 2 run $break = 1;
                execute unless score $break tf2.var matches 1 run objectives.control_point.decay.main(); 
            } function main() {
                JMC.put("#> tf2:objectives/control_point/decay/main");
                JMC.put("#");
                JMC.put("# @within tf2:objectives/control_point/decay/init");
                JMC.put("# @writes");
                JMC.put("#   score @s tf2.red_progress");
                JMC.put("#   score @s tf2.blu_progress");
                JMC.put("#       Current state of the control point.");
                JMC.put("#   score $sum tf2.var");
                JMC.put("#       Progress to revert (in milli-ticks). Takes 90 seconds to fully revert progress. ");
                JMC.put("# @reads");
                JMC.put("#   score @s tf2.batch_number");
                JMC.put("#   score ⟨marker⟩ tf2.batch_number");
                JMC.put("#       Finds the game marker that the control point belongs to.");

                $sum = tf2.capture_threshold:@s;
                $sum /= 20;
                $sum /= 90;
                execute if entity @s[tag=tf2.overtime] run $sum *= 6;
                tf2.batch_number:@s -> tf2.batch_number:$local;
                execute as @e[type=marker] if score $local tf2.batch_number = @s tf2.batch_number run tag @s add tf2.current;

                JMC.put("# revert in direction of owner team");
                execute if score @s tf2.team matches 1 run objectives.control_point.capture_progress.red();
                execute if score @s tf2.team matches 2 run objectives.control_point.capture_progress.blu();

                execute if score @s[tag=tf2.overtime,scores={tf2.team=1}] tf2.red_progress = @s tf2.capture_threshold as @e[tag=tf2.current,limit=1] run timer.end_game();
                execute if score @s[tag=tf2.overtime,scores={tf2.team=2}] tf2.blu_progress = @s tf2.capture_threshold as @e[tag=tf2.current,limit=1] run timer.end_game();

                JMC.put("# if unowned, revert towards zero");
                scoreboard players operation @s[scores={tf2.team=0,tf2.red_progress=1..}] tf2.red_progress -= $sum tf2.var;
                scoreboard players operation @s[scores={tf2.team=0,tf2.blu_progress=1..}] tf2.blu_progress -= $sum tf2.var;
                tf2.red_progress:@s > 0;
                tf2.blu_progress:@s > 0;

                tag @s[scores={tf2.team=0,tf2.red_progress=0,tf2.blu_progress=0}] remove tf2.said_dialogue;
            }
        } class set_owner {
            function red() {
                JMC.put("#> tf2:objectives/control_point/set_owner/red");
                JMC.put("# ");
                JMC.put("# @within tf2:objectives/control_point/capture_progress/red");
                JMC.put("# @context CP entity & position");
                JMC.put("# @writes");
                JMC.put("#   score $last tf2.team");
                JMC.put("#       The team that *previously* controlled this point. (0 = unowned, 1 = RED, 2 = BLU)");
                JMC.put("#   storage tf2.__temp__:lookup points[0].(owner/progress)");
                JMC.put("#       Visual data relating to this point's state.");
                JMC.put("# @reads");
                JMC.put("#   score @s tf2.batch_number");
                JMC.put("#   score ⟨marker⟩ tf2.batch_number");
                JMC.put("#       Finds the game marker that this control point belongs to.");
                JMC.put("#   score ⟨marker⟩ tf2.gamemode");
                JMC.put("#       The gamemode that this control point is part of (1 = A/D, 2 = 5CP, 3 = KOTH). Used to determine `on_capture` events.");

                tf2.team:@s -> tf2.team:$last
                tf2.team:@s = 1;
                tf2.red_progress:@s = tf2.capture_threshold:@s;

                objectives.control_point.find_index.main();
                data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#D95A58"}]';
                data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321))))))))))))))","color":"gray"}]';
                objectives.control_point.find_index.reinsert();
                tag @s remove tf2.said_dialogue;

                JMC.put("# placeholder for proper model");
                setblock ~ ~-1 ~ red_stained_glass;

                JMC.put("# if KOTH: start counting down RED's timer & pause BLU's");
                JMC.put("# if 5CP & this is mid: unlock BLU's 1st (✓)");
                JMC.put("# else if 5CP: lock/unlock adjacent points in line (✓)");
                JMC.put("# if ATK/DEF: how??!!?!?");
                tf2.batch_number:@s -> tf2.batch_number:$local;
                execute as @e[type=marker] if score @s tf2.batch_number = $local tf2.batch_number run tag @s add tf2.current;
                JMC.put("# TODO: change this part to use the new 'return' command when 1.20 releases");
                execute unless score $last tf2.team = @s tf2.team if score @s[tag=!tf2.multistage] tf2.gamemode matches 2 run objectives.control_point.on_capture.red.symmetric();
                execute unless score $last tf2.team = @s tf2.team if score @s tf2.increment = @s tf2.increment run objectives.control_point.on_capture.add_time();
                tag @e[type=marker,tag=tf2.current] remove tf2.current;
            } function blu() {
                JMC.put("#> tf2:objectives/control_point/set_owner/blu");
                JMC.put("# ");
                JMC.put("# @within tf2:objectives/control_point/capture_progress/blu");
                JMC.put("# @context CP entity & position");
                JMC.put("# @writes");
                JMC.put("#   score $last tf2.team");
                JMC.put("#       The team that *previously* controlled this point. (0 = unowned, 1 = RED, 2 = BLU)");
                JMC.put("#   storage tf2.__temp__:lookup points[0].(owner/progress)");
                JMC.put("#       Visual data relating to this point's state.");
                JMC.put("# @reads");
                JMC.put("#   score @s tf2.batch_number");
                JMC.put("#   score ⟨marker⟩ tf2.batch_number");
                JMC.put("#       Finds the game marker that this control point belongs to.");
                JMC.put("#   score ⟨marker⟩ tf2.gamemode");
                JMC.put("#       The gamemode that this control point is part of (1 = A/D, 2 = 5CP, 3 = KOTH). Used to determine `on_capture` events.");

                tf2.team:@s -> tf2.team:$last;
                tf2.team:@s = 2;
                tf2.blu_progress:@s = tf2.capture_threshold:@s;

                objectives.control_point.find_index.main();
                data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#517AB8"}]';
                data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321))))))))))))))","color":"gray"}]';
                objectives.control_point.find_index.reinsert();
                tag @s remove tf2.said_dialogue;

                JMC.put("# placeholder for proper model");
                setblock ~ ~-1 ~ blue_stained_glass;

                JMC.put("# if KOTH: start counting down BLU's timer & pause RED's");
                JMC.put("# if 5CP & this is mid: unlock RED's 1st (✓)");
                JMC.put("# else if 5CP: lock/unlock adjacent points in line (✓)");
                JMC.put("# if ATK/DEF: lock this point (✓) & unlock next point (✓)");
                tf2.batch_number:@s -> tf2.batch_number:$local;
                execute as @e[type=marker] if score @s tf2.batch_number = $local tf2.batch_number run tag @s add tf2.current;
                JMC.put("# TODO: change this part to use the new 'return' command when 1.20 releases");
                execute unless score $last tf2.team = @s tf2.team if score @s tf2.gamemode matches 1 at @s run objectives.control_point.on_capture.blu.atk_def();
                execute unless score $last tf2.team = @s tf2.team if score @s[tag=!tf2.multistage] tf2.gamemode matches 2 run objectives.control_point.on_capture.blu.symmetric();
                execute unless score $last tf2.team = @s tf2.team if score @s tf2.increment = @s tf2.increment run objectives.control_point.on_capture.add_time();
                tag @e[type=marker,tag=tf2.current] remove tf2.current;
            }
        } class on_capture {
            class red {
                function symmetric() {
                    tf2.index:@s -> tf2.index:$temp;
                    tf2.index:$temp -= 10;

                    execute as @e[type=marker,tag=tf2.current,scores={tf2.team=2}] if score @s tf2.index = $temp tf2.index run objectives.control_point.unlock();
                    execute as @e[type=marker,tag=tf2.current,scores={tf2.team=2}] if score @s tf2.index = $temp tf2.index at @s run setblock ~ ~ ~ air;

                    tf2.index:$temp += 20;
                    execute unless score $last tf2.team matches 0 as @e[type=marker,tag=tf2.current,scores={tf2.team=1}] if score @s tf2.index = $temp tf2.index run objectives.control_point.lock();
                    execute unless score $last tf2.team matches 0 as @e[type=marker,tag=tf2.current,scores={tf2.team=1}] if score @s tf2.index = $temp tf2.index at @s run setblock ~ ~ ~ stone_slab;
                    JMC.put("# TODO: add support for map events (like doors opening)");
                }
            } class blu {
                function atk_def() {
                    tf2.index:@s -> tf2.index:$temp;
                    tf2.index:$temp += 10;

                    objectives.control_point.lock();
                    setblock ~ ~ ~ stone_slab;
                    execute as @e[type=marker,tag=tf2.current] if score @s tf2.index = $temp tf2.index run objectives.control_point.unlock();
                    execute as @e[type=marker,tag=tf2.current] if score @s tf2.index = $temp tf2.index at @s run setblock ~ ~ ~ air;
                    JMC.put("# TODO: add support for map events (like doors opening)");
                } function symmetric() {
                    tf2.index:@s -> tf2.index:$temp;
                    tf2.index:$temp += 10;

                    execute as @e[type=marker,tag=tf2.current,scores={tf2.team=1}] if score @s tf2.index = $temp tf2.index run objectives.control_point.unlock();
                    execute as @e[type=marker,tag=tf2.current,scores={tf2.team=1}] if score @s tf2.index = $temp tf2.index at @s run setblock ~ ~ ~ air;

                    tf2.index:$temp -= 20;
                    execute unless score $last tf2.team matches 0 as @e[type=marker,tag=tf2.current,scores={tf2.team=2}] if score @s tf2.index = $temp tf2.index run objectives.control_point.lock();
                    execute unless score $last tf2.team matches 0 as @e[type=marker,tag=tf2.current,scores={tf2.team=2}] if score @s tf2.index = $temp tf2.index at @s run setblock ~ ~ ~ stone_slab;
                    JMC.put("# TODO: add support for map events (like doors opening)");
                }
            } 
            function add_time() {
                scoreboard players operation @e[type=marker,tag=tf2.batch,tag=tf2.current,limit=1] tf2.timer += @s tf2.increment;
                scoreboard players set @e[type=marker,tag=tf2.batch,tag=tf2.current,limit=1,scores={tf2.gamemode=2}] tf2.timer 12000;

                execute as @a if score @s tf2.batch_number = $local tf2.batch_number run tag @s add tf2.current;
                execute if score @s tf2.red_progress >= @s tf2.capture_threshold run tellraw @a[tag=tf2.current,scores={tf2.team=1}] {"text":"Success. Additional time has been awarded.","bold":true,"color":"red"};
                execute if score @s tf2.red_progress >= @s tf2.capture_threshold run tellraw @a[tag=tf2.current,scores={tf2.team=2}] [{"text":"The ","bold":true,"color":"blue"},{"text":"enemy","bold":true,"italic":true,"color":"blue"},{"text":" has received additional time.","bold":true,"color":"blue"}];
                execute if score @s tf2.blu_progress >= @s tf2.capture_threshold run tellraw @a[tag=tf2.current,scores={tf2.team=1}] [{"text":"The ","bold":true,"color":"red"},{"text":"enemy","bold":true,"italic":true,"color":"red"},{"text":" has received additional time.","bold":true,"color":"red"}];
                execute if score @s tf2.blu_progress >= @s tf2.capture_threshold run tellraw @a[tag=tf2.current,scores={tf2.team=2}] {"text":"Success. Additional time has been awarded.","bold":true,"color":"blue"};
            }
        } class visuals {
            function init() {
                JMC.put("#> tf2:objectives/control_point/visuals/init");
                JMC.put("#");
                JMC.put("# @within tf2:__tick__");
                JMC.put("# @context all CP entities without tag tf2.init, & their positions");
                JMC.put("# @writes ");
                JMC.put("#   score $local tf2.batch_number");
                JMC.put("#       The game marker that the control point belongs to. Used solely for `tf2:objectives/control_point/find_index/main`.");
                JMC.put("#   storage tf2.__temp__:lookup points[0].(owner/progress/symbol/extra)");
                JMC.put("#       All visual data relating to this point's state.");
                JMC.put("# @reads");
                JMC.put("#   score @s tf2.team");
                JMC.put("#       Which team owns the control point (0 = unowned, 1 = RED, 2 = BLU). Used for background color in HUD and for beacon color (placeholder until model is added).");
                JMC.put("#   score @s tf2.index");
                JMC.put("#       Which control point this is. Used to determine the letter to show in the corner (0 = A, 10 = B, 20 = C, etc.).");

                execute if entity @s[tag=tf2.locked] run setblock ~ ~ ~ stone_slab;
                execute unless entity @s[tag=tf2.locked] run setblock ~ ~ ~ air;
                tf2.batch_number:@s -> tf2.batch_number:$local;
                objectives.control_point.find_index.main();
                Hardcode.repeatLists(
                    ["_num_", "_color_", "_hex_"],
                    () => {execute if score @s tf2.team matches _num_ run data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#_hex_"}]';
                    execute if score @s tf2.team matches _num_ run setblock ~ ~-1 ~ _color__stained_glass;},
                    [["0", "1", "2"], ["white", "red", "blue"], ["A1A1A1", "D95A58", "517AB8"]]
                );
                data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321))))))))))))))","color":"gray"}]';
                execute if entity @s[tag=!tf2.locked,tag=!tf2.star] run data modify storage tf2.__temp__:lookup points[0].symbol set value '[""]';
                execute if entity @s[tag=tf2.locked] run data modify storage tf2.__temp__:lookup points[0].symbol set value '[{"text":"320L@","font":"tf2:square"}]';
                execute if entity @s[tag=tf2.star] run data modify storage tf2.__temp__:lookup points[0].symbol set value '[{"text":"321S!)","font":"tf2:square"}]';
                execute unless entity @s[tag=tf2.letter] run data modify storage tf2.__temp__:lookup points[0].extra set value '[{"text":"$#)","font":"tf2:square"}]';
                Hardcode.repeatLists(
                    ["_num_", "_letter_"],
                    () => {execute if entity @s[tag=tf2.letter] if score @s tf2.index matches _num_ run data modify storage tf2.__temp__:lookup points[0].extra set value '[{"text":"3210|]","color":"gray"},{"text":"|21_letter_$#","color":"black"}]';},
                    [["0", "10", "20", "30", "40"], ["A", "B", "C", "D", "E"]]
                );
                objectives.control_point.find_index.reinsert();
                tag @s add tf2.init;
            } function spacing() {
                JMC.put("#> tf2:objectives/control_point/visuals/spacing");
                JMC.put("#");
                JMC.put("# @within tf2:start_game/as_marker/main");
                JMC.put("# @context game marker");
                JMC.put("# @writes ");
                JMC.put("#   score @s tf2.index");
                JMC.put("#       Set to 70 so that `tf2:objectives/control_point/find_index/main` fetches `info[@s tf2.batch_number][7]`, which handles spacing.");
                JMC.put("#   storage tf2.__temp__:lookup points[0].left");
                JMC.put("#       Space to add at the very beginning, before the timer text.");
                JMC.put("#   storage tf2.__temp__:lookup points[0].mid");
                JMC.put("#       Space to add in between the timer text and the control points.");
                JMC.put("#   storage tf2.__temp__:lookup points[0].right");
                JMC.put("#       Space to add at the end of the control points row.");
                JMC.put("# @reads");
                JMC.put("#   score $highest tf2.index");
                JMC.put("#       The highest CP index present in the game. Used to determine how many control points there are.");

                tf2.index:@s = 70;
                objectives.control_point.find_index.main();

                execute if score $highest tf2.index matches 0 run data modify storage tf2.__temp__:lookup points[0].left set value '430';
                execute if score $highest tf2.index matches 0 run data modify storage tf2.__temp__:lookup points[0].mid set value '60';
                execute if score $highest tf2.index matches 0..10 run data modify storage tf2.__temp__:lookup points[0].right set value '[""]';
                execute unless score $highest tf2.index matches 0..10 run data modify storage tf2.__temp__:lookup points[0].left set value '[""]';

                execute if score $highest tf2.index matches 10 run data modify storage tf2.__temp__:lookup points[0].left set value '20';
                execute if score $highest tf2.index matches 10 run data modify storage tf2.__temp__:lookup points[0].mid set value '6420';

                execute if score $highest tf2.index matches 20 run data modify storage tf2.__temp__:lookup points[0].mid set value '6530';
                execute if score $highest tf2.index matches 20 run data modify storage tf2.__temp__:lookup points[0].right set value '3210';

                execute if score $highest tf2.index matches 30 run data modify storage tf2.__temp__:lookup points[0].mid set value '654320';
                execute if score $highest tf2.index matches 30 run data modify storage tf2.__temp__:lookup points[0].right set value '510';

                execute if score $highest tf2.index matches 40 run data modify storage tf2.__temp__:lookup points[0].mid set value '740';
                execute if score $highest tf2.index matches 40 run data modify storage tf2.__temp__:lookup points[0].right set value '54210';

                execute if score $highest tf2.index matches 50 run data modify storage tf2.__temp__:lookup points[0].mid set value '7520';
                execute if score $highest tf2.index matches 50 run data modify storage tf2.__temp__:lookup points[0].right set value '6310';

                execute if score $highest tf2.index matches 60 run data modify storage tf2.__temp__:lookup points[0].mid set value '75430';
                execute if score $highest tf2.index matches 60 run data modify storage tf2.__temp__:lookup points[0].right set value '643210';

                objectives.control_point.find_index.reinsert();
                JMC.put("# repurposes the marker's `tf2.index` score to hold the total number of CPs.");
                tf2.index:@s = tf2.index:$highest;
                tf2.index:@s /= 10;
                tf2.index:@s ++;
            } 
            function wheel_spacing() {
                JMC.put("#> tf2:objectives/control_point/visuals/wheel_spacing");
                JMC.put("#");
                JMC.put("# @within tf2:objectives/control_point/visuals/capture_progress/*/wheel");

                tag @e remove tf2.current;
                tf2.batch_number:@s -> tf2.batch_number:$local;
                execute as @e[type=marker,tag=tf2.control_point] if score @s tf2.batch_number = $local tf2.batch_number run tag @s add tf2.current;

                $wheel_spacing > tf2.index:@e[type=marker,tag=tf2.current];
                $wheel_spacing /= 2;
                $wheel_spacing -= tf2.index:@s;
                Hardcode.repeatLists(
                    ["_num_", "_str_"],
                    () => {execute if score $wheel_spacing tf2.var matches _num_ run data modify storage tf2.__temp__:lookup points[0].wheel.spacing set value _str_;},
                    [["30", "25", "20", "15", "10", "5", "0", "-5", "-10", "-15", "-20", "-25", "-30"], ["'6542'", "'65'", "'632'", "'543'", "'52'", "'41'", "'[\"\"]'", "'[{\"text\":\"$@\"}]'", "'[{\"text\":\"%#\"}]'", "'[{\"text\":\"%$#@\"}]'", "'[{\"text\":\"^$\"}]'", "'[{\"text\":\"^%@\"}]'", "'[{\"text\":\"^%$#\"}]'"]]
                );
            }
            class capture_progress {
                class red {
                    function main() {
                        JMC.put("#> tf2:objectives/control_point/visuals/capture_progress/red/main");
                        JMC.put("#");
                        JMC.put("# @within tf2:objectives/control_point/main");
                        JMC.put("# @writes ");
                        JMC.put("#   score $local tf2.batch_number");
                        JMC.put("#       The game marker that the control point belongs to. Used solely for `tf2:objectives/control_point/find_index/main`.");
                        JMC.put("#   score $frame tf2.var");
                        JMC.put("#       Frame of the bossbar animation to display. Ranges from 0 - 15 based on how much capture progress has been made.");
                        JMC.put("#   score $wheel_frame tf2.var");
                        JMC.put("#       Frame of the title animation to display. Value is calculated in `tf2:objectives/control_point/visuals/capture_progress/blu/wheel`.");
                        JMC.put("# @reads");
                        JMC.put("#   score @s tf2.capture_threshold");
                        JMC.put("#   score @s tf2.(red/blu)_progress");
                        JMC.put("#       Variable relating to the point's current state. Used solely to calculate `$frame tf2.var`.");
                        JMC.put("#   score @s tf2.team");
                        JMC.put("#       Which team owns the control point. Determines whether or not to flicker the background (only flickers if RED is taking BLU's point rather than an unowned point).");

                        tf2.batch_number:@s -> tf2.batch_number:$local;
                        objectives.control_point.find_index.main();
                        $frame = 0;
                        $frame = tf2.capture_threshold:@s[scores={tf2.team=2}];
                        $frame += tf2.red_progress:@s;
                        $frame -= tf2.blu_progress:@s;
                        $frame *= 8;
                        execute if score @s tf2.team matches 0 run $frame *= 2;
                        $wheel_frame = $frame;
                        $frame /= tf2.capture_threshold:@s;
                        switch ($frame) {
                            case 0: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321#@|a0)","color":"#D95A58"}]';
                            case 1: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321#!)|a0b0)","color":"#D95A58"}]';
                            case 2: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321#!|a0b0c0)","color":"#D95A58"}]';
                            case 3: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321#)|a0b0c0d0)","color":"#D95A58"}]';
                            case 4: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321#|a0b0c0d0e0)","color":"#D95A58"}]';
                            case 5: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321@!)|a0b0c0d0e0e0)","color":"#D95A58"}]';
                            case 6: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321@!|a0b0c0d0e0e0e0)","color":"#D95A58"}]';
                            case 7: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321@)|a0b0c0d0e0e0e0e0)","color":"#D95A58"}]';
                            case 8: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321@|a0b0c0d0e0e0e0e0e0)","color":"#D95A58"}]';
                            case 9: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321!)|a0b0c0d0e0e0e0e0e0e0)","color":"#D95A58"}]';
                            case 10: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321!|a0b0c0d0e0e0e0e0e0e0e0)","color":"#D95A58"}]';
                            case 11: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321)|a0b0c0d0e0e0e0e0e0e0e0e0)","color":"#D95A58"}]';
                            case 12: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321|a0b0c0d0e0e0e0e0e0e0e0e0e0)","color":"#D95A58"}]';
                            case 13: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321|b0c0d0e0e0e0e0e0e0e0e0e0e0)","color":"#D95A58"}]';
                            case 14: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321|c0d0e0e0e0e0e0e0e0e0e0e0e0)","color":"#D95A58"}]';
                            case 15: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321|d0e0e0e0e0e0e0e0e0e0e0e0e0)","color":"#D95A58"}]';
                        }
                        execute if score @s[scores={tf2.red_progress=0}] tf2.team matches 0 run data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#A1A1A1"}]';
                        execute if score @s[scores={tf2.red_progress=0}] tf2.team matches 0 run data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321))))))))))))))","color":"gray"}]';
                        execute if score @s[scores={tf2.red_progress=1..}] tf2.team matches 0 run objectives.control_point.visuals.capture_progress.neutral_flicker();
                        execute if score @s tf2.team matches 2 run objectives.control_point.visuals.capture_progress.blu.flicker();
                        objectives.control_point.visuals.capture_progress.red.wheel();
                        objectives.control_point.find_index.reinsert();
                    } function wheel() {
                        JMC.put("#> tf2:objectives/control_point/visuals/capture_progress/red/wheel");
                        JMC.put("#");
                        JMC.put("# @within tf2:objectives/control_point/visuals/capture_progress/red/main");
                        JMC.put("# @writes");
                        JMC.put("#   score $wheel_frame tf2.var");
                        JMC.put("#       Frame of the title animation to display. Ranges from 0 - 47 based on how much capture progress has been made.");
                        JMC.put("#   storage tf2.__temp__:lookup points[0].wheel.owner");
                        JMC.put("#       Team-color background circle to show who controls the point.");
                        JMC.put("#   storage tf2.__temp__:lookup points[0].wheel.progress");
                        JMC.put("#       Team-color wedge sector to show the amount of progress. (duh!)");
                        JMC.put("# @reads");
                        JMC.put("#   score @s tf2.team");
                        JMC.put("#       Which team owns the control point. Determines color of the background circle (unowned = #A1A1A1, BLU-owned = #517AB8).");

                        $wheel_frame *= 3;
                        $wheel_frame /= tf2.capture_threshold:@s;
                        objectives.control_point.visuals.wheel_spacing();
                        execute if score @s tf2.team matches 0 run data modify storage tf2.__temp__:lookup points[0].wheel.owner set value '[{"text":"=","color":"#A1A1A1"}]';
                        execute if score @s tf2.team matches 2 run data modify storage tf2.__temp__:lookup points[0].wheel.owner set value '[{"text":"=","color":"#517AB8"}]';
                        switch ($wheel_frame) {
                            case 0: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"))))))))a10a2b2c#!","color":"#D95A58"}]';
                            case 1: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":")))))))a10a2b2c10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 2: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":")))))))a2b2c10a2b2c2d2e10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 3: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"))))))b2c10a2b2c2d10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 4: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":")))))b2c10b2c2d10a2b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 5: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"))))c10b2c2d10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 6: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"))e10f10c2g10b2c2d2h10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 7: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":")f10e2f10f2g10c2g2h10b2c2d2h10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 8: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":")f2g10e2f2g10f2g2h10c2g2h10b2c2d2h2i10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 9: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":")f2g2h10e2f2g2h10f2g2h2i10c2g2h2i10b2c2d2h2i10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 10: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h10f2g2h2i10e2f2g2h2i10f2g2h2i2j10c2g2h2i2j10b2c2d2h2i2j10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 11: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j10f2g2h2i2j10e2f2g2h2i2j10f2g2h2i2j10c2g2h2i2j10b2c2d2h2i2j10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#D95A58"}]';

                            case 12: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l10f2g2h2i2j2k10e2f2g2h2i2j2k10f2g2h2i2j10c2g2h2i2j10b2c2d2h2i2j10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 13: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l10e2f2g2h2i2j2k2l10f2g2h2i2j2k10c2g2h2i2j2k10b2c2d2h2i2j2k10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 14: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m10e2f2g2h2i2j2k2l2m10f2g2h2i2j2k2l10c2g2h2i2j2k2l10b2c2d2h2i2j2k10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 15: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n10e2f2g2h2i2j2k2l2m2n10f2g2h2i2j2k2l2m10c2g2h2i2j2k2l10b2c2d2h2i2j2k2l10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 16: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o10f2g2h2i2j2k2l2m2n10c2g2h2i2j2k2l2m10b2c2d2h2i2j2k2l10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 17: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n10b2c2d2h2i2j2k2l2m10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 18: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q10b2c2d2e2p10a2b2c2d2e2f2o10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 19: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q10a2b2c2d2e2f2o2p10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 20: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q10a2b2c2d2e2f2o10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 21: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s10a2b2c2d2e2f2o2p2q10a2b2c2d2e2f#!","color":"#D95A58"}]';
                            case 22: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s10a2b2c2d2e2f2o2p2q#!","color":"#D95A58"}]';
                            case 23: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t#!","color":"#D95A58"}]';

                            case 24: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10r2s2t10t#","color":"#D95A58"}]';
                            case 25: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10r2s2t10t@!)","color":"#D95A58"}]';
                            case 26: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s2t10r2s2t@!)","color":"#D95A58"}]';
                            case 27: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10q2r2s2t10r2s@!","color":"#D95A58"}]';
                            case 28: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s2t10q2r2s10r2s@)","color":"#D95A58"}]';
                            case 29: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10q2r2s10r@","color":"#D95A58"}]';
                            case 30: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10m2q2r2s10n2r10o10p!","color":"#D95A58"}]';
                            case 31: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10m2q2r2s10m2n2r10n2o10o2p10o)","color":"#D95A58"}]';
                            case 32: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10l2m2q2r2s10m2n2r10m2n2o10n2o2p10n2o)","color":"#D95A58"}]';
                            case 33: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10l2m2q2r2s10l2m2n2r10l2m2n2o10m2n2o2p10m2n2o)","color":"#D95A58"}]';
                            case 34: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10k2l2m2q2r2s10k2l2m2n2r10k2l2m2n2o10l2m2n2o2p10l2m2n2o10m","color":"#D95A58"}]';
                            case 35: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10k2l2m2q2r2s10k2l2m2n2r10k2l2m2n2o10k2l2m2n2o2p10k2l2m2n2o10k2l2m","color":"#D95A58"}]';

                            case 36: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10k2l2m2q2r2s10k2l2m2n2r10k2l2m2n2o10j2k2l2m2n2o2p10j2k2l2m2n2o10i2j2k2l2m","color":"#D95A58"}]';
                            case 37: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10j2k2l2m2q2r2s10j2k2l2m2n2r10j2k2l2m2n2o10i2j2k2l2m2n2o2p10i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#D95A58"}]';
                            case 38: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10j2k2l2m2q2r2s10i2j2k2l2m2n2r10i2j2k2l2m2n2o10h2i2j2k2l2m2n2o2p10h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#D95A58"}]';
                            case 39: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10i2j2k2l2m2q2r2s10i2j2k2l2m2n2r10h2i2j2k2l2m2n2o10g2h2i2j2k2l2m2n2o2p10g2h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#D95A58"}]';
                            case 40: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10i2j2k2l2m2q2r2s10h2i2j2k2l2m2n2r10g2h2i2j2k2l2m2n2o10f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#D95A58"}]';
                            case 41: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10h2i2j2k2l2m2q2r2s10g2h2i2j2k2l2m2n2r10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#D95A58"}]';
                            case 42: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10f2o2p2q2r2s2t10e2p2q2r2s10d2h2i2j2k2l2m2q2r2s10c2g2h2i2j2k2l2m2n2r10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#D95A58"}]';
                            case 43: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10e2f2o2p2q2r2s2t10d2e2p2q2r2s10b2c2d2h2i2j2k2l2m2q2r2s10c2g2h2i2j2k2l2m2n2r10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#D95A58"}]';
                            case 44: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10f2o2p2q2r2s2t10d2e2f2o2p2q2r2s2t10b2c2d2e2p2q2r2s10b2c2d2h2i2j2k2l2m2q2r2s10c2g2h2i2j2k2l2m2n2r10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#D95A58"}]';
                            case 45: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10d2e2f2o2p2q2r2s2t10b2c2d2e2f2o2p2q2r2s2t10b2c2d2e2p2q2r2s10b2c2d2h2i2j2k2l2m2q2r2s10c2g2h2i2j2k2l2m2n2r10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#D95A58"}]';
                            case 46: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10d2e2f2o2p2q2r2s2t10b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10b2c2d2e2p2q2r2s10b2c2d2h2i2j2k2l2m2q2r2s10c2g2h2i2j2k2l2m2n2r10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#D95A58"}]';
                            case 47: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10b2c2d2e2p2q2r2s10b2c2d2h2i2j2k2l2m2q2r2s10c2g2h2i2j2k2l2m2n2r10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#D95A58"}]';
                        }
                        title @a[tag=tf2.on_point] times 0 4 5;
                        title @a[tag=tf2.on_point] title [{"nbt":"points[0].wheel.spacing","storage":"tf2.__temp__:lookup","interpret":true,"font":"tf2:wheel"},{"text":"?43","color":"#291A15","font":"tf2:wheel"},{"nbt":"points[0].wheel.owner","storage":"tf2.__temp__:lookup","interpret":true,"font":"tf2:wheel"},{"text":"421|","font":"tf2:wheel"},{"nbt":"points[0].wheel.progress","storage":"tf2.__temp__:lookup","interpret":true,"font":"tf2:wheel"}];
                    } function flicker() {
                        $flicker = tf2.ticks:$global;
                        $flicker %= 20;
                        if ($flicker == 0) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#D28991"}]';
                        if ($flicker matches 1..2) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#CF9198"}]';
                        if ($flicker matches 3..4) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#CDACB1"}]';
                        if ($flicker matches 5..7) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#CEB6B9"}]';
                        if ($flicker matches 8..11) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#CABCC0"}]';
                        if ($flicker matches 12..14) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#CEB6B9"}]';
                        if ($flicker matches 15..16) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#CDACB1"}]';
                        if ($flicker matches 17..18) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#CF9198"}]';
                        if ($flicker == 19) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#D28991"}]';
                    }
                } class blu {
                    function main() {
                        JMC.put("#> tf2:objectives/control_point/visuals/capture_progress/blu/main");
                        JMC.put("#");
                        JMC.put("# @within tf2:objectives/control_point/main");
                        JMC.put("# @writes ");
                        JMC.put("#   score $local tf2.batch_number");
                        JMC.put("#       The game marker that the control point belongs to. Used solely for `tf2:objectives/control_point/find_index/main`.");
                        JMC.put("#   score $frame tf2.var");
                        JMC.put("#       Frame of the bossbar animation to display. Ranges from 0 - 15 based on how much capture progress has been made.");
                        JMC.put("#   score $wheel_frame tf2.var");
                        JMC.put("#       Frame of the title animation to display. Value is calculated in `tf2:objectives/control_point/visuals/capture_progress/blu/wheel`.");
                        JMC.put("# @reads");
                        JMC.put("#   score @s tf2.capture_threshold");
                        JMC.put("#   score @s tf2.(red/blu)_progress");
                        JMC.put("#       Variable relating to the point's current state. Used solely to calculate `$frame tf2.var`.");
                        JMC.put("#   score @s tf2.team");
                        JMC.put("#       Which team owns the control point. Determines whether or not to flicker the background (only flickers if BLU is taking RED's point rather than an unowned point).");

                        tf2.batch_number:@s -> tf2.batch_number:$local;
                        objectives.control_point.find_index.main();
                        $frame = 0;
                        $frame = tf2.capture_threshold:@s[scores={tf2.team=1}];
                        $frame += tf2.blu_progress:@s;
                        $frame -= tf2.red_progress:@s;
                        $frame *= 8;
                        execute if score @s tf2.team matches 0 run $frame *= 2;
                        $wheel_frame = $frame;
                        $frame /= tf2.capture_threshold:@s;
                        switch ($frame) {
                            case 0: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321a0#@)","color":"#517AB8"}]';
                            case 1: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321b0a0#@","color":"#517AB8"}]';
                            case 2: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321c0b0a0#!)","color":"#517AB8"}]';
                            case 3: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321d0c0b0a0#!","color":"#517AB8"}]';
                            case 4: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321e0d0c0b0a0#)","color":"#517AB8"}]';
                            case 5: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321e0e0d0c0b0a0#","color":"#517AB8"}]';
                            case 6: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321e0e0e0d0c0b0a0@!)","color":"#517AB8"}]';
                            case 7: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321e0e0e0e0d0c0|b0a0@!","color":"#517AB8"}]';
                            case 8: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321e0e0e0e0e0d0c0|b0a0@)","color":"#517AB8"}]';
                            case 9: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321e0e0e0e0e0e0|d0c0b0a0@","color":"#517AB8"}]';
                            case 10: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321e0e0e0e0e0e0e0|d0c0b0a0!)","color":"#517AB8"}]';
                            case 11: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321e0e0e0e0e0e0e0|e0d0c0b0a0!","color":"#517AB8"}]';
                            case 12: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321e0e0e0e0e0e0e0|e0e0d0c0b0a0)","color":"#517AB8"}]';
                            case 13: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321e0e0e0e0e0e0e0|e0e0e0d0c0b0)","color":"#517AB8"}]';
                            case 14: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321e0e0e0e0e0e0e0|e0e0e0e0d0c0)","color":"#517AB8"}]';
                            case 15: data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321e0e0e0e0e0e0e0|e0e0e0e0e0d0)","color":"#517AB8"}]';
                        }
                        execute if score @s[scores={tf2.blu_progress=0}] tf2.team matches 0 run data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#A1A1A1"}]';
                        execute if score @s[scores={tf2.blu_progress=0}] tf2.team matches 0 run data modify storage tf2.__temp__:lookup points[0].progress set value '[{"text":"321))))))))))))))","color":"gray"}]';
                        execute if score @s[scores={tf2.blu_progress=1..}] tf2.team matches 0 run objectives.control_point.visuals.capture_progress.neutral_flicker();
                        execute if score @s tf2.team matches 1 run objectives.control_point.visuals.capture_progress.red.flicker();
                        objectives.control_point.visuals.capture_progress.blu.wheel();
                        objectives.control_point.find_index.reinsert();
                    } function wheel() {
                        $wheel_frame *= 3;
                        $wheel_frame /= tf2.capture_threshold:@s;
                        objectives.control_point.visuals.wheel_spacing();
                        execute if score @s tf2.team matches 0 run data modify storage tf2.__temp__:lookup points[0].wheel.owner set value '[{"text":"=","color":"#A1A1A1"}]';
                        execute if score @s tf2.team matches 1 run data modify storage tf2.__temp__:lookup points[0].wheel.owner set value '[{"text":"=","color":"#D95A58"}]';
                        switch ($wheel_frame) {
                            case 0: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"))))))))a10a2b2c#!","color":"#517AB8"}]';
                            case 1: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":")))))))a10a2b2c10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 2: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":")))))))a2b2c10a2b2c2d2e10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 3: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"))))))b2c10a2b2c2d10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 4: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":")))))b2c10b2c2d10a2b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 5: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"))))c10b2c2d10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 6: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"))e10f10c2g10b2c2d2h10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 7: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":")f10e2f10f2g10c2g2h10b2c2d2h10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 8: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":")f2g10e2f2g10f2g2h10c2g2h10b2c2d2h2i10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 9: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":")f2g2h10e2f2g2h10f2g2h2i10c2g2h2i10b2c2d2h2i10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 10: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h10f2g2h2i10e2f2g2h2i10f2g2h2i2j10c2g2h2i2j10b2c2d2h2i2j10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 11: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j10f2g2h2i2j10e2f2g2h2i2j10f2g2h2i2j10c2g2h2i2j10b2c2d2h2i2j10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#517AB8"}]';

                            case 12: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l10f2g2h2i2j2k10e2f2g2h2i2j2k10f2g2h2i2j10c2g2h2i2j10b2c2d2h2i2j10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 13: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l10e2f2g2h2i2j2k2l10f2g2h2i2j2k10c2g2h2i2j2k10b2c2d2h2i2j2k10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 14: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m10e2f2g2h2i2j2k2l2m10f2g2h2i2j2k2l10c2g2h2i2j2k2l10b2c2d2h2i2j2k10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 15: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n10e2f2g2h2i2j2k2l2m2n10f2g2h2i2j2k2l2m10c2g2h2i2j2k2l10b2c2d2h2i2j2k2l10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 16: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o10f2g2h2i2j2k2l2m2n10c2g2h2i2j2k2l2m10b2c2d2h2i2j2k2l10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 17: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n10b2c2d2h2i2j2k2l2m10b2c2d2e10a2b2c2d2e2f10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 18: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q10b2c2d2e2p10a2b2c2d2e2f2o10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 19: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q10a2b2c2d2e2f2o2p10a2b2c2d2e2f10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 20: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q10a2b2c2d2e2f2o10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 21: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s10a2b2c2d2e2f2o2p2q10a2b2c2d2e2f#!","color":"#517AB8"}]';
                            case 22: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s10a2b2c2d2e2f2o2p2q#!","color":"#517AB8"}]';
                            case 23: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t#!","color":"#517AB8"}]';

                            case 24: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10r2s2t10t#","color":"#517AB8"}]';
                            case 25: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10r2s2t10t@!)","color":"#517AB8"}]';
                            case 26: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s2t10r2s2t@!)","color":"#517AB8"}]';
                            case 27: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10q2r2s2t10r2s@!","color":"#517AB8"}]';
                            case 28: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s2t10q2r2s10r2s@)","color":"#517AB8"}]';
                            case 29: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10q2r2s10r@","color":"#517AB8"}]';
                            case 30: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10m2q2r2s10n2r10o10p!","color":"#517AB8"}]';
                            case 31: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10m2q2r2s10m2n2r10n2o10o2p10o)","color":"#517AB8"}]';
                            case 32: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10l2m2q2r2s10m2n2r10m2n2o10n2o2p10n2o)","color":"#517AB8"}]';
                            case 33: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10l2m2q2r2s10l2m2n2r10l2m2n2o10m2n2o2p10m2n2o)","color":"#517AB8"}]';
                            case 34: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10k2l2m2q2r2s10k2l2m2n2r10k2l2m2n2o10l2m2n2o2p10l2m2n2o10m","color":"#517AB8"}]';
                            case 35: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10k2l2m2q2r2s10k2l2m2n2r10k2l2m2n2o10k2l2m2n2o2p10k2l2m2n2o10k2l2m","color":"#517AB8"}]';

                            case 36: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10k2l2m2q2r2s10k2l2m2n2r10k2l2m2n2o10j2k2l2m2n2o2p10j2k2l2m2n2o10i2j2k2l2m","color":"#517AB8"}]';
                            case 37: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10j2k2l2m2q2r2s10j2k2l2m2n2r10j2k2l2m2n2o10i2j2k2l2m2n2o2p10i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#517AB8"}]';
                            case 38: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10j2k2l2m2q2r2s10i2j2k2l2m2n2r10i2j2k2l2m2n2o10h2i2j2k2l2m2n2o2p10h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#517AB8"}]';
                            case 39: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10i2j2k2l2m2q2r2s10i2j2k2l2m2n2r10h2i2j2k2l2m2n2o10g2h2i2j2k2l2m2n2o2p10g2h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#517AB8"}]';
                            case 40: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10i2j2k2l2m2q2r2s10h2i2j2k2l2m2n2r10g2h2i2j2k2l2m2n2o10f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#517AB8"}]';
                            case 41: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10p2q2r2s10h2i2j2k2l2m2q2r2s10g2h2i2j2k2l2m2n2r10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#517AB8"}]';
                            case 42: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10f2o2p2q2r2s2t10e2p2q2r2s10d2h2i2j2k2l2m2q2r2s10c2g2h2i2j2k2l2m2n2r10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#517AB8"}]';
                            case 43: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10o2p2q2r2s2t10e2f2o2p2q2r2s2t10d2e2p2q2r2s10b2c2d2h2i2j2k2l2m2q2r2s10c2g2h2i2j2k2l2m2n2r10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#517AB8"}]';
                            case 44: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10f2o2p2q2r2s2t10d2e2f2o2p2q2r2s2t10b2c2d2e2p2q2r2s10b2c2d2h2i2j2k2l2m2q2r2s10c2g2h2i2j2k2l2m2n2r10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#517AB8"}]';
                            case 45: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10o2p2q2r2s2t10d2e2f2o2p2q2r2s2t10b2c2d2e2f2o2p2q2r2s2t10b2c2d2e2p2q2r2s10b2c2d2h2i2j2k2l2m2q2r2s10c2g2h2i2j2k2l2m2n2r10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#517AB8"}]';
                            case 46: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10d2e2f2o2p2q2r2s2t10b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10b2c2d2e2p2q2r2s10b2c2d2h2i2j2k2l2m2q2r2s10c2g2h2i2j2k2l2m2n2r10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#517AB8"}]';
                            case 47: data modify storage tf2.__temp__:lookup points[0].wheel.progress set value '[{"text":"h2i2j2k2l2m10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10c2g2h2i2j2k2l2m2n2r10b2c2d2h2i2j2k2l2m2q2r2s10b2c2d2e2p2q2r2s10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10a2b2c2d2e2f2o2p2q2r2s2t10b2c2d2e2p2q2r2s10b2c2d2h2i2j2k2l2m2q2r2s10c2g2h2i2j2k2l2m2n2r10f2g2h2i2j2k2l2m2n2o10e2f2g2h2i2j2k2l2m2n2o2p10f2g2h2i2j2k2l2m2n2o10h2i2j2k2l2m","color":"#517AB8"}]';
                        }
                        title @a[tag=tf2.on_point] times 0 4 5;
                        title @a[tag=tf2.on_point] title [{"nbt":"points[0].wheel.spacing","storage":"tf2.__temp__:lookup","interpret":true,"font":"tf2:wheel"},{"text":"?43","color":"#291A15","font":"tf2:wheel"},{"nbt":"points[0].wheel.owner","storage":"tf2.__temp__:lookup","interpret":true,"font":"tf2:wheel"},{"text":"421|","font":"tf2:wheel"},{"nbt":"points[0].wheel.progress","storage":"tf2.__temp__:lookup","interpret":true,"font":"tf2:wheel"}];
                    } function flicker() {
                        $flicker = tf2.ticks:$global;
                        $flicker %= 20;
                        if ($flicker == 0) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#7EA3CE"}]';
                        if ($flicker matches 1..2) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#8EABCD"}]';
                        if ($flicker matches 3..4) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#9AB1CB"}]';
                        if ($flicker matches 5..7) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#A8B9CC"}]';
                        if ($flicker matches 8..11) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#B4BECA"}]';
                        if ($flicker matches 12..14) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#A8B9CC"}]';
                        if ($flicker matches 15..16) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#9AB1CB"}]';
                        if ($flicker matches 17..18) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#8EABCD"}]';
                        if ($flicker == 19) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#7EA3CE"}]';
                    }
                } function neutral_flicker() {
                    $flicker = tf2.ticks:$global;
                    $flicker %= 20;
                    if ($flicker == 0) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#A0A0A0"}]';
                    if ($flicker matches 1..2) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#ABABAB"}]';
                    if ($flicker matches 3..4) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#B6B6B6"}]';
                    if ($flicker matches 5..7) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#BDBDBD"}]';
                    if ($flicker matches 8..11) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#C4C4C4"}]';
                    if ($flicker matches 12..14) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#BDBDBD"}]';
                    if ($flicker matches 15..16) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#B6B6B6"}]';
                    if ($flicker matches 17..18) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#ABABAB"}]';
                    if ($flicker == 19) data modify storage tf2.__temp__:lookup points[0].owner set value '[{"text":"[","color":"#F5EACB"},{"text":"3210=","color":"#A0A0A0"}]';
                }
            }
        }
    }
}